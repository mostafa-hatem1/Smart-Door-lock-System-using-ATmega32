
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00002ddc  00002e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800172  00800172  00002f82  2**0
                  ALLOC
  3 .stab         00002c64  00000000  00000000  00002f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016b4  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000729c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000754c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__vector_4>
      14:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__vector_9>
      28:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__vector_10>
      2c:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 07 	call	0xe38	; 0xe38 <main>
      8a:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e5       	ldi	r26, 0x5B	; 91
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e5       	ldi	r24, 0x5B	; 91
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer_CTC_Callback>:
uint8 password[PASSWORD_LENGTH], confirmPassword[PASSWORD_LENGTH];
uint8 error;
uint8 response;

/*---- Timer Callback Function ----*/
void Timer_CTC_Callback(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	time_elapsed++;
     b4e:	80 91 72 01 	lds	r24, 0x0172
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 72 01 	sts	0x0172, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <HMI_delaySeconds>:

/*---- Non-blocking Delay Function ----*/
void HMI_delaySeconds(uint8 seconds) {
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	2d 97       	sbiw	r28, 0x0d	; 13
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	88 87       	std	Y+8, r24	; 0x08
			.initial_value = 0,
			.compare_value = 31249,    /*---- 8MHz/256 prescaler = 1 second ----*/
			.timer_id = TIMER1_ID,
			.mode = TIMER_MODE_CTC,
			.prescaler = TIMER_PRESCALER_256
	};
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	9a 87       	std	Y+10, r25	; 0x0a
     b7a:	89 87       	std	Y+9, r24	; 0x09
     b7c:	ea e6       	ldi	r30, 0x6A	; 106
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	fc 87       	std	Y+12, r31	; 0x0c
     b82:	eb 87       	std	Y+11, r30	; 0x0b
     b84:	f7 e0       	ldi	r31, 0x07	; 7
     b86:	fd 87       	std	Y+13, r31	; 0x0d
     b88:	eb 85       	ldd	r30, Y+11	; 0x0b
     b8a:	fc 85       	ldd	r31, Y+12	; 0x0c
     b8c:	00 80       	ld	r0, Z
     b8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b90:	9c 85       	ldd	r25, Y+12	; 0x0c
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	9c 87       	std	Y+12, r25	; 0x0c
     b96:	8b 87       	std	Y+11, r24	; 0x0b
     b98:	e9 85       	ldd	r30, Y+9	; 0x09
     b9a:	fa 85       	ldd	r31, Y+10	; 0x0a
     b9c:	00 82       	st	Z, r0
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	9a 87       	std	Y+10, r25	; 0x0a
     ba6:	89 87       	std	Y+9, r24	; 0x09
     ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	9d 87       	std	Y+13, r25	; 0x0d
     bae:	ed 85       	ldd	r30, Y+13	; 0x0d
     bb0:	ee 23       	and	r30, r30
     bb2:	51 f7       	brne	.-44     	; 0xb88 <HMI_delaySeconds+0x2a>

	time_elapsed = 0;
     bb4:	10 92 72 01 	sts	0x0172, r1
	Timer_init(&timerConfig);
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	0e 94 9e 12 	call	0x253c	; 0x253c <Timer_init>
	Timer_setCallBack_CTC(Timer_CTC_Callback, TIMER1_ID);
     bc0:	83 ea       	ldi	r24, 0xA3	; 163
     bc2:	95 e0       	ldi	r25, 0x05	; 5
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	0e 94 b1 13 	call	0x2762	; 0x2762 <Timer_setCallBack_CTC>

	while (time_elapsed < seconds); /*---- Wait for specified time ----*/
     bca:	90 91 72 01 	lds	r25, 0x0172
     bce:	88 85       	ldd	r24, Y+8	; 0x08
     bd0:	98 17       	cp	r25, r24
     bd2:	d8 f3       	brcs	.-10     	; 0xbca <HMI_delaySeconds+0x6c>

	Timer_deInit(TIMER1_ID);       /*---- Cleanup timer ----*/
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 56 13 	call	0x26ac	; 0x26ac <Timer_deInit>
}
     bda:	2d 96       	adiw	r28, 0x0d	; 13
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <sendPassword>:

/*---- Send Password with Handshaking ----*/
void sendPassword(uint8* password) {
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <sendPassword+0x6>
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	9b 83       	std	Y+3, r25	; 0x03
     bfa:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     bfc:	19 82       	std	Y+1, r1	; 0x01
     bfe:	12 c0       	rjmp	.+36     	; 0xc24 <sendPassword+0x38>
		UART_sendByte(password[i]);
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	9b 81       	ldd	r25, Y+3	; 0x03
     c0a:	fc 01       	movw	r30, r24
     c0c:	e2 0f       	add	r30, r18
     c0e:	f3 1f       	adc	r31, r19
     c10:	80 81       	ld	r24, Z
     c12:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <UART_sendByte>
		while (UART_recieveByte() != NEXT_DIGIT); /*---- Wait for acknowledgment ----*/
     c16:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
     c1a:	83 3e       	cpi	r24, 0xE3	; 227
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <sendPassword+0x2a>
	Timer_deInit(TIMER1_ID);       /*---- Cleanup timer ----*/
}

/*---- Send Password with Handshaking ----*/
void sendPassword(uint8* password) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	85 30       	cpi	r24, 0x05	; 5
     c28:	58 f3       	brcs	.-42     	; 0xc00 <sendPassword+0x14>
		UART_sendByte(password[i]);
		while (UART_recieveByte() != NEXT_DIGIT); /*---- Wait for acknowledgment ----*/
	}
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <getPassword>:

/*---- Get Password from Keypad ----*/
void getPassword(uint8* buffer) {
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	62 97       	sbiw	r28, 0x12	; 18
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	9a 8b       	std	Y+18, r25	; 0x12
     c4c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 key, count = 0;
     c4e:	1f 86       	std	Y+15, r1	; 0x0f
     c50:	8c c0       	rjmp	.+280    	; 0xd6a <getPassword+0x134>
	while (count < PASSWORD_LENGTH) {
		key = KEYPAD_getPressedKey();
     c52:	0e 94 97 0b 	call	0x172e	; 0x172e <KEYPAD_getPressedKey>
     c56:	88 8b       	std	Y+16, r24	; 0x10
		if (key >= 0 && key <= 9) {
     c58:	88 89       	ldd	r24, Y+16	; 0x10
     c5a:	8a 30       	cpi	r24, 0x0A	; 10
     c5c:	a0 f4       	brcc	.+40     	; 0xc86 <getPassword+0x50>
			buffer[count] = key;
     c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	89 89       	ldd	r24, Y+17	; 0x11
     c66:	9a 89       	ldd	r25, Y+18	; 0x12
     c68:	fc 01       	movw	r30, r24
     c6a:	e2 0f       	add	r30, r18
     c6c:	f3 1f       	adc	r31, r19
     c6e:	88 89       	ldd	r24, Y+16	; 0x10
     c70:	80 83       	st	Z, r24
			LCD_moveCursor(1,count);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	6f 85       	ldd	r22, Y+15	; 0x0f
     c76:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_moveCursor>
			LCD_displayCharacter('*'); /*---- Mask password input ----*/
     c7a:	8a e2       	ldi	r24, 0x2A	; 42
     c7c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_displayCharacter>
			count++;
     c80:	8f 85       	ldd	r24, Y+15	; 0x0f
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	8f 87       	std	Y+15, r24	; 0x0f
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	af ea       	ldi	r26, 0xAF	; 175
     c8c:	b3 e4       	ldi	r27, 0x43	; 67
     c8e:	8b 87       	std	Y+11, r24	; 0x0b
     c90:	9c 87       	std	Y+12, r25	; 0x0c
     c92:	ad 87       	std	Y+13, r26	; 0x0d
     c94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c96:	6b 85       	ldd	r22, Y+11	; 0x0b
     c98:	7c 85       	ldd	r23, Y+12	; 0x0c
     c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a ef       	ldi	r20, 0xFA	; 250
     ca4:	54 e4       	ldi	r21, 0x44	; 68
     ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	8f 83       	std	Y+7, r24	; 0x07
     cb0:	98 87       	std	Y+8, r25	; 0x08
     cb2:	a9 87       	std	Y+9, r26	; 0x09
     cb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb6:	6f 81       	ldd	r22, Y+7	; 0x07
     cb8:	78 85       	ldd	r23, Y+8	; 0x08
     cba:	89 85       	ldd	r24, Y+9	; 0x09
     cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e8       	ldi	r20, 0x80	; 128
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cca:	88 23       	and	r24, r24
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <getPassword+0xa2>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9e 83       	std	Y+6, r25	; 0x06
     cd4:	8d 83       	std	Y+5, r24	; 0x05
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <getPassword+0x120>
	else if (__tmp > 65535)
     cd8:	6f 81       	ldd	r22, Y+7	; 0x07
     cda:	78 85       	ldd	r23, Y+8	; 0x08
     cdc:	89 85       	ldd	r24, Y+9	; 0x09
     cde:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	57 e4       	ldi	r21, 0x47	; 71
     ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cec:	18 16       	cp	r1, r24
     cee:	4c f5       	brge	.+82     	; 0xd42 <getPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <getPassword+0x102>
     d1a:	88 ec       	ldi	r24, 0xC8	; 200
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <getPassword+0xf0>
     d2a:	9c 83       	std	Y+4, r25	; 0x04
     d2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	9e 83       	std	Y+6, r25	; 0x06
     d36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	69 f7       	brne	.-38     	; 0xd1a <getPassword+0xe4>
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <getPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d42:	6f 81       	ldd	r22, Y+7	; 0x07
     d44:	78 85       	ldd	r23, Y+8	; 0x08
     d46:	89 85       	ldd	r24, Y+9	; 0x09
     d48:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9e 83       	std	Y+6, r25	; 0x06
     d54:	8d 83       	std	Y+5, r24	; 0x05
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <getPassword+0x12c>
     d66:	9a 83       	std	Y+2, r25	; 0x02
     d68:	89 83       	std	Y+1, r24	; 0x01
}

/*---- Get Password from Keypad ----*/
void getPassword(uint8* buffer) {
	uint8 key, count = 0;
	while (count < PASSWORD_LENGTH) {
     d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6c:	85 30       	cpi	r24, 0x05	; 5
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <getPassword+0x13c>
     d70:	70 cf       	rjmp	.-288    	; 0xc52 <getPassword+0x1c>
			LCD_displayCharacter('*'); /*---- Mask password input ----*/
			count++;
		}
		_delay_ms(350); /*---- Keypad debounce delay ----*/
	}
	while (KEYPAD_getPressedKey() != ENTER_KEY); /*---- Wait for ENTER confirmation ----*/
     d72:	0e 94 97 0b 	call	0x172e	; 0x172e <KEYPAD_getPressedKey>
     d76:	8d 30       	cpi	r24, 0x0D	; 13
     d78:	e1 f7       	brne	.-8      	; 0xd72 <getPassword+0x13c>
}
     d7a:	62 96       	adiw	r28, 0x12	; 18
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <unlockDoor>:

/*---- Door Unlock Sequence ----*/
void unlockDoor() {
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(CMD_OPEN_DOOR);
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <UART_sendByte>
	uint8 response;
	error = 0;
     d9c:	10 92 8c 01 	sts	0x018C, r1
	LCD_clearScreen();
     da0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
	LCD_displayString("Enter pass: ");
     da4:	80 e6       	ldi	r24, 0x60	; 96
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
	getPassword(password);
     dac:	81 e8       	ldi	r24, 0x81	; 129
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 1b 06 	call	0xc36	; 0xc36 <getPassword>
	sendPassword(password);
     db4:	81 e8       	ldi	r24, 0x81	; 129
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 f6 05 	call	0xbec	; 0xbec <sendPassword>
	response = UART_recieveByte();
     dbc:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
     dc0:	89 83       	std	Y+1, r24	; 0x01

	if (response == RESPONSE_OK){
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	8a 3a       	cpi	r24, 0xAA	; 170
     dc6:	01 f5       	brne	.+64     	; 0xe08 <unlockDoor+0x7c>
		/*---- Unlocking procedure ----*/
		error = 0;
     dc8:	10 92 8c 01 	sts	0x018C, r1
		LCD_clearScreen();
     dcc:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
		LCD_displayString("UNLOCKING...");
     dd0:	8d e6       	ldi	r24, 0x6D	; 109
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
		HMI_delaySeconds(LOCKING_TIME);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
     dde:	06 c0       	rjmp	.+12     	; 0xdec <unlockDoor+0x60>

		/*---- Wait for PIR sensor clearance ----*/
		while (UART_recieveByte() == RESPONSE_PIR_DETECTED){
			LCD_clearScreen();
     de0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
			LCD_displayString("People entering");
     de4:	8a e7       	ldi	r24, 0x7A	; 122
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
		LCD_clearScreen();
		LCD_displayString("UNLOCKING...");
		HMI_delaySeconds(LOCKING_TIME);

		/*---- Wait for PIR sensor clearance ----*/
		while (UART_recieveByte() == RESPONSE_PIR_DETECTED){
     dec:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
     df0:	85 35       	cpi	r24, 0x55	; 85
     df2:	b1 f3       	breq	.-20     	; 0xde0 <unlockDoor+0x54>
			LCD_clearScreen();
			LCD_displayString("People entering");
		}

		/*---- Locking procedure ----*/
		LCD_clearScreen();
     df4:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
		LCD_displayString("LOCKING...");
     df8:	8a e8       	ldi	r24, 0x8A	; 138
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
		HMI_delaySeconds(LOCKING_TIME);
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <unlockDoor+0xa4>
	} else if(response == RESPONSE_ERROR){
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	8f 3f       	cpi	r24, 0xFF	; 255
     e0c:	89 f4       	brne	.+34     	; 0xe30 <unlockDoor+0xa4>
		/*---- Password error handling ----*/
		LCD_clearScreen();
     e0e:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
		LCD_displayString("wrong pass");
     e12:	85 e9       	ldi	r24, 0x95	; 149
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
		HMI_delaySeconds(1);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
		failedAttempts++;
     e20:	80 91 73 01 	lds	r24, 0x0173
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	80 93 73 01 	sts	0x0173, r24
		error = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 8c 01 	sts	0x018C, r24
	}
}
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <main>:

/*---- Main Application Entry Point ----*/
int main() {
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <main+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <main+0x8>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	/*---- Initialize peripherals ----*/
	LCD_init();
     e44:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_init>
	UART_init(&uart_config);
     e48:	83 e6       	ldi	r24, 0x63	; 99
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <UART_init>
	Enable_Global_Interrupt();
     e50:	af e5       	ldi	r26, 0x5F	; 95
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef e5       	ldi	r30, 0x5F	; 95
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	8c 93       	st	X, r24

	/*---- Check if password exists in EEPROM ----*/
	UART_sendByte(CMD_CHECK_INIT);
     e5e:	87 e0       	ldi	r24, 0x07	; 7
     e60:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <UART_sendByte>
	SystemState currentState = UART_recieveByte() ? STATE_MAIN_OPTIONS : STATE_CREATE_PASSWORD;
     e64:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
     e68:	1a 82       	std	Y+2, r1	; 0x02
     e6a:	88 23       	and	r24, r24
     e6c:	11 f0       	breq	.+4      	; 0xe72 <main+0x3a>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	8a 83       	std	Y+2, r24	; 0x02

	if(currentState == STATE_MAIN_OPTIONS) {
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	49 f4       	brne	.+18     	; 0xe8a <main+0x52>
		LCD_clearScreen();
     e78:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
		LCD_displayString("System Ready");
     e7c:	80 ea       	ldi	r24, 0xA0	; 160
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
		HMI_delaySeconds(1);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
	}

	/*---- Main State Machine ----*/
	while (1) {
		switch (currentState) {
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3c 83       	std	Y+4, r19	; 0x04
     e92:	2b 83       	std	Y+3, r18	; 0x03
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <main+0x68>
     e9e:	6a c0       	rjmp	.+212    	; 0xf74 <main+0x13c>
     ea0:	2b 81       	ldd	r18, Y+3	; 0x03
     ea2:	3c 81       	ldd	r19, Y+4	; 0x04
     ea4:	23 30       	cpi	r18, 0x03	; 3
     ea6:	31 05       	cpc	r19, r1
     ea8:	5c f4       	brge	.+22     	; 0xec0 <main+0x88>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	a1 f0       	breq	.+40     	; 0xeda <main+0xa2>
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	21 30       	cpi	r18, 0x01	; 1
     eb8:	31 05       	cpc	r19, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <main+0x86>
     ebc:	3e c0       	rjmp	.+124    	; 0xf3a <main+0x102>
     ebe:	e5 cf       	rjmp	.-54     	; 0xe8a <main+0x52>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <main+0x94>
     eca:	78 c0       	rjmp	.+240    	; 0xfbc <main+0x184>
     ecc:	2b 81       	ldd	r18, Y+3	; 0x03
     ece:	3c 81       	ldd	r19, Y+4	; 0x04
     ed0:	24 30       	cpi	r18, 0x04	; 4
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <main+0xa0>
     ed6:	61 c0       	rjmp	.+194    	; 0xf9a <main+0x162>
     ed8:	d8 cf       	rjmp	.-80     	; 0xe8a <main+0x52>
		/*---- Password Creation State ----*/
		case STATE_CREATE_PASSWORD:
			LCD_clearScreen();
     eda:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
			LCD_displayString("Enter Password:");
     ede:	8d ea       	ldi	r24, 0xAD	; 173
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
			getPassword(password);
     ee6:	81 e8       	ldi	r24, 0x81	; 129
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 1b 06 	call	0xc36	; 0xc36 <getPassword>

			LCD_clearScreen();
     eee:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
			LCD_displayString("Confirm Password:");
     ef2:	8d eb       	ldi	r24, 0xBD	; 189
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
			getPassword(confirmPassword);
     efa:	86 e8       	ldi	r24, 0x86	; 134
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 1b 06 	call	0xc36	; 0xc36 <getPassword>

			/*---- Send passwords to Control ECU ----*/
			UART_sendByte(CMD_CREATE_PASSWORD);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <UART_sendByte>
			sendPassword(password);
     f08:	81 e8       	ldi	r24, 0x81	; 129
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 f6 05 	call	0xbec	; 0xbec <sendPassword>
			sendPassword(confirmPassword);
     f10:	86 e8       	ldi	r24, 0x86	; 134
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 f6 05 	call	0xbec	; 0xbec <sendPassword>

			if (UART_recieveByte() == RESPONSE_OK) {
     f18:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
     f1c:	8a 3a       	cpi	r24, 0xAA	; 170
     f1e:	19 f4       	brne	.+6      	; 0xf26 <main+0xee>
				currentState = STATE_MAIN_OPTIONS;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	b2 cf       	rjmp	.-156    	; 0xe8a <main+0x52>
			} else {
				LCD_clearScreen();
     f26:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
				LCD_displayString("Mismatch! Retry");
     f2a:	8f ec       	ldi	r24, 0xCF	; 207
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
				HMI_delaySeconds(2);
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
     f38:	a8 cf       	rjmp	.-176    	; 0xe8a <main+0x52>
			}
			break;

			/*---- Main Menu State ----*/
		case STATE_MAIN_OPTIONS:
			LCD_clearScreen();
     f3a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
     f3e:	8f ed       	ldi	r24, 0xDF	; 223
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
     f46:	2d ee       	ldi	r18, 0xED	; 237
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_displayStringRowColumn>
			uint8 key = KEYPAD_getPressedKey();
     f54:	0e 94 97 0b 	call	0x172e	; 0x172e <KEYPAD_getPressedKey>
     f58:	89 83       	std	Y+1, r24	; 0x01
			if (key == '+') {
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	8b 32       	cpi	r24, 0x2B	; 43
     f5e:	19 f4       	brne	.+6      	; 0xf66 <main+0x12e>
				currentState = STATE_OPEN_DOOR;
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	8a 83       	std	Y+2, r24	; 0x02
     f64:	92 cf       	rjmp	.-220    	; 0xe8a <main+0x52>
			} else if (key == '-') {
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	8d 32       	cpi	r24, 0x2D	; 45
     f6a:	09 f0       	breq	.+2      	; 0xf6e <main+0x136>
     f6c:	8e cf       	rjmp	.-228    	; 0xe8a <main+0x52>
				currentState = STATE_CHANGE_PASSWORD;
     f6e:	83 e0       	ldi	r24, 0x03	; 3
     f70:	8a 83       	std	Y+2, r24	; 0x02
     f72:	8b cf       	rjmp	.-234    	; 0xe8a <main+0x52>
			}
			break;

			/*---- Door Unlock State ----*/
		case STATE_OPEN_DOOR:
			unlockDoor();
     f74:	0e 94 c6 06 	call	0xd8c	; 0xd8c <unlockDoor>
			if(error){
     f78:	80 91 8c 01 	lds	r24, 0x018C
     f7c:	88 23       	and	r24, r24
     f7e:	51 f0       	breq	.+20     	; 0xf94 <main+0x15c>
				if(failedAttempts == MAX_ATTEMPTS){
     f80:	80 91 73 01 	lds	r24, 0x0173
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	19 f4       	brne	.+6      	; 0xf8e <main+0x156>
					currentState = STATE_LOCKED;
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	8a 83       	std	Y+2, r24	; 0x02
     f8c:	7e cf       	rjmp	.-260    	; 0xe8a <main+0x52>
				} else {
					unlockDoor(); /*---- Retry on failed attempt ----*/
     f8e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <unlockDoor>
     f92:	7b cf       	rjmp	.-266    	; 0xe8a <main+0x52>
				}
			} else {
				currentState = STATE_MAIN_OPTIONS;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	78 cf       	rjmp	.-272    	; 0xe8a <main+0x52>
			}
			break;

			/*---- System Lockout State ----*/
		case STATE_LOCKED:
			UART_sendByte(CMD_LOCK_SYSTEM);
     f9a:	86 e0       	ldi	r24, 0x06	; 6
     f9c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <UART_sendByte>
			LCD_clearScreen();
     fa0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
			LCD_displayString("Locked(60s)");
     fa4:	8d ef       	ldi	r24, 0xFD	; 253
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
			HMI_delaySeconds(LOCKOUT_TIME);
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
			failedAttempts = 0;
     fb2:	10 92 73 01 	sts	0x0173, r1
			currentState = STATE_MAIN_OPTIONS;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	67 cf       	rjmp	.-306    	; 0xe8a <main+0x52>
			break;

			/*---- Password Change State ----*/
		case STATE_CHANGE_PASSWORD:
			UART_sendByte(CMD_CHANGE_PASSWORD);
     fbc:	84 e0       	ldi	r24, 0x04	; 4
     fbe:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <UART_sendByte>
			LCD_clearScreen();
     fc2:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
			LCD_displayString("Enter old pass");
     fc6:	89 e0       	ldi	r24, 0x09	; 9
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
			getPassword(password);
     fce:	81 e8       	ldi	r24, 0x81	; 129
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 1b 06 	call	0xc36	; 0xc36 <getPassword>
			sendPassword(password);
     fd6:	81 e8       	ldi	r24, 0x81	; 129
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 f6 05 	call	0xbec	; 0xbec <sendPassword>
			response = UART_recieveByte();
     fde:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
     fe2:	80 93 8b 01 	sts	0x018B, r24

			if(response == RESPONSE_OK){
     fe6:	80 91 8b 01 	lds	r24, 0x018B
     fea:	8a 3a       	cpi	r24, 0xAA	; 170
     fec:	09 f0       	breq	.+2      	; 0xff0 <main+0x1b8>
     fee:	3f c0       	rjmp	.+126    	; 0x106e <main+0x236>
				/*---- New password entry ----*/
				LCD_clearScreen();
     ff0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
				LCD_displayString("Enter new pass");
     ff4:	88 e1       	ldi	r24, 0x18	; 24
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
				getPassword(password);
     ffc:	81 e8       	ldi	r24, 0x81	; 129
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 1b 06 	call	0xc36	; 0xc36 <getPassword>

				LCD_clearScreen();
    1004:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
				LCD_displayString("Confirm new pass");
    1008:	87 e2       	ldi	r24, 0x27	; 39
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
				getPassword(confirmPassword);
    1010:	86 e8       	ldi	r24, 0x86	; 134
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 1b 06 	call	0xc36	; 0xc36 <getPassword>

				sendPassword(password);
    1018:	81 e8       	ldi	r24, 0x81	; 129
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	0e 94 f6 05 	call	0xbec	; 0xbec <sendPassword>
				sendPassword(confirmPassword);
    1020:	86 e8       	ldi	r24, 0x86	; 134
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 f6 05 	call	0xbec	; 0xbec <sendPassword>
				response = UART_recieveByte();
    1028:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
    102c:	80 93 8b 01 	sts	0x018B, r24

				if(response == RESPONSE_OK){
    1030:	80 91 8b 01 	lds	r24, 0x018B
    1034:	8a 3a       	cpi	r24, 0xAA	; 170
    1036:	61 f4       	brne	.+24     	; 0x1050 <main+0x218>
					LCD_clearScreen();
    1038:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
					LCD_displayString("New pass saved");
    103c:	88 e3       	ldi	r24, 0x38	; 56
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
					HMI_delaySeconds(2);
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
					currentState = STATE_MAIN_OPTIONS;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	1d cf       	rjmp	.-454    	; 0xe8a <main+0x52>
				} else if(response == RESPONSE_ERROR){
    1050:	80 91 8b 01 	lds	r24, 0x018B
    1054:	8f 3f       	cpi	r24, 0xFF	; 255
    1056:	09 f0       	breq	.+2      	; 0x105a <main+0x222>
    1058:	18 cf       	rjmp	.-464    	; 0xe8a <main+0x52>
					LCD_clearScreen();
    105a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
					LCD_displayString("No match");
    105e:	87 e4       	ldi	r24, 0x47	; 71
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
					HMI_delaySeconds(1);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
    106c:	0e cf       	rjmp	.-484    	; 0xe8a <main+0x52>
				}
			} else if(response == RESPONSE_ERROR){
    106e:	80 91 8b 01 	lds	r24, 0x018B
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	09 f0       	breq	.+2      	; 0x1078 <main+0x240>
    1076:	09 cf       	rjmp	.-494    	; 0xe8a <main+0x52>
				failedAttempts++;
    1078:	80 91 73 01 	lds	r24, 0x0173
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 73 01 	sts	0x0173, r24
				LCD_clearScreen();
    1082:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
				LCD_displayString("Wrong pass");
    1086:	80 e5       	ldi	r24, 0x50	; 80
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
				HMI_delaySeconds(1);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_delaySeconds>
				if(failedAttempts == MAX_ATTEMPTS){
    1094:	80 91 73 01 	lds	r24, 0x0173
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	09 f0       	breq	.+2      	; 0x109e <main+0x266>
    109c:	f6 ce       	rjmp	.-532    	; 0xe8a <main+0x52>
					currentState = STATE_LOCKED;
    109e:	84 e0       	ldi	r24, 0x04	; 4
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	f3 ce       	rjmp	.-538    	; 0xe8a <main+0x52>

000010a4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <GPIO_setupPinDirection+0x6>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <GPIO_setupPinDirection+0x8>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	6a 83       	std	Y+2, r22	; 0x02
    10b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <GPIO_setupPinDirection+0x1c>
    10be:	d5 c0       	rjmp	.+426    	; 0x126a <GPIO_setupPinDirection+0x1c6>
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <GPIO_setupPinDirection+0x24>
    10c6:	d1 c0       	rjmp	.+418    	; 0x126a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <GPIO_setupPinDirection+0x3a>
    10dc:	43 c0       	rjmp	.+134    	; 0x1164 <GPIO_setupPinDirection+0xc0>
    10de:	2c 81       	ldd	r18, Y+4	; 0x04
    10e0:	3d 81       	ldd	r19, Y+5	; 0x05
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <GPIO_setupPinDirection+0x4e>
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	71 f0       	breq	.+28     	; 0x110c <GPIO_setupPinDirection+0x68>
    10f0:	bc c0       	rjmp	.+376    	; 0x126a <GPIO_setupPinDirection+0x1c6>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <GPIO_setupPinDirection+0x5a>
    10fc:	5f c0       	rjmp	.+190    	; 0x11bc <GPIO_setupPinDirection+0x118>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <GPIO_setupPinDirection+0x66>
    1108:	85 c0       	rjmp	.+266    	; 0x1214 <GPIO_setupPinDirection+0x170>
    110a:	af c0       	rjmp	.+350    	; 0x126a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	a1 f4       	brne	.+40     	; 0x113a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1112:	aa e3       	ldi	r26, 0x3A	; 58
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ea e3       	ldi	r30, 0x3A	; 58
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0x8c>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0x88>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	98 c0       	rjmp	.+304    	; 0x126a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    113a:	aa e3       	ldi	r26, 0x3A	; 58
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ea e3       	ldi	r30, 0x3A	; 58
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0xb4>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0xb0>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	83 c0       	rjmp	.+262    	; 0x126a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	a1 f4       	brne	.+40     	; 0x1192 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    116a:	a7 e3       	ldi	r26, 0x37	; 55
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e7 e3       	ldi	r30, 0x37	; 55
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0xe4>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0xe0>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	6c c0       	rjmp	.+216    	; 0x126a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1192:	a7 e3       	ldi	r26, 0x37	; 55
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x10c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x108>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	57 c0       	rjmp	.+174    	; 0x126a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	a1 f4       	brne	.+40     	; 0x11ea <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11c2:	a4 e3       	ldi	r26, 0x34	; 52
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e4 e3       	ldi	r30, 0x34	; 52
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIO_setupPinDirection+0x13c>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIO_setupPinDirection+0x138>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	40 c0       	rjmp	.+128    	; 0x126a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11ea:	a4 e3       	ldi	r26, 0x34	; 52
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e4 e3       	ldi	r30, 0x34	; 52
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_setupPinDirection+0x164>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_setupPinDirection+0x160>
    120c:	80 95       	com	r24
    120e:	84 23       	and	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	2b c0       	rjmp	.+86     	; 0x126a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	a1 f4       	brne	.+40     	; 0x1242 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    121a:	a1 e3       	ldi	r26, 0x31	; 49
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e1 e3       	ldi	r30, 0x31	; 49
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_setupPinDirection+0x194>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_setupPinDirection+0x190>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	14 c0       	rjmp	.+40     	; 0x126a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1242:	a1 e3       	ldi	r26, 0x31	; 49
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e1 e3       	ldi	r30, 0x31	; 49
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <GPIO_setupPinDirection+0x1bc>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <GPIO_setupPinDirection+0x1b8>
    1264:	80 95       	com	r24
    1266:	84 23       	and	r24, r20
    1268:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_writePin+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_writePin+0x8>
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	6a 83       	std	Y+2, r22	; 0x02
    128c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	08 f0       	brcs	.+2      	; 0x1296 <GPIO_writePin+0x1c>
    1294:	d5 c0       	rjmp	.+426    	; 0x1440 <GPIO_writePin+0x1c6>
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	08 f0       	brcs	.+2      	; 0x129e <GPIO_writePin+0x24>
    129c:	d1 c0       	rjmp	.+418    	; 0x1440 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <GPIO_writePin+0x3a>
    12b2:	43 c0       	rjmp	.+134    	; 0x133a <GPIO_writePin+0xc0>
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <GPIO_writePin+0x4e>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <GPIO_writePin+0x68>
    12c6:	bc c0       	rjmp	.+376    	; 0x1440 <GPIO_writePin+0x1c6>
    12c8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ca:	3d 81       	ldd	r19, Y+5	; 0x05
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <GPIO_writePin+0x5a>
    12d2:	5f c0       	rjmp	.+190    	; 0x1392 <GPIO_writePin+0x118>
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <GPIO_writePin+0x66>
    12de:	85 c0       	rjmp	.+266    	; 0x13ea <GPIO_writePin+0x170>
    12e0:	af c0       	rjmp	.+350    	; 0x1440 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 23       	and	r24, r24
    12e6:	a1 f0       	breq	.+40     	; 0x1310 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0x8c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0x88>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	98 c0       	rjmp	.+304    	; 0x1440 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1310:	aa e3       	ldi	r26, 0x3A	; 58
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ea e3       	ldi	r30, 0x3A	; 58
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0xb4>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0xb0>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	83 c0       	rjmp	.+262    	; 0x1440 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 23       	and	r24, r24
    133e:	a1 f0       	breq	.+40     	; 0x1368 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1340:	a8 e3       	ldi	r26, 0x38	; 56
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e8 e3       	ldi	r30, 0x38	; 56
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0xe4>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0xe0>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	6c c0       	rjmp	.+216    	; 0x1440 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1368:	a8 e3       	ldi	r26, 0x38	; 56
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e8 e3       	ldi	r30, 0x38	; 56
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x10c>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x108>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	57 c0       	rjmp	.+174    	; 0x1440 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 23       	and	r24, r24
    1396:	a1 f0       	breq	.+40     	; 0x13c0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1398:	a5 e3       	ldi	r26, 0x35	; 53
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e3       	ldi	r30, 0x35	; 53
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <GPIO_writePin+0x13c>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <GPIO_writePin+0x138>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	40 c0       	rjmp	.+128    	; 0x1440 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    13c0:	a5 e3       	ldi	r26, 0x35	; 53
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_writePin+0x164>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_writePin+0x160>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	2b c0       	rjmp	.+86     	; 0x1440 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value)
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	88 23       	and	r24, r24
    13ee:	a1 f0       	breq	.+40     	; 0x1418 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13f0:	a2 e3       	ldi	r26, 0x32	; 50
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e2 e3       	ldi	r30, 0x32	; 50
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <GPIO_writePin+0x194>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <GPIO_writePin+0x190>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1418:	a2 e3       	ldi	r26, 0x32	; 50
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e3       	ldi	r30, 0x32	; 50
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <GPIO_writePin+0x1bc>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <GPIO_writePin+0x1b8>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <GPIO_readPin+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <GPIO_readPin+0x8>
    1458:	00 d0       	rcall	.+0      	; 0x145a <GPIO_readPin+0xa>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	8a 83       	std	Y+2, r24	; 0x02
    1460:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 30       	cpi	r24, 0x08	; 8
    1466:	18 f4       	brcc	.+6      	; 0x146e <GPIO_readPin+0x1e>
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	10 f0       	brcs	.+4      	; 0x1472 <GPIO_readPin+0x22>
	{
		return 0;
    146e:	1e 82       	std	Y+6, r1	; 0x06
    1470:	82 c0       	rjmp	.+260    	; 0x1576 <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3d 83       	std	Y+5, r19	; 0x05
    147a:	2c 83       	std	Y+4, r18	; 0x04
    147c:	4c 81       	ldd	r20, Y+4	; 0x04
    147e:	5d 81       	ldd	r21, Y+5	; 0x05
    1480:	41 30       	cpi	r20, 0x01	; 1
    1482:	51 05       	cpc	r21, r1
    1484:	79 f1       	breq	.+94     	; 0x14e4 <GPIO_readPin+0x94>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	91 05       	cpc	r25, r1
    148e:	34 f4       	brge	.+12     	; 0x149c <GPIO_readPin+0x4c>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	21 15       	cp	r18, r1
    1496:	31 05       	cpc	r19, r1
    1498:	69 f0       	breq	.+26     	; 0x14b4 <GPIO_readPin+0x64>
    149a:	6b c0       	rjmp	.+214    	; 0x1572 <GPIO_readPin+0x122>
    149c:	4c 81       	ldd	r20, Y+4	; 0x04
    149e:	5d 81       	ldd	r21, Y+5	; 0x05
    14a0:	42 30       	cpi	r20, 0x02	; 2
    14a2:	51 05       	cpc	r21, r1
    14a4:	b9 f1       	breq	.+110    	; 0x1514 <GPIO_readPin+0xc4>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <GPIO_readPin+0x62>
    14b0:	49 c0       	rjmp	.+146    	; 0x1544 <GPIO_readPin+0xf4>
    14b2:	5f c0       	rjmp	.+190    	; 0x1572 <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    14b4:	e9 e3       	ldi	r30, 0x39	; 57
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a9 01       	movw	r20, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_readPin+0x7c>
    14c8:	55 95       	asr	r21
    14ca:	47 95       	ror	r20
    14cc:	8a 95       	dec	r24
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_readPin+0x78>
    14d0:	ca 01       	movw	r24, r20
    14d2:	81 70       	andi	r24, 0x01	; 1
    14d4:	90 70       	andi	r25, 0x00	; 0
    14d6:	88 23       	and	r24, r24
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <GPIO_readPin+0x90>
			{
				value = LOGIC_HIGH;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	49 c0       	rjmp	.+146    	; 0x1572 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	47 c0       	rjmp	.+142    	; 0x1572 <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    14e4:	e6 e3       	ldi	r30, 0x36	; 54
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_readPin+0xac>
    14f8:	55 95       	asr	r21
    14fa:	47 95       	ror	r20
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_readPin+0xa8>
    1500:	ca 01       	movw	r24, r20
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	90 70       	andi	r25, 0x00	; 0
    1506:	88 23       	and	r24, r24
    1508:	19 f0       	breq	.+6      	; 0x1510 <GPIO_readPin+0xc0>
			{
				value = LOGIC_HIGH;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	31 c0       	rjmp	.+98     	; 0x1572 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	2f c0       	rjmp	.+94     	; 0x1572 <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1514:	e3 e3       	ldi	r30, 0x33	; 51
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <GPIO_readPin+0xdc>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <GPIO_readPin+0xd8>
    1530:	ca 01       	movw	r24, r20
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	88 23       	and	r24, r24
    1538:	19 f0       	breq	.+6      	; 0x1540 <GPIO_readPin+0xf0>
			{
				value = LOGIC_HIGH;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	19 c0       	rjmp	.+50     	; 0x1572 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1540:	19 82       	std	Y+1, r1	; 0x01
    1542:	17 c0       	rjmp	.+46     	; 0x1572 <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1544:	e0 e3       	ldi	r30, 0x30	; 48
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_readPin+0x10c>
    1558:	55 95       	asr	r21
    155a:	47 95       	ror	r20
    155c:	8a 95       	dec	r24
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_readPin+0x108>
    1560:	ca 01       	movw	r24, r20
    1562:	81 70       	andi	r24, 0x01	; 1
    1564:	90 70       	andi	r25, 0x00	; 0
    1566:	88 23       	and	r24, r24
    1568:	19 f0       	breq	.+6      	; 0x1570 <GPIO_readPin+0x120>
			{
				value = LOGIC_HIGH;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1570:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1572:	59 81       	ldd	r21, Y+1	; 0x01
    1574:	5e 83       	std	Y+6, r21	; 0x06
    1576:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1578:	26 96       	adiw	r28, 0x06	; 6
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <GPIO_setupPortDirection+0x6>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <GPIO_setupPortDirection+0x8>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	90 f5       	brcc	.+100    	; 0x1604 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3c 83       	std	Y+4, r19	; 0x04
    15a8:	2b 83       	std	Y+3, r18	; 0x03
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	d1 f0       	breq	.+52     	; 0x15e8 <GPIO_setupPortDirection+0x5e>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	2c f4       	brge	.+10     	; 0x15c8 <GPIO_setupPortDirection+0x3e>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	61 f0       	breq	.+24     	; 0x15de <GPIO_setupPortDirection+0x54>
    15c6:	1e c0       	rjmp	.+60     	; 0x1604 <GPIO_setupPortDirection+0x7a>
    15c8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ca:	3c 81       	ldd	r19, Y+4	; 0x04
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <GPIO_setupPortDirection+0x68>
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	91 05       	cpc	r25, r1
    15da:	81 f0       	breq	.+32     	; 0x15fc <GPIO_setupPortDirection+0x72>
    15dc:	13 c0       	rjmp	.+38     	; 0x1604 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15de:	ea e3       	ldi	r30, 0x3A	; 58
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	80 83       	st	Z, r24
    15e6:	0e c0       	rjmp	.+28     	; 0x1604 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15e8:	e7 e3       	ldi	r30, 0x37	; 55
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	80 83       	st	Z, r24
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15f2:	e4 e3       	ldi	r30, 0x34	; 52
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	80 83       	st	Z, r24
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15fc:	e1 e3       	ldi	r30, 0x31	; 49
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	80 83       	st	Z, r24
			break;
		}
	}
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <GPIO_writePort+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <GPIO_writePort+0x8>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	84 30       	cpi	r24, 0x04	; 4
    1626:	90 f5       	brcc	.+100    	; 0x168c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3c 83       	std	Y+4, r19	; 0x04
    1630:	2b 83       	std	Y+3, r18	; 0x03
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	d1 f0       	breq	.+52     	; 0x1670 <GPIO_writePort+0x5e>
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	2c f4       	brge	.+10     	; 0x1650 <GPIO_writePort+0x3e>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	61 f0       	breq	.+24     	; 0x1666 <GPIO_writePort+0x54>
    164e:	1e c0       	rjmp	.+60     	; 0x168c <GPIO_writePort+0x7a>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <GPIO_writePort+0x68>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	81 f0       	breq	.+32     	; 0x1684 <GPIO_writePort+0x72>
    1664:	13 c0       	rjmp	.+38     	; 0x168c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1666:	eb e3       	ldi	r30, 0x3B	; 59
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
    166e:	0e c0       	rjmp	.+28     	; 0x168c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 83       	st	Z, r24
    1678:	09 c0       	rjmp	.+18     	; 0x168c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    167a:	e5 e3       	ldi	r30, 0x35	; 53
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
			break;
		}
	}
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_readPort+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_readPort+0x8>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= NUM_OF_PORTS)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	10 f0       	brcs	.+4      	; 0x16b4 <GPIO_readPort+0x1a>
	{
		return 0;
    16b0:	1d 82       	std	Y+5, r1	; 0x05
    16b2:	34 c0       	rjmp	.+104    	; 0x171c <GPIO_readPort+0x82>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3c 83       	std	Y+4, r19	; 0x04
    16bc:	2b 83       	std	Y+3, r18	; 0x03
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	d1 f0       	breq	.+52     	; 0x16fc <GPIO_readPort+0x62>
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	2c f4       	brge	.+10     	; 0x16dc <GPIO_readPort+0x42>
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <GPIO_readPort+0x58>
    16da:	1e c0       	rjmp	.+60     	; 0x1718 <GPIO_readPort+0x7e>
    16dc:	2b 81       	ldd	r18, Y+3	; 0x03
    16de:	3c 81       	ldd	r19, Y+4	; 0x04
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	81 f0       	breq	.+32     	; 0x1706 <GPIO_readPort+0x6c>
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	91 05       	cpc	r25, r1
    16ee:	81 f0       	breq	.+32     	; 0x1710 <GPIO_readPort+0x76>
    16f0:	13 c0       	rjmp	.+38     	; 0x1718 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			value = PINA;
    16f2:	e9 e3       	ldi	r30, 0x39	; 57
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	0e c0       	rjmp	.+28     	; 0x1718 <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			value = PINB;
    16fc:	e6 e3       	ldi	r30, 0x36	; 54
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			value = PINC;
    1706:	e3 e3       	ldi	r30, 0x33	; 51
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			value = PIND;
    1710:	e0 e3       	ldi	r30, 0x30	; 48
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1718:	99 81       	ldd	r25, Y+1	; 0x01
    171a:	9d 83       	std	Y+5, r25	; 0x05
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	60 97       	sbiw	r28, 0x10	; 16
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	63 e0       	ldi	r22, 0x03	; 3
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	64 e0       	ldi	r22, 0x04	; 4
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	65 e0       	ldi	r22, 0x05	; 5
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	66 e0       	ldi	r22, 0x06	; 6
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	67 e0       	ldi	r22, 0x07	; 7
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1792:	1f 86       	std	Y+15, r1	; 0x0f
    1794:	ab c0       	rjmp	.+342    	; 0x18ec <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	6f 85       	ldd	r22, Y+15	; 0x0f
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17aa:	18 8a       	std	Y+16, r1	; 0x10
    17ac:	22 c0       	rjmp	.+68     	; 0x17f2 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    17ae:	88 89       	ldd	r24, Y+16	; 0x10
    17b0:	98 2f       	mov	r25, r24
    17b2:	9c 5f       	subi	r25, 0xFC	; 252
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	69 2f       	mov	r22, r25
    17b8:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_readPin>
    17bc:	88 23       	and	r24, r24
    17be:	b1 f4       	brne	.+44     	; 0x17ec <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    17c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	98 2f       	mov	r25, r24
    17d0:	88 89       	ldd	r24, Y+16	; 0x10
    17d2:	89 0f       	add	r24, r25
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    17da:	60 96       	adiw	r28, 0x10	; 16
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17ec:	88 89       	ldd	r24, Y+16	; 0x10
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	88 8b       	std	Y+16, r24	; 0x10
    17f2:	88 89       	ldd	r24, Y+16	; 0x10
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	d8 f2       	brcs	.-74     	; 0x17ae <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e2       	ldi	r26, 0x20	; 32
    1808:	b1 e4       	ldi	r27, 0x41	; 65
    180a:	8b 87       	std	Y+11, r24	; 0x0b
    180c:	9c 87       	std	Y+12, r25	; 0x0c
    180e:	ad 87       	std	Y+13, r26	; 0x0d
    1810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6b 85       	ldd	r22, Y+11	; 0x0b
    1814:	7c 85       	ldd	r23, Y+12	; 0x0c
    1816:	8d 85       	ldd	r24, Y+13	; 0x0d
    1818:	9e 85       	ldd	r25, Y+14	; 0x0e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	98 87       	std	Y+8, r25	; 0x08
    182e:	a9 87       	std	Y+9, r26	; 0x09
    1830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6b 85       	ldd	r22, Y+11	; 0x0b
    186e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <KEYPAD_getPressedKey+0x186>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <KEYPAD_getPressedKey+0x174>
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <KEYPAD_getPressedKey+0x168>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <KEYPAD_getPressedKey+0x1b0>
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	8f 87       	std	Y+15, r24	; 0x0f
    18ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <KEYPAD_getPressedKey+0x1c6>
    18f2:	51 cf       	rjmp	.-350    	; 0x1796 <KEYPAD_getPressedKey+0x68>
    18f4:	4e cf       	rjmp	.-356    	; 0x1792 <KEYPAD_getPressedKey+0x64>

000018f6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <KEYPAD_4x4_adjustKeyNumber+0x6>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <KEYPAD_4x4_adjustKeyNumber+0x8>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1904:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3c 83       	std	Y+4, r19	; 0x04
    190e:	2b 83       	std	Y+3, r18	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	88 30       	cpi	r24, 0x08	; 8
    1916:	91 05       	cpc	r25, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <KEYPAD_4x4_adjustKeyNumber+0x26>
    191a:	70 c0       	rjmp	.+224    	; 0x19fc <KEYPAD_4x4_adjustKeyNumber+0x106>
    191c:	2b 81       	ldd	r18, Y+3	; 0x03
    191e:	3c 81       	ldd	r19, Y+4	; 0x04
    1920:	29 30       	cpi	r18, 0x09	; 9
    1922:	31 05       	cpc	r19, r1
    1924:	5c f5       	brge	.+86     	; 0x197c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	91 05       	cpc	r25, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1930:	59 c0       	rjmp	.+178    	; 0x19e4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1932:	2b 81       	ldd	r18, Y+3	; 0x03
    1934:	3c 81       	ldd	r19, Y+4	; 0x04
    1936:	25 30       	cpi	r18, 0x05	; 5
    1938:	31 05       	cpc	r19, r1
    193a:	9c f4       	brge	.+38     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	82 30       	cpi	r24, 0x02	; 2
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1946:	48 c0       	rjmp	.+144    	; 0x19d8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1948:	2b 81       	ldd	r18, Y+3	; 0x03
    194a:	3c 81       	ldd	r19, Y+4	; 0x04
    194c:	23 30       	cpi	r18, 0x03	; 3
    194e:	31 05       	cpc	r19, r1
    1950:	0c f0       	brlt	.+2      	; 0x1954 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1952:	45 c0       	rjmp	.+138    	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	91 05       	cpc	r25, r1
    195c:	09 f4       	brne	.+2      	; 0x1960 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    195e:	39 c0       	rjmp	.+114    	; 0x19d2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1960:	67 c0       	rjmp	.+206    	; 0x1a30 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	26 30       	cpi	r18, 0x06	; 6
    1968:	31 05       	cpc	r19, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <KEYPAD_4x4_adjustKeyNumber+0x78>
    196c:	41 c0       	rjmp	.+130    	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	87 30       	cpi	r24, 0x07	; 7
    1974:	91 05       	cpc	r25, r1
    1976:	0c f0       	brlt	.+2      	; 0x197a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1978:	3e c0       	rjmp	.+124    	; 0x19f6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    197a:	37 c0       	rjmp	.+110    	; 0x19ea <KEYPAD_4x4_adjustKeyNumber+0xf4>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	2c 30       	cpi	r18, 0x0C	; 12
    1982:	31 05       	cpc	r19, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1986:	46 c0       	rjmp	.+140    	; 0x1a14 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	8d 30       	cpi	r24, 0x0D	; 13
    198e:	91 05       	cpc	r25, r1
    1990:	5c f4       	brge	.+22     	; 0x19a8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1992:	2b 81       	ldd	r18, Y+3	; 0x03
    1994:	3c 81       	ldd	r19, Y+4	; 0x04
    1996:	2a 30       	cpi	r18, 0x0A	; 10
    1998:	31 05       	cpc	r19, r1
    199a:	b1 f1       	breq	.+108    	; 0x1a08 <KEYPAD_4x4_adjustKeyNumber+0x112>
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	8b 30       	cpi	r24, 0x0B	; 11
    19a2:	91 05       	cpc	r25, r1
    19a4:	a4 f5       	brge	.+104    	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x118>
    19a6:	2d c0       	rjmp	.+90     	; 0x1a02 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	2e 30       	cpi	r18, 0x0E	; 14
    19ae:	31 05       	cpc	r19, r1
    19b0:	b9 f1       	breq	.+110    	; 0x1a20 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	8e 30       	cpi	r24, 0x0E	; 14
    19b8:	91 05       	cpc	r25, r1
    19ba:	7c f1       	brlt	.+94     	; 0x1a1a <KEYPAD_4x4_adjustKeyNumber+0x124>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	2f 30       	cpi	r18, 0x0F	; 15
    19c2:	31 05       	cpc	r19, r1
    19c4:	79 f1       	breq	.+94     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	80 31       	cpi	r24, 0x10	; 16
    19cc:	91 05       	cpc	r25, r1
    19ce:	69 f1       	breq	.+90     	; 0x1a2a <KEYPAD_4x4_adjustKeyNumber+0x134>
    19d0:	2f c0       	rjmp	.+94     	; 0x1a30 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    19d2:	87 e0       	ldi	r24, 0x07	; 7
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	2e c0       	rjmp	.+92     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    19d8:	88 e0       	ldi	r24, 0x08	; 8
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	2b c0       	rjmp	.+86     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19de:	89 e0       	ldi	r24, 0x09	; 9
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	28 c0       	rjmp	.+80     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case DIVIDE: keypad_button = '%'; // ASCII Code of %
    19e4:	85 e2       	ldi	r24, 0x25	; 37
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	25 c0       	rjmp	.+74     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19ea:	84 e0       	ldi	r24, 0x04	; 4
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	22 c0       	rjmp	.+68     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19f0:	85 e0       	ldi	r24, 0x05	; 5
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	1f c0       	rjmp	.+62     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	1c c0       	rjmp	.+56     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case MULTIPLY: keypad_button = '*'; /* ASCII Code of '*' */
    19fc:	8a e2       	ldi	r24, 0x2A	; 42
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	19 c0       	rjmp	.+50     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	13 c0       	rjmp	.+38     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	10 c0       	rjmp	.+32     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case MINUS: keypad_button = '-'; /* ASCII Code of '-' */
    1a14:	8d e2       	ldi	r24, 0x2D	; 45
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case ENTER: keypad_button = ENTER;  /* ASCII of Enter */
    1a1a:	8d e0       	ldi	r24, 0x0D	; 13
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	0a c0       	rjmp	.+20     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	08 c0       	rjmp	.+16     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case EQUAL: keypad_button = '='; /* ASCII Code of '=' */
    1a24:	8d e3       	ldi	r24, 0x3D	; 61
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	05 c0       	rjmp	.+10     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case ADD: keypad_button = '+'; /* ASCII Code of '+' */
    1a2a:	8b e2       	ldi	r24, 0x2B	; 43
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_setupPinDirection>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 ea       	ldi	r26, 0xA0	; 160
    1a72:	b1 e4       	ldi	r27, 0x41	; 65
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a ef       	ldi	r20, 0xFA	; 250
    1a8a:	54 e4       	ldi	r21, 0x44	; 68
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <LCD_init+0x7a>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_init+0xda>
    1b00:	88 ec       	ldi	r24, 0xC8	; 200
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_init+0xc8>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <LCD_init+0xbc>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_init+0x104>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	6f ef       	ldi	r22, 0xFF	; 255
    1b54:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1b58:	88 e3       	ldi	r24, 0x38	; 56
    1b5a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b5e:	8c e0       	ldi	r24, 0x0C	; 12
    1b60:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommand>
}
    1b6a:	2e 96       	adiw	r28, 0x0e	; 14
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	e9 97       	sbiw	r28, 0x39	; 57
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e8       	ldi	r26, 0x80	; 128
    1ba2:	bf e3       	ldi	r27, 0x3F	; 63
    1ba4:	8d ab       	std	Y+53, r24	; 0x35
    1ba6:	9e ab       	std	Y+54, r25	; 0x36
    1ba8:	af ab       	std	Y+55, r26	; 0x37
    1baa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6d a9       	ldd	r22, Y+53	; 0x35
    1bae:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a ef       	ldi	r20, 0xFA	; 250
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	89 ab       	std	Y+49, r24	; 0x31
    1bc6:	9a ab       	std	Y+50, r25	; 0x32
    1bc8:	ab ab       	std	Y+51, r26	; 0x33
    1bca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bce:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <LCD_sendCommand+0x72>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	98 ab       	std	Y+48, r25	; 0x30
    1bea:	8f a7       	std	Y+47, r24	; 0x2f
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1bee:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6d a9       	ldd	r22, Y+53	; 0x35
    1c08:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	98 ab       	std	Y+48, r25	; 0x30
    1c2c:	8f a7       	std	Y+47, r24	; 0x2f
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <LCD_sendCommand+0xd2>
    1c30:	88 ec       	ldi	r24, 0xC8	; 200
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9e a7       	std	Y+46, r25	; 0x2e
    1c36:	8d a7       	std	Y+45, r24	; 0x2d
    1c38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_sendCommand+0xc0>
    1c40:	9e a7       	std	Y+46, r25	; 0x2e
    1c42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c46:	98 a9       	ldd	r25, Y+48	; 0x30
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	98 ab       	std	Y+48, r25	; 0x30
    1c4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c50:	98 a9       	ldd	r25, Y+48	; 0x30
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <LCD_sendCommand+0xb4>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	98 ab       	std	Y+48, r25	; 0x30
    1c6a:	8f a7       	std	Y+47, r24	; 0x2f
    1c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c70:	9c a7       	std	Y+44, r25	; 0x2c
    1c72:	8b a7       	std	Y+43, r24	; 0x2b
    1c74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_sendCommand+0xfc>
    1c7c:	9c a7       	std	Y+44, r25	; 0x2c
    1c7e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e8       	ldi	r26, 0x80	; 128
    1c90:	bf e3       	ldi	r27, 0x3F	; 63
    1c92:	8f a3       	std	Y+39, r24	; 0x27
    1c94:	98 a7       	std	Y+40, r25	; 0x28
    1c96:	a9 a7       	std	Y+41, r26	; 0x29
    1c98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a ef       	ldi	r20, 0xFA	; 250
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8b a3       	std	Y+35, r24	; 0x23
    1cb4:	9c a3       	std	Y+36, r25	; 0x24
    1cb6:	ad a3       	std	Y+37, r26	; 0x25
    1cb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cba:	6b a1       	ldd	r22, Y+35	; 0x23
    1cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_sendCommand+0x160>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9a a3       	std	Y+34, r25	; 0x22
    1cd8:	89 a3       	std	Y+33, r24	; 0x21
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cde:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9a a3       	std	Y+34, r25	; 0x22
    1d1a:	89 a3       	std	Y+33, r24	; 0x21
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_sendCommand+0x1c0>
    1d1e:	88 ec       	ldi	r24, 0xC8	; 200
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	98 a3       	std	Y+32, r25	; 0x20
    1d24:	8f 8f       	std	Y+31, r24	; 0x1f
    1d26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d28:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_sendCommand+0x1ae>
    1d2e:	98 a3       	std	Y+32, r25	; 0x20
    1d30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9a a3       	std	Y+34, r25	; 0x22
    1d3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <LCD_sendCommand+0x1a2>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6b a1       	ldd	r22, Y+35	; 0x23
    1d48:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9a a3       	std	Y+34, r25	; 0x22
    1d58:	89 a3       	std	Y+33, r24	; 0x21
    1d5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d60:	8d 8f       	std	Y+29, r24	; 0x1d
    1d62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_sendCommand+0x1ea>
    1d6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	69 ad       	ldd	r22, Y+57	; 0x39
    1d72:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePort>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 e8       	ldi	r26, 0x80	; 128
    1d7c:	bf e3       	ldi	r27, 0x3F	; 63
    1d7e:	89 8f       	std	Y+25, r24	; 0x19
    1d80:	9a 8f       	std	Y+26, r25	; 0x1a
    1d82:	ab 8f       	std	Y+27, r26	; 0x1b
    1d84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	69 8d       	ldd	r22, Y+25	; 0x19
    1d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a ef       	ldi	r20, 0xFA	; 250
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8d 8b       	std	Y+21, r24	; 0x15
    1da0:	9e 8b       	std	Y+22, r25	; 0x16
    1da2:	af 8b       	std	Y+23, r26	; 0x17
    1da4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da6:	6d 89       	ldd	r22, Y+21	; 0x15
    1da8:	7e 89       	ldd	r23, Y+22	; 0x16
    1daa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dac:	98 8d       	ldd	r25, Y+24	; 0x18
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9c 8b       	std	Y+20, r25	; 0x14
    1dc4:	8b 8b       	std	Y+19, r24	; 0x13
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	4c f5       	brge	.+82     	; 0x1e32 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	69 8d       	ldd	r22, Y+25	; 0x19
    1de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e2       	ldi	r20, 0x20	; 32
    1dee:	51 e4       	ldi	r21, 0x41	; 65
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <LCD_sendCommand+0x2ac>
    1e0a:	88 ec       	ldi	r24, 0xC8	; 200
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9a 8b       	std	Y+18, r25	; 0x12
    1e10:	89 8b       	std	Y+17, r24	; 0x11
    1e12:	89 89       	ldd	r24, Y+17	; 0x11
    1e14:	9a 89       	ldd	r25, Y+18	; 0x12
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_sendCommand+0x29a>
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e20:	9c 89       	ldd	r25, Y+20	; 0x14
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	9c 8b       	std	Y+20, r25	; 0x14
    1e26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <LCD_sendCommand+0x28e>
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	6d 89       	ldd	r22, Y+21	; 0x15
    1e34:	7e 89       	ldd	r23, Y+22	; 0x16
    1e36:	8f 89       	ldd	r24, Y+23	; 0x17
    1e38:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	8b 89       	ldd	r24, Y+19	; 0x13
    1e48:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4a:	98 8b       	std	Y+16, r25	; 0x10
    1e4c:	8f 87       	std	Y+15, r24	; 0x0f
    1e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e50:	98 89       	ldd	r25, Y+16	; 0x10
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_sendCommand+0x2d6>
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e8       	ldi	r26, 0x80	; 128
    1e6a:	bf e3       	ldi	r27, 0x3F	; 63
    1e6c:	8b 87       	std	Y+11, r24	; 0x0b
    1e6e:	9c 87       	std	Y+12, r25	; 0x0c
    1e70:	ad 87       	std	Y+13, r26	; 0x0d
    1e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8f 83       	std	Y+7, r24	; 0x07
    1e8e:	98 87       	std	Y+8, r25	; 0x08
    1e90:	a9 87       	std	Y+9, r26	; 0x09
    1e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <LCD_sendCommand+0x39a>
    1ef8:	88 ec       	ldi	r24, 0xC8	; 200
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_sendCommand+0x388>
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <LCD_sendCommand+0x37c>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_sendCommand+0x3c4>
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f48:	e9 96       	adiw	r28, 0x39	; 57
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	e9 97       	sbiw	r28, 0x39	; 57
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e8       	ldi	r26, 0x80	; 128
    1f80:	bf e3       	ldi	r27, 0x3F	; 63
    1f82:	8d ab       	std	Y+53, r24	; 0x35
    1f84:	9e ab       	std	Y+54, r25	; 0x36
    1f86:	af ab       	std	Y+55, r26	; 0x37
    1f88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f90:	98 ad       	ldd	r25, Y+56	; 0x38
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a ef       	ldi	r20, 0xFA	; 250
    1f98:	54 e4       	ldi	r21, 0x44	; 68
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	89 ab       	std	Y+49, r24	; 0x31
    1fa4:	9a ab       	std	Y+50, r25	; 0x32
    1fa6:	ab ab       	std	Y+51, r26	; 0x33
    1fa8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1faa:	69 a9       	ldd	r22, Y+49	; 0x31
    1fac:	7a a9       	ldd	r23, Y+50	; 0x32
    1fae:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <LCD_displayCharacter+0x72>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	98 ab       	std	Y+48, r25	; 0x30
    1fc8:	8f a7       	std	Y+47, r24	; 0x2f
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1fcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fce:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	57 e4       	ldi	r21, 0x47	; 71
    1fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	4c f5       	brge	.+82     	; 0x2036 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fea:	98 ad       	ldd	r25, Y+56	; 0x38
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	98 ab       	std	Y+48, r25	; 0x30
    200a:	8f a7       	std	Y+47, r24	; 0x2f
    200c:	0f c0       	rjmp	.+30     	; 0x202c <LCD_displayCharacter+0xd2>
    200e:	88 ec       	ldi	r24, 0xC8	; 200
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9e a7       	std	Y+46, r25	; 0x2e
    2014:	8d a7       	std	Y+45, r24	; 0x2d
    2016:	8d a5       	ldd	r24, Y+45	; 0x2d
    2018:	9e a5       	ldd	r25, Y+46	; 0x2e
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_displayCharacter+0xc0>
    201e:	9e a7       	std	Y+46, r25	; 0x2e
    2020:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	8f a5       	ldd	r24, Y+47	; 0x2f
    2024:	98 a9       	ldd	r25, Y+48	; 0x30
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	98 ab       	std	Y+48, r25	; 0x30
    202a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	69 f7       	brne	.-38     	; 0x200e <LCD_displayCharacter+0xb4>
    2034:	14 c0       	rjmp	.+40     	; 0x205e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	69 a9       	ldd	r22, Y+49	; 0x31
    2038:	7a a9       	ldd	r23, Y+50	; 0x32
    203a:	8b a9       	ldd	r24, Y+51	; 0x33
    203c:	9c a9       	ldd	r25, Y+52	; 0x34
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	98 ab       	std	Y+48, r25	; 0x30
    2048:	8f a7       	std	Y+47, r24	; 0x2f
    204a:	8f a5       	ldd	r24, Y+47	; 0x2f
    204c:	98 a9       	ldd	r25, Y+48	; 0x30
    204e:	9c a7       	std	Y+44, r25	; 0x2c
    2050:	8b a7       	std	Y+43, r24	; 0x2b
    2052:	8b a5       	ldd	r24, Y+43	; 0x2b
    2054:	9c a5       	ldd	r25, Y+44	; 0x2c
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_displayCharacter+0xfc>
    205a:	9c a7       	std	Y+44, r25	; 0x2c
    205c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	61 e0       	ldi	r22, 0x01	; 1
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e8       	ldi	r26, 0x80	; 128
    206e:	bf e3       	ldi	r27, 0x3F	; 63
    2070:	8f a3       	std	Y+39, r24	; 0x27
    2072:	98 a7       	std	Y+40, r25	; 0x28
    2074:	a9 a7       	std	Y+41, r26	; 0x29
    2076:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6f a1       	ldd	r22, Y+39	; 0x27
    207a:	78 a5       	ldd	r23, Y+40	; 0x28
    207c:	89 a5       	ldd	r24, Y+41	; 0x29
    207e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a ef       	ldi	r20, 0xFA	; 250
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8b a3       	std	Y+35, r24	; 0x23
    2092:	9c a3       	std	Y+36, r25	; 0x24
    2094:	ad a3       	std	Y+37, r26	; 0x25
    2096:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2098:	6b a1       	ldd	r22, Y+35	; 0x23
    209a:	7c a1       	ldd	r23, Y+36	; 0x24
    209c:	8d a1       	ldd	r24, Y+37	; 0x25
    209e:	9e a1       	ldd	r25, Y+38	; 0x26
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <LCD_displayCharacter+0x160>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9a a3       	std	Y+34, r25	; 0x22
    20b6:	89 a3       	std	Y+33, r24	; 0x21
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    20ba:	6b a1       	ldd	r22, Y+35	; 0x23
    20bc:	7c a1       	ldd	r23, Y+36	; 0x24
    20be:	8d a1       	ldd	r24, Y+37	; 0x25
    20c0:	9e a1       	ldd	r25, Y+38	; 0x26
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6f a1       	ldd	r22, Y+39	; 0x27
    20d4:	78 a5       	ldd	r23, Y+40	; 0x28
    20d6:	89 a5       	ldd	r24, Y+41	; 0x29
    20d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9a a3       	std	Y+34, r25	; 0x22
    20f8:	89 a3       	std	Y+33, r24	; 0x21
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <LCD_displayCharacter+0x1c0>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	98 a3       	std	Y+32, r25	; 0x20
    2102:	8f 8f       	std	Y+31, r24	; 0x1f
    2104:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2106:	98 a1       	ldd	r25, Y+32	; 0x20
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_displayCharacter+0x1ae>
    210c:	98 a3       	std	Y+32, r25	; 0x20
    210e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	89 a1       	ldd	r24, Y+33	; 0x21
    2112:	9a a1       	ldd	r25, Y+34	; 0x22
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <LCD_displayCharacter+0x1a2>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6b a1       	ldd	r22, Y+35	; 0x23
    2126:	7c a1       	ldd	r23, Y+36	; 0x24
    2128:	8d a1       	ldd	r24, Y+37	; 0x25
    212a:	9e a1       	ldd	r25, Y+38	; 0x26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9a a3       	std	Y+34, r25	; 0x22
    2136:	89 a3       	std	Y+33, r24	; 0x21
    2138:	89 a1       	ldd	r24, Y+33	; 0x21
    213a:	9a a1       	ldd	r25, Y+34	; 0x22
    213c:	9e 8f       	std	Y+30, r25	; 0x1e
    213e:	8d 8f       	std	Y+29, r24	; 0x1d
    2140:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2142:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_displayCharacter+0x1ea>
    2148:	9e 8f       	std	Y+30, r25	; 0x1e
    214a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	69 ad       	ldd	r22, Y+57	; 0x39
    2150:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePort>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 e8       	ldi	r26, 0x80	; 128
    215a:	bf e3       	ldi	r27, 0x3F	; 63
    215c:	89 8f       	std	Y+25, r24	; 0x19
    215e:	9a 8f       	std	Y+26, r25	; 0x1a
    2160:	ab 8f       	std	Y+27, r26	; 0x1b
    2162:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	69 8d       	ldd	r22, Y+25	; 0x19
    2166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a ef       	ldi	r20, 0xFA	; 250
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8d 8b       	std	Y+21, r24	; 0x15
    217e:	9e 8b       	std	Y+22, r25	; 0x16
    2180:	af 8b       	std	Y+23, r26	; 0x17
    2182:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	2c f4       	brge	.+10     	; 0x21a6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	3f c0       	rjmp	.+126    	; 0x2224 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	4c f5       	brge	.+82     	; 0x2210 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21be:	69 8d       	ldd	r22, Y+25	; 0x19
    21c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <LCD_displayCharacter+0x2ac>
    21e8:	88 ec       	ldi	r24, 0xC8	; 200
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9a 8b       	std	Y+18, r25	; 0x12
    21ee:	89 8b       	std	Y+17, r24	; 0x11
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	9a 89       	ldd	r25, Y+18	; 0x12
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_displayCharacter+0x29a>
    21f8:	9a 8b       	std	Y+18, r25	; 0x12
    21fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	9c 89       	ldd	r25, Y+20	; 0x14
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <LCD_displayCharacter+0x28e>
    220e:	14 c0       	rjmp	.+40     	; 0x2238 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	6d 89       	ldd	r22, Y+21	; 0x15
    2212:	7e 89       	ldd	r23, Y+22	; 0x16
    2214:	8f 89       	ldd	r24, Y+23	; 0x17
    2216:	98 8d       	ldd	r25, Y+24	; 0x18
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9c 8b       	std	Y+20, r25	; 0x14
    2222:	8b 8b       	std	Y+19, r24	; 0x13
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	98 8b       	std	Y+16, r25	; 0x10
    222a:	8f 87       	std	Y+15, r24	; 0x0f
    222c:	8f 85       	ldd	r24, Y+15	; 0x0f
    222e:	98 89       	ldd	r25, Y+16	; 0x10
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_displayCharacter+0x2d6>
    2234:	98 8b       	std	Y+16, r25	; 0x10
    2236:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	61 e0       	ldi	r22, 0x01	; 1
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e8       	ldi	r26, 0x80	; 128
    2248:	bf e3       	ldi	r27, 0x3F	; 63
    224a:	8b 87       	std	Y+11, r24	; 0x0b
    224c:	9c 87       	std	Y+12, r25	; 0x0c
    224e:	ad 87       	std	Y+13, r26	; 0x0d
    2250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a ef       	ldi	r20, 0xFA	; 250
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8f 83       	std	Y+7, r24	; 0x07
    226c:	98 87       	std	Y+8, r25	; 0x08
    226e:	a9 87       	std	Y+9, r26	; 0x09
    2270:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	2c f4       	brge	.+10     	; 0x2294 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	3f c0       	rjmp	.+126    	; 0x2312 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	4f e7       	ldi	r20, 0x7F	; 127
    22a2:	57 e4       	ldi	r21, 0x47	; 71
    22a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a8:	18 16       	cp	r1, r24
    22aa:	4c f5       	brge	.+82     	; 0x22fe <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <LCD_displayCharacter+0x39a>
    22d6:	88 ec       	ldi	r24, 0xC8	; 200
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_displayCharacter+0x388>
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	69 f7       	brne	.-38     	; 0x22d6 <LCD_displayCharacter+0x37c>
    22fc:	14 c0       	rjmp	.+40     	; 0x2326 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_displayCharacter+0x3c4>
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2326:	e9 96       	adiw	r28, 0x39	; 57
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <LCD_displayString+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	0e c0       	rjmp	.+28     	; 0x2368 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	9b 81       	ldd	r25, Y+3	; 0x03
    2356:	fc 01       	movw	r30, r24
    2358:	e2 0f       	add	r30, r18
    235a:	f3 1f       	adc	r31, r19
    235c:	80 81       	ld	r24, Z
    235e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_displayCharacter>
		i++;
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	8f 5f       	subi	r24, 0xFF	; 255
    2366:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	fc 01       	movw	r30, r24
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	39 f7       	brne	.-50     	; 0x234c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <LCD_moveCursor+0x6>
    2390:	00 d0       	rcall	.+0      	; 0x2392 <LCD_moveCursor+0x8>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	8a 83       	std	Y+2, r24	; 0x02
    239a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	3d 83       	std	Y+5, r19	; 0x05
    23a4:	2c 83       	std	Y+4, r18	; 0x04
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	9d 81       	ldd	r25, Y+5	; 0x05
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	91 05       	cpc	r25, r1
    23ae:	c1 f0       	breq	.+48     	; 0x23e0 <LCD_moveCursor+0x56>
    23b0:	2c 81       	ldd	r18, Y+4	; 0x04
    23b2:	3d 81       	ldd	r19, Y+5	; 0x05
    23b4:	22 30       	cpi	r18, 0x02	; 2
    23b6:	31 05       	cpc	r19, r1
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <LCD_moveCursor+0x3a>
    23ba:	8c 81       	ldd	r24, Y+4	; 0x04
    23bc:	9d 81       	ldd	r25, Y+5	; 0x05
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	61 f0       	breq	.+24     	; 0x23da <LCD_moveCursor+0x50>
    23c2:	19 c0       	rjmp	.+50     	; 0x23f6 <LCD_moveCursor+0x6c>
    23c4:	2c 81       	ldd	r18, Y+4	; 0x04
    23c6:	3d 81       	ldd	r19, Y+5	; 0x05
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	69 f0       	breq	.+26     	; 0x23e8 <LCD_moveCursor+0x5e>
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	83 30       	cpi	r24, 0x03	; 3
    23d4:	91 05       	cpc	r25, r1
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <LCD_moveCursor+0x66>
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	80 5c       	subi	r24, 0xC0	; 192
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	07 c0       	rjmp	.+14     	; 0x23f6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	80 5f       	subi	r24, 0xF0	; 240
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	80 5b       	subi	r24, 0xB0	; 176
    23f4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	80 68       	ori	r24, 0x80	; 128
    23fa:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommand>
}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <LCD_displayStringRowColumn+0x6>
    2414:	00 d0       	rcall	.+0      	; 0x2416 <LCD_displayStringRowColumn+0x8>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	6a 83       	std	Y+2, r22	; 0x02
    241e:	5c 83       	std	Y+4, r21	; 0x04
    2420:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	6a 81       	ldd	r22, Y+2	; 0x02
    2426:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	62 97       	sbiw	r28, 0x12	; 18
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2458:	89 89       	ldd	r24, Y+17	; 0x11
    245a:	9a 89       	ldd	r25, Y+18	; 0x12
    245c:	9e 01       	movw	r18, r28
    245e:	2f 5f       	subi	r18, 0xFF	; 255
    2460:	3f 4f       	sbci	r19, 0xFF	; 255
    2462:	b9 01       	movw	r22, r18
    2464:	4a e0       	ldi	r20, 0x0A	; 10
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <itoa>
   LCD_displayString(buff); /* Display the string */
    246c:	ce 01       	movw	r24, r28
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
}
    2474:	62 96       	adiw	r28, 0x12	; 18
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommand>
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <Timer_setPrescaler>:
static void (*Timer1_Callback_OVF)(void) = NULL_PTR;
static void (*Timer2_Callback_CTC)(void) = NULL_PTR;
static void (*Timer2_Callback_OVF)(void) = NULL_PTR;

/*---- Internal function to set timer prescaler ----*/
static void Timer_setPrescaler(Timer_ID_Type timer_id, Timer_PrescalerType prescaler) {
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <Timer_setPrescaler+0x6>
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <Timer_setPrescaler+0x8>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	6a 83       	std	Y+2, r22	; 0x02
    switch (timer_id) {
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	3c 83       	std	Y+4, r19	; 0x04
    24b2:	2b 83       	std	Y+3, r18	; 0x03
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	81 30       	cpi	r24, 0x01	; 1
    24ba:	91 05       	cpc	r25, r1
    24bc:	c9 f0       	breq	.+50     	; 0x24f0 <Timer_setPrescaler+0x56>
    24be:	2b 81       	ldd	r18, Y+3	; 0x03
    24c0:	3c 81       	ldd	r19, Y+4	; 0x04
    24c2:	22 30       	cpi	r18, 0x02	; 2
    24c4:	31 05       	cpc	r19, r1
    24c6:	21 f1       	breq	.+72     	; 0x2510 <Timer_setPrescaler+0x76>
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	79 f5       	brne	.+94     	; 0x252e <Timer_setPrescaler+0x94>
        case TIMER0_ID:
            /*---- Clear and set Timer0 prescaler bits ----*/
            TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
    24d0:	a3 e5       	ldi	r26, 0x53	; 83
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e3 e5       	ldi	r30, 0x53	; 83
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	88 7f       	andi	r24, 0xF8	; 248
    24dc:	8c 93       	st	X, r24
            TCCR0 |= prescaler;
    24de:	a3 e5       	ldi	r26, 0x53	; 83
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e3 e5       	ldi	r30, 0x53	; 83
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	90 81       	ld	r25, Z
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	89 2b       	or	r24, r25
    24ec:	8c 93       	st	X, r24
    24ee:	1f c0       	rjmp	.+62     	; 0x252e <Timer_setPrescaler+0x94>
            break;
        case TIMER1_ID:
            /*---- Clear and set Timer1 prescaler bits ----*/
            TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
    24f0:	ae e4       	ldi	r26, 0x4E	; 78
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ee e4       	ldi	r30, 0x4E	; 78
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	88 7f       	andi	r24, 0xF8	; 248
    24fc:	8c 93       	st	X, r24
            TCCR1B |= prescaler;
    24fe:	ae e4       	ldi	r26, 0x4E	; 78
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ee e4       	ldi	r30, 0x4E	; 78
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	90 81       	ld	r25, Z
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	89 2b       	or	r24, r25
    250c:	8c 93       	st	X, r24
    250e:	0f c0       	rjmp	.+30     	; 0x252e <Timer_setPrescaler+0x94>
            break;
        case TIMER2_ID:
            /*---- Clear and set Timer2 prescaler bits ----*/
            TCCR2 &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
    2510:	a5 e4       	ldi	r26, 0x45	; 69
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e5 e4       	ldi	r30, 0x45	; 69
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	88 7f       	andi	r24, 0xF8	; 248
    251c:	8c 93       	st	X, r24
            TCCR2 |= prescaler;
    251e:	a5 e4       	ldi	r26, 0x45	; 69
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e5 e4       	ldi	r30, 0x45	; 69
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	90 81       	ld	r25, Z
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	89 2b       	or	r24, r25
    252c:	8c 93       	st	X, r24
            break;
    }
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <Timer_init>:

/*---- Initialize timer with specified configuration ----*/
void Timer_init(const Timer_ConfigType *config) {
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	00 d0       	rcall	.+0      	; 0x2542 <Timer_init+0x6>
    2542:	00 d0       	rcall	.+0      	; 0x2544 <Timer_init+0x8>
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
    switch (config->timer_id) {
    254c:	e9 81       	ldd	r30, Y+1	; 0x01
    254e:	fa 81       	ldd	r31, Y+2	; 0x02
    2550:	84 81       	ldd	r24, Z+4	; 0x04
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	3c 83       	std	Y+4, r19	; 0x04
    2558:	2b 83       	std	Y+3, r18	; 0x03
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	91 05       	cpc	r25, r1
    2562:	c9 f1       	breq	.+114    	; 0x25d6 <Timer_init+0x9a>
    2564:	2b 81       	ldd	r18, Y+3	; 0x03
    2566:	3c 81       	ldd	r19, Y+4	; 0x04
    2568:	22 30       	cpi	r18, 0x02	; 2
    256a:	31 05       	cpc	r19, r1
    256c:	09 f4       	brne	.+2      	; 0x2570 <Timer_init+0x34>
    256e:	61 c0       	rjmp	.+194    	; 0x2632 <Timer_init+0xf6>
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	09 f0       	breq	.+2      	; 0x257a <Timer_init+0x3e>
    2578:	89 c0       	rjmp	.+274    	; 0x268c <Timer_init+0x150>
        case TIMER0_ID:
            /*---- Timer0 initialization ----*/
            TCNT0 = (uint8)config->initial_value;
    257a:	a2 e5       	ldi	r26, 0x52	; 82
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e9 81       	ldd	r30, Y+1	; 0x01
    2580:	fa 81       	ldd	r31, Y+2	; 0x02
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	8c 93       	st	X, r24
            TCCR0 = (1 << FOC0); /*---- Force Output Compare ----*/
    2588:	e3 e5       	ldi	r30, 0x53	; 83
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 e8       	ldi	r24, 0x80	; 128
    258e:	80 83       	st	Z, r24
            if (config->mode == TIMER_MODE_CTC) {
    2590:	e9 81       	ldd	r30, Y+1	; 0x01
    2592:	fa 81       	ldd	r31, Y+2	; 0x02
    2594:	85 81       	ldd	r24, Z+5	; 0x05
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	b1 f4       	brne	.+44     	; 0x25c6 <Timer_init+0x8a>
                /*---- Configure Timer0 CTC mode ----*/
                TCCR0 |= (1 << WGM01);
    259a:	a3 e5       	ldi	r26, 0x53	; 83
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e3 e5       	ldi	r30, 0x53	; 83
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	88 60       	ori	r24, 0x08	; 8
    25a6:	8c 93       	st	X, r24
                OCR0 = (uint8)config->compare_value;
    25a8:	ac e5       	ldi	r26, 0x5C	; 92
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e9 81       	ldd	r30, Y+1	; 0x01
    25ae:	fa 81       	ldd	r31, Y+2	; 0x02
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); /*---- Enable CTC interrupt ----*/
    25b6:	a9 e5       	ldi	r26, 0x59	; 89
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e9 e5       	ldi	r30, 0x59	; 89
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	82 60       	ori	r24, 0x02	; 2
    25c2:	8c 93       	st	X, r24
    25c4:	63 c0       	rjmp	.+198    	; 0x268c <Timer_init+0x150>
            } else {
                TIMSK |= (1 << TOIE0); /*---- Enable overflow interrupt ----*/
    25c6:	a9 e5       	ldi	r26, 0x59	; 89
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e9 e5       	ldi	r30, 0x59	; 89
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	81 60       	ori	r24, 0x01	; 1
    25d2:	8c 93       	st	X, r24
    25d4:	5b c0       	rjmp	.+182    	; 0x268c <Timer_init+0x150>
            }
            break;

        case TIMER1_ID:
            /*---- Timer1 initialization ----*/
            TCNT1 = config->initial_value;
    25d6:	ac e4       	ldi	r26, 0x4C	; 76
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e9 81       	ldd	r30, Y+1	; 0x01
    25dc:	fa 81       	ldd	r31, Y+2	; 0x02
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	11 96       	adiw	r26, 0x01	; 1
    25e4:	9c 93       	st	X, r25
    25e6:	8e 93       	st	-X, r24
            TCCR1A = 0; /*---- Normal port operation ----*/
    25e8:	ef e4       	ldi	r30, 0x4F	; 79
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	10 82       	st	Z, r1
            if (config->mode == TIMER_MODE_CTC) {
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	85 81       	ldd	r24, Z+5	; 0x05
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	a9 f4       	brne	.+42     	; 0x2622 <Timer_init+0xe6>
                /*---- Configure Timer1 CTC mode ----*/
                TCCR1B = (1 << WGM12);
    25f8:	ee e4       	ldi	r30, 0x4E	; 78
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	88 e0       	ldi	r24, 0x08	; 8
    25fe:	80 83       	st	Z, r24
                OCR1A = config->compare_value;
    2600:	aa e4       	ldi	r26, 0x4A	; 74
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e9 81       	ldd	r30, Y+1	; 0x01
    2606:	fa 81       	ldd	r31, Y+2	; 0x02
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	93 81       	ldd	r25, Z+3	; 0x03
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	9c 93       	st	X, r25
    2610:	8e 93       	st	-X, r24
                TIMSK |= (1 << OCIE1A); /*---- Enable CTC interrupt ----*/
    2612:	a9 e5       	ldi	r26, 0x59	; 89
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e9 e5       	ldi	r30, 0x59	; 89
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	80 61       	ori	r24, 0x10	; 16
    261e:	8c 93       	st	X, r24
    2620:	35 c0       	rjmp	.+106    	; 0x268c <Timer_init+0x150>
            } else {
                TIMSK |= (1 << TOIE1); /*---- Enable overflow interrupt ----*/
    2622:	a9 e5       	ldi	r26, 0x59	; 89
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e9 e5       	ldi	r30, 0x59	; 89
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	84 60       	ori	r24, 0x04	; 4
    262e:	8c 93       	st	X, r24
    2630:	2d c0       	rjmp	.+90     	; 0x268c <Timer_init+0x150>
            }
            break;

        case TIMER2_ID:
            /*---- Timer2 initialization ----*/
            TCNT2 = (uint8)config->initial_value;
    2632:	a4 e4       	ldi	r26, 0x44	; 68
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e9 81       	ldd	r30, Y+1	; 0x01
    2638:	fa 81       	ldd	r31, Y+2	; 0x02
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	8c 93       	st	X, r24
            TCCR2 = (1 << FOC2); /*---- Force Output Compare ----*/
    2640:	e5 e4       	ldi	r30, 0x45	; 69
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 e8       	ldi	r24, 0x80	; 128
    2646:	80 83       	st	Z, r24
            if (config->mode == TIMER_MODE_CTC) {
    2648:	e9 81       	ldd	r30, Y+1	; 0x01
    264a:	fa 81       	ldd	r31, Y+2	; 0x02
    264c:	85 81       	ldd	r24, Z+5	; 0x05
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	b1 f4       	brne	.+44     	; 0x267e <Timer_init+0x142>
                /*---- Configure Timer2 CTC mode ----*/
                TCCR2 |= (1 << WGM21);
    2652:	a5 e4       	ldi	r26, 0x45	; 69
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e5 e4       	ldi	r30, 0x45	; 69
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	88 60       	ori	r24, 0x08	; 8
    265e:	8c 93       	st	X, r24
                OCR2 = (uint8)config->compare_value;
    2660:	a3 e4       	ldi	r26, 0x43	; 67
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	93 81       	ldd	r25, Z+3	; 0x03
    266c:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); /*---- Enable CTC interrupt ----*/
    266e:	a9 e5       	ldi	r26, 0x59	; 89
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e9 e5       	ldi	r30, 0x59	; 89
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	80 68       	ori	r24, 0x80	; 128
    267a:	8c 93       	st	X, r24
    267c:	07 c0       	rjmp	.+14     	; 0x268c <Timer_init+0x150>
            } else {
                TIMSK |= (1 << TOIE2); /*---- Enable overflow interrupt ----*/
    267e:	a9 e5       	ldi	r26, 0x59	; 89
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e9 e5       	ldi	r30, 0x59	; 89
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	80 64       	ori	r24, 0x40	; 64
    268a:	8c 93       	st	X, r24
            }
            break;
    }

    /*---- Set the configured prescaler ----*/
    Timer_setPrescaler(config->timer_id, config->prescaler);
    268c:	e9 81       	ldd	r30, Y+1	; 0x01
    268e:	fa 81       	ldd	r31, Y+2	; 0x02
    2690:	84 81       	ldd	r24, Z+4	; 0x04
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	96 81       	ldd	r25, Z+6	; 0x06
    2698:	69 2f       	mov	r22, r25
    269a:	0e 94 4d 12 	call	0x249a	; 0x249a <Timer_setPrescaler>
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <Timer_deInit>:

/*---- Deinitialize timer and disable interrupts ----*/
void Timer_deInit(Timer_ID_Type timer_id) {
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <Timer_deInit+0x6>
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_id) {
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	3b 83       	std	Y+3, r19	; 0x03
    26c2:	2a 83       	std	Y+2, r18	; 0x02
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	81 30       	cpi	r24, 0x01	; 1
    26ca:	91 05       	cpc	r25, r1
    26cc:	e1 f0       	breq	.+56     	; 0x2706 <Timer_deInit+0x5a>
    26ce:	2a 81       	ldd	r18, Y+2	; 0x02
    26d0:	3b 81       	ldd	r19, Y+3	; 0x03
    26d2:	22 30       	cpi	r18, 0x02	; 2
    26d4:	31 05       	cpc	r19, r1
    26d6:	69 f1       	breq	.+90     	; 0x2732 <Timer_deInit+0x86>
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	d9 f5       	brne	.+118    	; 0x2756 <Timer_deInit+0xaa>
        case TIMER0_ID:
            /*---- Disable Timer0 and clear callbacks ----*/
            TCCR0 = 0;
    26e0:	e3 e5       	ldi	r30, 0x53	; 83
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE0) | (1 << TOIE0));
    26e6:	a9 e5       	ldi	r26, 0x59	; 89
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e9 e5       	ldi	r30, 0x59	; 89
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	8c 7f       	andi	r24, 0xFC	; 252
    26f2:	8c 93       	st	X, r24
            Timer0_Callback_CTC = NULL_PTR;
    26f4:	10 92 76 01 	sts	0x0176, r1
    26f8:	10 92 75 01 	sts	0x0175, r1
            Timer0_Callback_OVF = NULL_PTR;
    26fc:	10 92 78 01 	sts	0x0178, r1
    2700:	10 92 77 01 	sts	0x0177, r1
    2704:	28 c0       	rjmp	.+80     	; 0x2756 <Timer_deInit+0xaa>
            break;
        case TIMER1_ID:
            /*---- Disable Timer1 and clear callbacks ----*/
            TCCR1A = 0;
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	10 82       	st	Z, r1
            TCCR1B = 0;
    270c:	ee e4       	ldi	r30, 0x4E	; 78
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE1A) | (1 << TOIE1));
    2712:	a9 e5       	ldi	r26, 0x59	; 89
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e9 e5       	ldi	r30, 0x59	; 89
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8b 7e       	andi	r24, 0xEB	; 235
    271e:	8c 93       	st	X, r24
            Timer1_Callback_CTC = NULL_PTR;
    2720:	10 92 7a 01 	sts	0x017A, r1
    2724:	10 92 79 01 	sts	0x0179, r1
            Timer1_Callback_OVF = NULL_PTR;
    2728:	10 92 7c 01 	sts	0x017C, r1
    272c:	10 92 7b 01 	sts	0x017B, r1
    2730:	12 c0       	rjmp	.+36     	; 0x2756 <Timer_deInit+0xaa>
            break;
        case TIMER2_ID:
            /*---- Disable Timer2 and clear callbacks ----*/
            TCCR2 = 0;
    2732:	e5 e4       	ldi	r30, 0x45	; 69
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE2) | (1 << TOIE2));
    2738:	a9 e5       	ldi	r26, 0x59	; 89
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e9 e5       	ldi	r30, 0x59	; 89
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	8f 73       	andi	r24, 0x3F	; 63
    2744:	8c 93       	st	X, r24
            Timer2_Callback_CTC = NULL_PTR;
    2746:	10 92 7e 01 	sts	0x017E, r1
    274a:	10 92 7d 01 	sts	0x017D, r1
            Timer2_Callback_OVF = NULL_PTR;
    274e:	10 92 80 01 	sts	0x0180, r1
    2752:	10 92 7f 01 	sts	0x017F, r1
            break;
    }
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <Timer_setCallBack_CTC>:

/*---- Set callback function for CTC interrupt ----*/
void Timer_setCallBack_CTC(void (*callback)(void), Timer_ID_Type timer_id) {
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <Timer_setCallBack_CTC+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <Timer_setCallBack_CTC+0x8>
    276a:	0f 92       	push	r0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	6b 83       	std	Y+3, r22	; 0x03
    switch (timer_id) {
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	3d 83       	std	Y+5, r19	; 0x05
    277e:	2c 83       	std	Y+4, r18	; 0x04
    2780:	8c 81       	ldd	r24, Y+4	; 0x04
    2782:	9d 81       	ldd	r25, Y+5	; 0x05
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	91 05       	cpc	r25, r1
    2788:	81 f0       	breq	.+32     	; 0x27aa <Timer_setCallBack_CTC+0x48>
    278a:	2c 81       	ldd	r18, Y+4	; 0x04
    278c:	3d 81       	ldd	r19, Y+5	; 0x05
    278e:	22 30       	cpi	r18, 0x02	; 2
    2790:	31 05       	cpc	r19, r1
    2792:	91 f0       	breq	.+36     	; 0x27b8 <Timer_setCallBack_CTC+0x56>
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	9d 81       	ldd	r25, Y+5	; 0x05
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	a1 f4       	brne	.+40     	; 0x27c4 <Timer_setCallBack_CTC+0x62>
        case TIMER0_ID: Timer0_Callback_CTC = callback; break;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	90 93 76 01 	sts	0x0176, r25
    27a4:	80 93 75 01 	sts	0x0175, r24
    27a8:	0d c0       	rjmp	.+26     	; 0x27c4 <Timer_setCallBack_CTC+0x62>
        case TIMER1_ID: Timer1_Callback_CTC = callback; break;
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	9a 81       	ldd	r25, Y+2	; 0x02
    27ae:	90 93 7a 01 	sts	0x017A, r25
    27b2:	80 93 79 01 	sts	0x0179, r24
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <Timer_setCallBack_CTC+0x62>
        case TIMER2_ID: Timer2_Callback_CTC = callback; break;
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	9a 81       	ldd	r25, Y+2	; 0x02
    27bc:	90 93 7e 01 	sts	0x017E, r25
    27c0:	80 93 7d 01 	sts	0x017D, r24
    }
}
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <Timer_setCallBack_OVF>:

/*---- Set callback function for overflow interrupt ----*/
void Timer_setCallBack_OVF(void (*callback)(void), Timer_ID_Type timer_id) {
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <Timer_setCallBack_OVF+0x6>
    27da:	00 d0       	rcall	.+0      	; 0x27dc <Timer_setCallBack_OVF+0x8>
    27dc:	0f 92       	push	r0
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	6b 83       	std	Y+3, r22	; 0x03
    switch (timer_id) {
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	3d 83       	std	Y+5, r19	; 0x05
    27f0:	2c 83       	std	Y+4, r18	; 0x04
    27f2:	8c 81       	ldd	r24, Y+4	; 0x04
    27f4:	9d 81       	ldd	r25, Y+5	; 0x05
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	91 05       	cpc	r25, r1
    27fa:	81 f0       	breq	.+32     	; 0x281c <Timer_setCallBack_OVF+0x48>
    27fc:	2c 81       	ldd	r18, Y+4	; 0x04
    27fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2800:	22 30       	cpi	r18, 0x02	; 2
    2802:	31 05       	cpc	r19, r1
    2804:	91 f0       	breq	.+36     	; 0x282a <Timer_setCallBack_OVF+0x56>
    2806:	8c 81       	ldd	r24, Y+4	; 0x04
    2808:	9d 81       	ldd	r25, Y+5	; 0x05
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	a1 f4       	brne	.+40     	; 0x2836 <Timer_setCallBack_OVF+0x62>
        case TIMER0_ID: Timer0_Callback_OVF = callback; break;
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	90 93 78 01 	sts	0x0178, r25
    2816:	80 93 77 01 	sts	0x0177, r24
    281a:	0d c0       	rjmp	.+26     	; 0x2836 <Timer_setCallBack_OVF+0x62>
        case TIMER1_ID: Timer1_Callback_OVF = callback; break;
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	90 93 7c 01 	sts	0x017C, r25
    2824:	80 93 7b 01 	sts	0x017B, r24
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <Timer_setCallBack_OVF+0x62>
        case TIMER2_ID: Timer2_Callback_OVF = callback; break;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	90 93 80 01 	sts	0x0180, r25
    2832:	80 93 7f 01 	sts	0x017F, r24
    }
}
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <__vector_10>:
/*******************************************************************************
 *                      Interrupt Service Routines                            *
 *******************************************************************************/

/*---- Timer0 Compare Match Interrupt ----*/
ISR(TIMER0_COMP_vect) {
    2846:	1f 92       	push	r1
    2848:	0f 92       	push	r0
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	0f 92       	push	r0
    284e:	11 24       	eor	r1, r1
    2850:	2f 93       	push	r18
    2852:	3f 93       	push	r19
    2854:	4f 93       	push	r20
    2856:	5f 93       	push	r21
    2858:	6f 93       	push	r22
    285a:	7f 93       	push	r23
    285c:	8f 93       	push	r24
    285e:	9f 93       	push	r25
    2860:	af 93       	push	r26
    2862:	bf 93       	push	r27
    2864:	ef 93       	push	r30
    2866:	ff 93       	push	r31
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    if (Timer0_Callback_CTC != NULL_PTR) Timer0_Callback_CTC();
    2870:	80 91 75 01 	lds	r24, 0x0175
    2874:	90 91 76 01 	lds	r25, 0x0176
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	29 f0       	breq	.+10     	; 0x2886 <__vector_10+0x40>
    287c:	e0 91 75 01 	lds	r30, 0x0175
    2880:	f0 91 76 01 	lds	r31, 0x0176
    2884:	09 95       	icall
}
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	ff 91       	pop	r31
    288c:	ef 91       	pop	r30
    288e:	bf 91       	pop	r27
    2890:	af 91       	pop	r26
    2892:	9f 91       	pop	r25
    2894:	8f 91       	pop	r24
    2896:	7f 91       	pop	r23
    2898:	6f 91       	pop	r22
    289a:	5f 91       	pop	r21
    289c:	4f 91       	pop	r20
    289e:	3f 91       	pop	r19
    28a0:	2f 91       	pop	r18
    28a2:	0f 90       	pop	r0
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	0f 90       	pop	r0
    28a8:	1f 90       	pop	r1
    28aa:	18 95       	reti

000028ac <__vector_11>:

/*---- Timer0 Overflow Interrupt ----*/
ISR(TIMER0_OVF_vect)  {
    28ac:	1f 92       	push	r1
    28ae:	0f 92       	push	r0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	0f 92       	push	r0
    28b4:	11 24       	eor	r1, r1
    28b6:	2f 93       	push	r18
    28b8:	3f 93       	push	r19
    28ba:	4f 93       	push	r20
    28bc:	5f 93       	push	r21
    28be:	6f 93       	push	r22
    28c0:	7f 93       	push	r23
    28c2:	8f 93       	push	r24
    28c4:	9f 93       	push	r25
    28c6:	af 93       	push	r26
    28c8:	bf 93       	push	r27
    28ca:	ef 93       	push	r30
    28cc:	ff 93       	push	r31
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    if (Timer0_Callback_OVF != NULL_PTR) Timer0_Callback_OVF();
    28d6:	80 91 77 01 	lds	r24, 0x0177
    28da:	90 91 78 01 	lds	r25, 0x0178
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	29 f0       	breq	.+10     	; 0x28ec <__vector_11+0x40>
    28e2:	e0 91 77 01 	lds	r30, 0x0177
    28e6:	f0 91 78 01 	lds	r31, 0x0178
    28ea:	09 95       	icall
}
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	ff 91       	pop	r31
    28f2:	ef 91       	pop	r30
    28f4:	bf 91       	pop	r27
    28f6:	af 91       	pop	r26
    28f8:	9f 91       	pop	r25
    28fa:	8f 91       	pop	r24
    28fc:	7f 91       	pop	r23
    28fe:	6f 91       	pop	r22
    2900:	5f 91       	pop	r21
    2902:	4f 91       	pop	r20
    2904:	3f 91       	pop	r19
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	0f 90       	pop	r0
    290e:	1f 90       	pop	r1
    2910:	18 95       	reti

00002912 <__vector_7>:

/*---- Timer1 Compare Match A Interrupt ----*/
ISR(TIMER1_COMPA_vect) {
    2912:	1f 92       	push	r1
    2914:	0f 92       	push	r0
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	0f 92       	push	r0
    291a:	11 24       	eor	r1, r1
    291c:	2f 93       	push	r18
    291e:	3f 93       	push	r19
    2920:	4f 93       	push	r20
    2922:	5f 93       	push	r21
    2924:	6f 93       	push	r22
    2926:	7f 93       	push	r23
    2928:	8f 93       	push	r24
    292a:	9f 93       	push	r25
    292c:	af 93       	push	r26
    292e:	bf 93       	push	r27
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    if (Timer1_Callback_CTC != NULL_PTR) Timer1_Callback_CTC();
    293c:	80 91 79 01 	lds	r24, 0x0179
    2940:	90 91 7a 01 	lds	r25, 0x017A
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	29 f0       	breq	.+10     	; 0x2952 <__vector_7+0x40>
    2948:	e0 91 79 01 	lds	r30, 0x0179
    294c:	f0 91 7a 01 	lds	r31, 0x017A
    2950:	09 95       	icall
}
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	ff 91       	pop	r31
    2958:	ef 91       	pop	r30
    295a:	bf 91       	pop	r27
    295c:	af 91       	pop	r26
    295e:	9f 91       	pop	r25
    2960:	8f 91       	pop	r24
    2962:	7f 91       	pop	r23
    2964:	6f 91       	pop	r22
    2966:	5f 91       	pop	r21
    2968:	4f 91       	pop	r20
    296a:	3f 91       	pop	r19
    296c:	2f 91       	pop	r18
    296e:	0f 90       	pop	r0
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	0f 90       	pop	r0
    2974:	1f 90       	pop	r1
    2976:	18 95       	reti

00002978 <__vector_9>:

/*---- Timer1 Overflow Interrupt ----*/
ISR(TIMER1_OVF_vect)   {
    2978:	1f 92       	push	r1
    297a:	0f 92       	push	r0
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	0f 92       	push	r0
    2980:	11 24       	eor	r1, r1
    2982:	2f 93       	push	r18
    2984:	3f 93       	push	r19
    2986:	4f 93       	push	r20
    2988:	5f 93       	push	r21
    298a:	6f 93       	push	r22
    298c:	7f 93       	push	r23
    298e:	8f 93       	push	r24
    2990:	9f 93       	push	r25
    2992:	af 93       	push	r26
    2994:	bf 93       	push	r27
    2996:	ef 93       	push	r30
    2998:	ff 93       	push	r31
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    if (Timer1_Callback_OVF != NULL_PTR) Timer1_Callback_OVF();
    29a2:	80 91 7b 01 	lds	r24, 0x017B
    29a6:	90 91 7c 01 	lds	r25, 0x017C
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	29 f0       	breq	.+10     	; 0x29b8 <__vector_9+0x40>
    29ae:	e0 91 7b 01 	lds	r30, 0x017B
    29b2:	f0 91 7c 01 	lds	r31, 0x017C
    29b6:	09 95       	icall
}
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	ff 91       	pop	r31
    29be:	ef 91       	pop	r30
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	7f 91       	pop	r23
    29ca:	6f 91       	pop	r22
    29cc:	5f 91       	pop	r21
    29ce:	4f 91       	pop	r20
    29d0:	3f 91       	pop	r19
    29d2:	2f 91       	pop	r18
    29d4:	0f 90       	pop	r0
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	0f 90       	pop	r0
    29da:	1f 90       	pop	r1
    29dc:	18 95       	reti

000029de <__vector_4>:

/*---- Timer2 Compare Match Interrupt ----*/
ISR(TIMER2_COMP_vect) {
    29de:	1f 92       	push	r1
    29e0:	0f 92       	push	r0
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	0f 92       	push	r0
    29e6:	11 24       	eor	r1, r1
    29e8:	2f 93       	push	r18
    29ea:	3f 93       	push	r19
    29ec:	4f 93       	push	r20
    29ee:	5f 93       	push	r21
    29f0:	6f 93       	push	r22
    29f2:	7f 93       	push	r23
    29f4:	8f 93       	push	r24
    29f6:	9f 93       	push	r25
    29f8:	af 93       	push	r26
    29fa:	bf 93       	push	r27
    29fc:	ef 93       	push	r30
    29fe:	ff 93       	push	r31
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    if (Timer2_Callback_CTC != NULL_PTR) Timer2_Callback_CTC();
    2a08:	80 91 7d 01 	lds	r24, 0x017D
    2a0c:	90 91 7e 01 	lds	r25, 0x017E
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	29 f0       	breq	.+10     	; 0x2a1e <__vector_4+0x40>
    2a14:	e0 91 7d 01 	lds	r30, 0x017D
    2a18:	f0 91 7e 01 	lds	r31, 0x017E
    2a1c:	09 95       	icall
}
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	bf 91       	pop	r27
    2a28:	af 91       	pop	r26
    2a2a:	9f 91       	pop	r25
    2a2c:	8f 91       	pop	r24
    2a2e:	7f 91       	pop	r23
    2a30:	6f 91       	pop	r22
    2a32:	5f 91       	pop	r21
    2a34:	4f 91       	pop	r20
    2a36:	3f 91       	pop	r19
    2a38:	2f 91       	pop	r18
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <__vector_5>:

/*---- Timer2 Overflow Interrupt ----*/
ISR(TIMER2_OVF_vect)  {
    2a44:	1f 92       	push	r1
    2a46:	0f 92       	push	r0
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	0f 92       	push	r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	2f 93       	push	r18
    2a50:	3f 93       	push	r19
    2a52:	4f 93       	push	r20
    2a54:	5f 93       	push	r21
    2a56:	6f 93       	push	r22
    2a58:	7f 93       	push	r23
    2a5a:	8f 93       	push	r24
    2a5c:	9f 93       	push	r25
    2a5e:	af 93       	push	r26
    2a60:	bf 93       	push	r27
    2a62:	ef 93       	push	r30
    2a64:	ff 93       	push	r31
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    if (Timer2_Callback_OVF != NULL_PTR) Timer2_Callback_OVF();
    2a6e:	80 91 7f 01 	lds	r24, 0x017F
    2a72:	90 91 80 01 	lds	r25, 0x0180
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	29 f0       	breq	.+10     	; 0x2a84 <__vector_5+0x40>
    2a7a:	e0 91 7f 01 	lds	r30, 0x017F
    2a7e:	f0 91 80 01 	lds	r31, 0x0180
    2a82:	09 95       	icall
}
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	ff 91       	pop	r31
    2a8a:	ef 91       	pop	r30
    2a8c:	bf 91       	pop	r27
    2a8e:	af 91       	pop	r26
    2a90:	9f 91       	pop	r25
    2a92:	8f 91       	pop	r24
    2a94:	7f 91       	pop	r23
    2a96:	6f 91       	pop	r22
    2a98:	5f 91       	pop	r21
    2a9a:	4f 91       	pop	r20
    2a9c:	3f 91       	pop	r19
    2a9e:	2f 91       	pop	r18
    2aa0:	0f 90       	pop	r0
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	0f 90       	pop	r0
    2aa6:	1f 90       	pop	r1
    2aa8:	18 95       	reti

00002aaa <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <UART_init+0x6>
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <UART_init+0x8>
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = (uint16)(((F_CPU / (8UL * Config_Ptr->baud_rate))) - 1);
    2aba:	eb 81       	ldd	r30, Y+3	; 0x03
    2abc:	fc 81       	ldd	r31, Y+4	; 0x04
    2abe:	83 81       	ldd	r24, Z+3	; 0x03
    2ac0:	94 81       	ldd	r25, Z+4	; 0x04
    2ac2:	a5 81       	ldd	r26, Z+5	; 0x05
    2ac4:	b6 81       	ldd	r27, Z+6	; 0x06
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	aa 1f       	adc	r26, r26
    2acc:	bb 1f       	adc	r27, r27
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	aa 1f       	adc	r26, r26
    2ad4:	bb 1f       	adc	r27, r27
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	aa 1f       	adc	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	9c 01       	movw	r18, r24
    2ae0:	ad 01       	movw	r20, r26
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	92 e1       	ldi	r25, 0x12	; 18
    2ae6:	aa e7       	ldi	r26, 0x7A	; 122
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__udivmodsi4>
    2af2:	da 01       	movw	r26, r20
    2af4:	c9 01       	movw	r24, r18
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01

    /* Double speed mode */
    UCSRA = (1 << U2X);
    2afc:	eb e2       	ldi	r30, 0x2B	; 43
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	80 83       	st	Z, r24

    /* Enable TX/RX */
    UCSRB = (1 << RXEN) | (1 << TXEN);
    2b04:	ea e2       	ldi	r30, 0x2A	; 42
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	88 e1       	ldi	r24, 0x18	; 24
    2b0a:	80 83       	st	Z, r24
    /* Configure frame format:
     * - Bit data (5-8 bits)
     * - Parity
     * - Stop bits
     */
    UCSRC = (1 << URSEL) |
    2b0c:	a0 e4       	ldi	r26, 0x40	; 64
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	eb 81       	ldd	r30, Y+3	; 0x03
    2b12:	fc 81       	ldd	r31, Y+4	; 0x04
    2b14:	80 81       	ld	r24, Z
    2b16:	88 2f       	mov	r24, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	28 2f       	mov	r18, r24
    2b20:	20 68       	ori	r18, 0x80	; 128
    2b22:	eb 81       	ldd	r30, Y+3	; 0x03
    2b24:	fc 81       	ldd	r31, Y+4	; 0x04
    2b26:	81 81       	ldd	r24, Z+1	; 0x01
    2b28:	88 2f       	mov	r24, r24
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	82 95       	swap	r24
    2b2e:	92 95       	swap	r25
    2b30:	90 7f       	andi	r25, 0xF0	; 240
    2b32:	98 27       	eor	r25, r24
    2b34:	80 7f       	andi	r24, 0xF0	; 240
    2b36:	98 27       	eor	r25, r24
    2b38:	28 2b       	or	r18, r24
    2b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	88 2f       	mov	r24, r24
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	82 2b       	or	r24, r18
    2b52:	8c 93       	st	X, r24
           (Config_Ptr->bit_data << UCSZ0) |
           (Config_Ptr->parity << UPM0) |
           (Config_Ptr->stop_bit << USBS);

    /* Set baud rate */
    UBRRH = (ubrr_value >> 8);
    2b54:	e0 e4       	ldi	r30, 0x40	; 64
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5c:	89 2f       	mov	r24, r25
    2b5e:	99 27       	eor	r25, r25
    2b60:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    2b62:	e9 e2       	ldi	r30, 0x29	; 41
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	80 83       	st	Z, r24
}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	0f 92       	push	r0
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b84:	eb e2       	ldi	r30, 0x2B	; 43
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	80 72       	andi	r24, 0x20	; 32
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	b9 f3       	breq	.-18     	; 0x2b84 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b96:	ec e2       	ldi	r30, 0x2C	; 44
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	80 83       	st	Z, r24
}
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2bae:	eb e2       	ldi	r30, 0x2B	; 43
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 23       	and	r24, r24
    2bb6:	dc f7       	brge	.-10     	; 0x2bae <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2bb8:	ec e2       	ldi	r30, 0x2C	; 44
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
}
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <UART_sendString+0x6>
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	9b 83       	std	Y+3, r25	; 0x03
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bd4:	19 82       	std	Y+1, r1	; 0x01
    2bd6:	0e c0       	rjmp	.+28     	; 0x2bf4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	80 81       	ld	r24, Z
    2bea:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <UART_sendByte>
		i++;
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	8f 5f       	subi	r24, 0xFF	; 255
    2bf2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfe:	fc 01       	movw	r30, r24
    2c00:	e2 0f       	add	r30, r18
    2c02:	f3 1f       	adc	r31, r19
    2c04:	80 81       	ld	r24, Z
    2c06:	88 23       	and	r24, r24
    2c08:	39 f7       	brne	.-50     	; 0x2bd8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <UART_receiveString+0xa>
    2c20:	0f 92       	push	r0
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c2a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	9b 81       	ldd	r25, Y+3	; 0x03
    2c36:	8c 01       	movw	r16, r24
    2c38:	02 0f       	add	r16, r18
    2c3a:	13 1f       	adc	r17, r19
    2c3c:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
    2c40:	f8 01       	movw	r30, r16
    2c42:	80 83       	st	Z, r24
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	8f 5f       	subi	r24, 0xFF	; 255
    2c4a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	8c 01       	movw	r16, r24
    2c58:	02 0f       	add	r16, r18
    2c5a:	13 1f       	adc	r17, r19
    2c5c:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <UART_recieveByte>
    2c60:	f8 01       	movw	r30, r16
    2c62:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6e:	fc 01       	movw	r30, r24
    2c70:	e2 0f       	add	r30, r18
    2c72:	f3 1f       	adc	r31, r19
    2c74:	80 81       	ld	r24, Z
    2c76:	83 32       	cpi	r24, 0x23	; 35
    2c78:	31 f7       	brne	.-52     	; 0x2c46 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	fc 01       	movw	r30, r24
    2c86:	e2 0f       	add	r30, r18
    2c88:	f3 1f       	adc	r31, r19
    2c8a:	10 82       	st	Z, r1
}
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	08 95       	ret

00002c9c <__udivmodsi4>:
    2c9c:	a1 e2       	ldi	r26, 0x21	; 33
    2c9e:	1a 2e       	mov	r1, r26
    2ca0:	aa 1b       	sub	r26, r26
    2ca2:	bb 1b       	sub	r27, r27
    2ca4:	fd 01       	movw	r30, r26
    2ca6:	0d c0       	rjmp	.+26     	; 0x2cc2 <__udivmodsi4_ep>

00002ca8 <__udivmodsi4_loop>:
    2ca8:	aa 1f       	adc	r26, r26
    2caa:	bb 1f       	adc	r27, r27
    2cac:	ee 1f       	adc	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	a2 17       	cp	r26, r18
    2cb2:	b3 07       	cpc	r27, r19
    2cb4:	e4 07       	cpc	r30, r20
    2cb6:	f5 07       	cpc	r31, r21
    2cb8:	20 f0       	brcs	.+8      	; 0x2cc2 <__udivmodsi4_ep>
    2cba:	a2 1b       	sub	r26, r18
    2cbc:	b3 0b       	sbc	r27, r19
    2cbe:	e4 0b       	sbc	r30, r20
    2cc0:	f5 0b       	sbc	r31, r21

00002cc2 <__udivmodsi4_ep>:
    2cc2:	66 1f       	adc	r22, r22
    2cc4:	77 1f       	adc	r23, r23
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	1a 94       	dec	r1
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <__udivmodsi4_loop>
    2cce:	60 95       	com	r22
    2cd0:	70 95       	com	r23
    2cd2:	80 95       	com	r24
    2cd4:	90 95       	com	r25
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	bd 01       	movw	r22, r26
    2cdc:	cf 01       	movw	r24, r30
    2cde:	08 95       	ret

00002ce0 <__prologue_saves__>:
    2ce0:	2f 92       	push	r2
    2ce2:	3f 92       	push	r3
    2ce4:	4f 92       	push	r4
    2ce6:	5f 92       	push	r5
    2ce8:	6f 92       	push	r6
    2cea:	7f 92       	push	r7
    2cec:	8f 92       	push	r8
    2cee:	9f 92       	push	r9
    2cf0:	af 92       	push	r10
    2cf2:	bf 92       	push	r11
    2cf4:	cf 92       	push	r12
    2cf6:	df 92       	push	r13
    2cf8:	ef 92       	push	r14
    2cfa:	ff 92       	push	r15
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	ca 1b       	sub	r28, r26
    2d0a:	db 0b       	sbc	r29, r27
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	09 94       	ijmp

00002d18 <__epilogue_restores__>:
    2d18:	2a 88       	ldd	r2, Y+18	; 0x12
    2d1a:	39 88       	ldd	r3, Y+17	; 0x11
    2d1c:	48 88       	ldd	r4, Y+16	; 0x10
    2d1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d20:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d22:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d24:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d26:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d28:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d2a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d2c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d2e:	df 80       	ldd	r13, Y+7	; 0x07
    2d30:	ee 80       	ldd	r14, Y+6	; 0x06
    2d32:	fd 80       	ldd	r15, Y+5	; 0x05
    2d34:	0c 81       	ldd	r16, Y+4	; 0x04
    2d36:	1b 81       	ldd	r17, Y+3	; 0x03
    2d38:	aa 81       	ldd	r26, Y+2	; 0x02
    2d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d3c:	ce 0f       	add	r28, r30
    2d3e:	d1 1d       	adc	r29, r1
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	ed 01       	movw	r28, r26
    2d4c:	08 95       	ret

00002d4e <itoa>:
    2d4e:	fb 01       	movw	r30, r22
    2d50:	9f 01       	movw	r18, r30
    2d52:	e8 94       	clt
    2d54:	42 30       	cpi	r20, 0x02	; 2
    2d56:	c4 f0       	brlt	.+48     	; 0x2d88 <itoa+0x3a>
    2d58:	45 32       	cpi	r20, 0x25	; 37
    2d5a:	b4 f4       	brge	.+44     	; 0x2d88 <itoa+0x3a>
    2d5c:	4a 30       	cpi	r20, 0x0A	; 10
    2d5e:	29 f4       	brne	.+10     	; 0x2d6a <itoa+0x1c>
    2d60:	97 fb       	bst	r25, 7
    2d62:	1e f4       	brtc	.+6      	; 0x2d6a <itoa+0x1c>
    2d64:	90 95       	com	r25
    2d66:	81 95       	neg	r24
    2d68:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6a:	64 2f       	mov	r22, r20
    2d6c:	77 27       	eor	r23, r23
    2d6e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__udivmodhi4>
    2d72:	80 5d       	subi	r24, 0xD0	; 208
    2d74:	8a 33       	cpi	r24, 0x3A	; 58
    2d76:	0c f0       	brlt	.+2      	; 0x2d7a <itoa+0x2c>
    2d78:	89 5d       	subi	r24, 0xD9	; 217
    2d7a:	81 93       	st	Z+, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	a1 f7       	brne	.-24     	; 0x2d6a <itoa+0x1c>
    2d82:	16 f4       	brtc	.+4      	; 0x2d88 <itoa+0x3a>
    2d84:	5d e2       	ldi	r21, 0x2D	; 45
    2d86:	51 93       	st	Z+, r21
    2d88:	10 82       	st	Z, r1
    2d8a:	c9 01       	movw	r24, r18
    2d8c:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <strrev>

00002d90 <strrev>:
    2d90:	dc 01       	movw	r26, r24
    2d92:	fc 01       	movw	r30, r24
    2d94:	67 2f       	mov	r22, r23
    2d96:	71 91       	ld	r23, Z+
    2d98:	77 23       	and	r23, r23
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <strrev+0x4>
    2d9c:	32 97       	sbiw	r30, 0x02	; 2
    2d9e:	04 c0       	rjmp	.+8      	; 0x2da8 <strrev+0x18>
    2da0:	7c 91       	ld	r23, X
    2da2:	6d 93       	st	X+, r22
    2da4:	70 83       	st	Z, r23
    2da6:	62 91       	ld	r22, -Z
    2da8:	ae 17       	cp	r26, r30
    2daa:	bf 07       	cpc	r27, r31
    2dac:	c8 f3       	brcs	.-14     	; 0x2da0 <strrev+0x10>
    2dae:	08 95       	ret

00002db0 <__udivmodhi4>:
    2db0:	aa 1b       	sub	r26, r26
    2db2:	bb 1b       	sub	r27, r27
    2db4:	51 e1       	ldi	r21, 0x11	; 17
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <__udivmodhi4_ep>

00002db8 <__udivmodhi4_loop>:
    2db8:	aa 1f       	adc	r26, r26
    2dba:	bb 1f       	adc	r27, r27
    2dbc:	a6 17       	cp	r26, r22
    2dbe:	b7 07       	cpc	r27, r23
    2dc0:	10 f0       	brcs	.+4      	; 0x2dc6 <__udivmodhi4_ep>
    2dc2:	a6 1b       	sub	r26, r22
    2dc4:	b7 0b       	sbc	r27, r23

00002dc6 <__udivmodhi4_ep>:
    2dc6:	88 1f       	adc	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	5a 95       	dec	r21
    2dcc:	a9 f7       	brne	.-22     	; 0x2db8 <__udivmodhi4_loop>
    2dce:	80 95       	com	r24
    2dd0:	90 95       	com	r25
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	08 95       	ret

00002dd8 <_exit>:
    2dd8:	f8 94       	cli

00002dda <__stop_program>:
    2dda:	ff cf       	rjmp	.-2      	; 0x2dda <__stop_program>
