
Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000316e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000316e  00003202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080007c  0080007c  0000321e  2**0
                  ALLOC
  3 .stab         000035d0  00000000  00000000  00003220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000195c  00000000  00000000  000067f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000814c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000828c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000083fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000af30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000be40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c89b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__vector_4>
      14:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__vector_9>
      28:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_10>
      2c:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 08 	call	0x11ee	; 0x11ee <main>
      8a:	0c 94 b5 18 	jmp	0x316a	; 0x316a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
/*
 * Description:
 * Initializes the Buzzer pin as an output and ensures it is turned off initially.
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_setupPinDirection>
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Description:
 * Turns ON the Buzzer by setting the corresponding pin HIGH.
 */
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Description:
 * Turns OFF the Buzzer by setting the corresponding pin LOW.
 */
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <Timer_CTC_Callback>:

/*---- Timer Control Variables ----*/
static volatile uint8 timer_elapsed = 0;  /*---- Global timer counter ----*/

/*---- Timer Callback Function ----*/
void Timer_CTC_Callback(void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	timer_elapsed++;
     ba0:	80 91 7c 00 	lds	r24, 0x007C
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	80 93 7c 00 	sts	0x007C, r24
}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <Control_delaySeconds>:

/*---- Non-blocking Delay Function ----*/
void Control_delaySeconds(uint8 seconds) {
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	2d 97       	sbiw	r28, 0x0d	; 13
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	88 87       	std	Y+8, r24	; 0x08
			.initial_value = 0,
			.compare_value = 31249,    /*---- 1 second at 8MHz/256 prescaler ----*/
			.timer_id = TIMER1_ID,
			.mode = TIMER_MODE_CTC,
			.prescaler = TIMER_PRESCALER_256
	};
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	9a 87       	std	Y+10, r25	; 0x0a
     bcc:	89 87       	std	Y+9, r24	; 0x09
     bce:	e4 e7       	ldi	r30, 0x74	; 116
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	fc 87       	std	Y+12, r31	; 0x0c
     bd4:	eb 87       	std	Y+11, r30	; 0x0b
     bd6:	f7 e0       	ldi	r31, 0x07	; 7
     bd8:	fd 87       	std	Y+13, r31	; 0x0d
     bda:	eb 85       	ldd	r30, Y+11	; 0x0b
     bdc:	fc 85       	ldd	r31, Y+12	; 0x0c
     bde:	00 80       	ld	r0, Z
     be0:	8b 85       	ldd	r24, Y+11	; 0x0b
     be2:	9c 85       	ldd	r25, Y+12	; 0x0c
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	9c 87       	std	Y+12, r25	; 0x0c
     be8:	8b 87       	std	Y+11, r24	; 0x0b
     bea:	e9 85       	ldd	r30, Y+9	; 0x09
     bec:	fa 85       	ldd	r31, Y+10	; 0x0a
     bee:	00 82       	st	Z, r0
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	9a 87       	std	Y+10, r25	; 0x0a
     bf8:	89 87       	std	Y+9, r24	; 0x09
     bfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     bfc:	91 50       	subi	r25, 0x01	; 1
     bfe:	9d 87       	std	Y+13, r25	; 0x0d
     c00:	ed 85       	ldd	r30, Y+13	; 0x0d
     c02:	ee 23       	and	r30, r30
     c04:	51 f7       	brne	.-44     	; 0xbda <Control_delaySeconds+0x2a>

	timer_elapsed = 0;
     c06:	10 92 7c 00 	sts	0x007C, r1
	Timer_init(&timerConfig);
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 cb 13 	call	0x2796	; 0x2796 <Timer_init>
	Timer_setCallBack_CTC(Timer_CTC_Callback, TIMER1_ID);
     c12:	8c ec       	ldi	r24, 0xCC	; 204
     c14:	95 e0       	ldi	r25, 0x05	; 5
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	0e 94 de 14 	call	0x29bc	; 0x29bc <Timer_setCallBack_CTC>

	while (timer_elapsed < seconds);  /*---- Wait for specified time ----*/
     c1c:	90 91 7c 00 	lds	r25, 0x007C
     c20:	88 85       	ldd	r24, Y+8	; 0x08
     c22:	98 17       	cp	r25, r24
     c24:	d8 f3       	brcs	.-10     	; 0xc1c <Control_delaySeconds+0x6c>
	Timer_deInit(TIMER1_ID);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 83 14 	call	0x2906	; 0x2906 <Timer_deInit>
}
     c2c:	2d 96       	adiw	r28, 0x0d	; 13
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <IsPasswordStored>:

/*---- Check if Password is Stored in EEPROM ----*/
uint8 IsPasswordStored() {
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	60 97       	sbiw	r28, 0x10	; 16
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
	uint8 flag;
	EEPROM_readByte(EEPROM_FLAG_ADDR, &flag);
     c52:	9e 01       	movw	r18, r28
     c54:	21 5f       	subi	r18, 0xF1	; 241
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	86 e1       	ldi	r24, 0x16	; 22
     c5a:	93 e0       	ldi	r25, 0x03	; 3
     c5c:	b9 01       	movw	r22, r18
     c5e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <EEPROM_readByte>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 e2       	ldi	r26, 0x20	; 32
     c68:	b1 e4       	ldi	r27, 0x41	; 65
     c6a:	8b 87       	std	Y+11, r24	; 0x0b
     c6c:	9c 87       	std	Y+12, r25	; 0x0c
     c6e:	ad 87       	std	Y+13, r26	; 0x0d
     c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c72:	6b 85       	ldd	r22, Y+11	; 0x0b
     c74:	7c 85       	ldd	r23, Y+12	; 0x0c
     c76:	8d 85       	ldd	r24, Y+13	; 0x0d
     c78:	9e 85       	ldd	r25, Y+14	; 0x0e
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	4a ef       	ldi	r20, 0xFA	; 250
     c80:	54 e4       	ldi	r21, 0x44	; 68
     c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	8f 83       	std	Y+7, r24	; 0x07
     c8c:	98 87       	std	Y+8, r25	; 0x08
     c8e:	a9 87       	std	Y+9, r26	; 0x09
     c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c92:	6f 81       	ldd	r22, Y+7	; 0x07
     c94:	78 85       	ldd	r23, Y+8	; 0x08
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e8       	ldi	r20, 0x80	; 128
     ca0:	5f e3       	ldi	r21, 0x3F	; 63
     ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ca6:	88 23       	and	r24, r24
     ca8:	2c f4       	brge	.+10     	; 0xcb4 <IsPasswordStored+0x76>
		__ticks = 1;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	9e 83       	std	Y+6, r25	; 0x06
     cb0:	8d 83       	std	Y+5, r24	; 0x05
     cb2:	3f c0       	rjmp	.+126    	; 0xd32 <IsPasswordStored+0xf4>
	else if (__tmp > 65535)
     cb4:	6f 81       	ldd	r22, Y+7	; 0x07
     cb6:	78 85       	ldd	r23, Y+8	; 0x08
     cb8:	89 85       	ldd	r24, Y+9	; 0x09
     cba:	9a 85       	ldd	r25, Y+10	; 0x0a
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	4f e7       	ldi	r20, 0x7F	; 127
     cc2:	57 e4       	ldi	r21, 0x47	; 71
     cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc8:	18 16       	cp	r1, r24
     cca:	4c f5       	brge	.+82     	; 0xd1e <IsPasswordStored+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cce:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e2       	ldi	r20, 0x20	; 32
     cda:	51 e4       	ldi	r21, 0x41	; 65
     cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	bc 01       	movw	r22, r24
     ce6:	cd 01       	movw	r24, r26
     ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	9e 83       	std	Y+6, r25	; 0x06
     cf2:	8d 83       	std	Y+5, r24	; 0x05
     cf4:	0f c0       	rjmp	.+30     	; 0xd14 <IsPasswordStored+0xd6>
     cf6:	88 ec       	ldi	r24, 0xC8	; 200
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <IsPasswordStored+0xc4>
     d06:	9c 83       	std	Y+4, r25	; 0x04
     d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	9e 83       	std	Y+6, r25	; 0x06
     d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	69 f7       	brne	.-38     	; 0xcf6 <IsPasswordStored+0xb8>
     d1c:	14 c0       	rjmp	.+40     	; 0xd46 <IsPasswordStored+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1e:	6f 81       	ldd	r22, Y+7	; 0x07
     d20:	78 85       	ldd	r23, Y+8	; 0x08
     d22:	89 85       	ldd	r24, Y+9	; 0x09
     d24:	9a 85       	ldd	r25, Y+10	; 0x0a
     d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <IsPasswordStored+0x100>
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); /*---- EEPROM read delay ----*/
	return (flag == EEPROM_INIT_FLAG);
     d46:	8f 85       	ldd	r24, Y+15	; 0x0f
     d48:	18 8a       	std	Y+16, r1	; 0x10
     d4a:	85 35       	cpi	r24, 0x55	; 85
     d4c:	11 f4       	brne	.+4      	; 0xd52 <IsPasswordStored+0x114>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	88 8b       	std	Y+16, r24	; 0x10
     d52:	88 89       	ldd	r24, Y+16	; 0x10
}
     d54:	60 96       	adiw	r28, 0x10	; 16
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <receivePassword>:

/*---- Receive Password with Handshaking ----*/
void receivePassword(uint8* buffer) {
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <receivePassword+0xa>
     d70:	0f 92       	push	r0
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	9b 83       	std	Y+3, r25	; 0x03
     d78:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     d7a:	19 82       	std	Y+1, r1	; 0x01
     d7c:	12 c0       	rjmp	.+36     	; 0xda2 <receivePassword+0x3c>
		buffer[i] = UART_recieveByte();
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	8c 01       	movw	r16, r24
     d8a:	02 0f       	add	r16, r18
     d8c:	13 1f       	adc	r17, r19
     d8e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
     d92:	f8 01       	movw	r30, r16
     d94:	80 83       	st	Z, r24
		UART_sendByte(NEXT_DIGIT); /*---- Acknowledge each digit ----*/
     d96:	83 ee       	ldi	r24, 0xE3	; 227
     d98:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
	return (flag == EEPROM_INIT_FLAG);
}

/*---- Receive Password with Handshaking ----*/
void receivePassword(uint8* buffer) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	85 30       	cpi	r24, 0x05	; 5
     da6:	58 f3       	brcs	.-42     	; 0xd7e <receivePassword+0x18>
		buffer[i] = UART_recieveByte();
		UART_sendByte(NEXT_DIGIT); /*---- Acknowledge each digit ----*/
	}
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <comparePasswords>:

/*---- Compare Two Passwords ----*/
uint8 comparePasswords(uint8* p1, uint8* p2) {
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <comparePasswords+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <comparePasswords+0x8>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <comparePasswords+0xa>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	8a 83       	std	Y+2, r24	; 0x02
     dca:	7d 83       	std	Y+5, r23	; 0x05
     dcc:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     dce:	19 82       	std	Y+1, r1	; 0x01
     dd0:	19 c0       	rjmp	.+50     	; 0xe04 <comparePasswords+0x4c>
		if (p1[i] != p2[i]) return 0;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	fc 01       	movw	r30, r24
     dde:	e2 0f       	add	r30, r18
     de0:	f3 1f       	adc	r31, r19
     de2:	40 81       	ld	r20, Z
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	9d 81       	ldd	r25, Y+5	; 0x05
     dee:	fc 01       	movw	r30, r24
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	80 81       	ld	r24, Z
     df6:	48 17       	cp	r20, r24
     df8:	11 f0       	breq	.+4      	; 0xdfe <comparePasswords+0x46>
     dfa:	1e 82       	std	Y+6, r1	; 0x06
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <comparePasswords+0x56>
	}
}

/*---- Compare Two Passwords ----*/
uint8 comparePasswords(uint8* p1, uint8* p2) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	8f 5f       	subi	r24, 0xFF	; 255
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	85 30       	cpi	r24, 0x05	; 5
     e08:	20 f3       	brcs	.-56     	; 0xdd2 <comparePasswords+0x1a>
		if (p1[i] != p2[i]) return 0;
	}
	return 1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	8e 83       	std	Y+6, r24	; 0x06
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
}
     e10:	26 96       	adiw	r28, 0x06	; 6
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <savePasswordToEEPROM>:

/*---- Save Password to EEPROM ----*/
void savePasswordToEEPROM(uint8* password) {
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	6f 97       	sbiw	r28, 0x1f	; 31
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	9f 8f       	std	Y+31, r25	; 0x1f
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     e3a:	1d 8e       	std	Y+29, r1	; 0x1d
     e3c:	88 c0       	rjmp	.+272    	; 0xf4e <savePasswordToEEPROM+0x12c>
		EEPROM_writeByte(EEPROM_BASE_ADDRESS + i, password[i]);
     e3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	8f 5e       	subi	r24, 0xEF	; 239
     e46:	9c 4f       	sbci	r25, 0xFC	; 252
     e48:	ac 01       	movw	r20, r24
     e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e52:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e54:	fc 01       	movw	r30, r24
     e56:	e2 0f       	add	r30, r18
     e58:	f3 1f       	adc	r31, r19
     e5a:	20 81       	ld	r18, Z
     e5c:	ca 01       	movw	r24, r20
     e5e:	62 2f       	mov	r22, r18
     e60:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <EEPROM_writeByte>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e2       	ldi	r26, 0x20	; 32
     e6a:	b1 e4       	ldi	r27, 0x41	; 65
     e6c:	89 8f       	std	Y+25, r24	; 0x19
     e6e:	9a 8f       	std	Y+26, r25	; 0x1a
     e70:	ab 8f       	std	Y+27, r26	; 0x1b
     e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e74:	69 8d       	ldd	r22, Y+25	; 0x19
     e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4a ef       	ldi	r20, 0xFA	; 250
     e82:	54 e4       	ldi	r21, 0x44	; 68
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	8d 8b       	std	Y+21, r24	; 0x15
     e8e:	9e 8b       	std	Y+22, r25	; 0x16
     e90:	af 8b       	std	Y+23, r26	; 0x17
     e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e94:	6d 89       	ldd	r22, Y+21	; 0x15
     e96:	7e 89       	ldd	r23, Y+22	; 0x16
     e98:	8f 89       	ldd	r24, Y+23	; 0x17
     e9a:	98 8d       	ldd	r25, Y+24	; 0x18
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e8       	ldi	r20, 0x80	; 128
     ea2:	5f e3       	ldi	r21, 0x3F	; 63
     ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea8:	88 23       	and	r24, r24
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <savePasswordToEEPROM+0x94>
		__ticks = 1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	9c 8b       	std	Y+20, r25	; 0x14
     eb2:	8b 8b       	std	Y+19, r24	; 0x13
     eb4:	3f c0       	rjmp	.+126    	; 0xf34 <savePasswordToEEPROM+0x112>
	else if (__tmp > 65535)
     eb6:	6d 89       	ldd	r22, Y+21	; 0x15
     eb8:	7e 89       	ldd	r23, Y+22	; 0x16
     eba:	8f 89       	ldd	r24, Y+23	; 0x17
     ebc:	98 8d       	ldd	r25, Y+24	; 0x18
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	4f e7       	ldi	r20, 0x7F	; 127
     ec4:	57 e4       	ldi	r21, 0x47	; 71
     ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eca:	18 16       	cp	r1, r24
     ecc:	4c f5       	brge	.+82     	; 0xf20 <savePasswordToEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ece:	69 8d       	ldd	r22, Y+25	; 0x19
     ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e2       	ldi	r20, 0x20	; 32
     edc:	51 e4       	ldi	r21, 0x41	; 65
     ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	9c 8b       	std	Y+20, r25	; 0x14
     ef4:	8b 8b       	std	Y+19, r24	; 0x13
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <savePasswordToEEPROM+0xf4>
     ef8:	88 ec       	ldi	r24, 0xC8	; 200
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9a 8b       	std	Y+18, r25	; 0x12
     efe:	89 8b       	std	Y+17, r24	; 0x11
     f00:	89 89       	ldd	r24, Y+17	; 0x11
     f02:	9a 89       	ldd	r25, Y+18	; 0x12
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <savePasswordToEEPROM+0xe2>
     f08:	9a 8b       	std	Y+18, r25	; 0x12
     f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0c:	8b 89       	ldd	r24, Y+19	; 0x13
     f0e:	9c 89       	ldd	r25, Y+20	; 0x14
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	9c 8b       	std	Y+20, r25	; 0x14
     f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f16:	8b 89       	ldd	r24, Y+19	; 0x13
     f18:	9c 89       	ldd	r25, Y+20	; 0x14
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	69 f7       	brne	.-38     	; 0xef8 <savePasswordToEEPROM+0xd6>
     f1e:	14 c0       	rjmp	.+40     	; 0xf48 <savePasswordToEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f20:	6d 89       	ldd	r22, Y+21	; 0x15
     f22:	7e 89       	ldd	r23, Y+22	; 0x16
     f24:	8f 89       	ldd	r24, Y+23	; 0x17
     f26:	98 8d       	ldd	r25, Y+24	; 0x18
     f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	9c 8b       	std	Y+20, r25	; 0x14
     f32:	8b 8b       	std	Y+19, r24	; 0x13
     f34:	8b 89       	ldd	r24, Y+19	; 0x13
     f36:	9c 89       	ldd	r25, Y+20	; 0x14
     f38:	98 8b       	std	Y+16, r25	; 0x10
     f3a:	8f 87       	std	Y+15, r24	; 0x0f
     f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3e:	98 89       	ldd	r25, Y+16	; 0x10
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <savePasswordToEEPROM+0x11e>
     f44:	98 8b       	std	Y+16, r25	; 0x10
     f46:	8f 87       	std	Y+15, r24	; 0x0f
	return 1;
}

/*---- Save Password to EEPROM ----*/
void savePasswordToEEPROM(uint8* password) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	8d 8f       	std	Y+29, r24	; 0x1d
     f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f50:	85 30       	cpi	r24, 0x05	; 5
     f52:	08 f4       	brcc	.+2      	; 0xf56 <savePasswordToEEPROM+0x134>
     f54:	74 cf       	rjmp	.-280    	; 0xe3e <savePasswordToEEPROM+0x1c>
		EEPROM_writeByte(EEPROM_BASE_ADDRESS + i, password[i]);
		_delay_ms(10); /*---- EEPROM write delay ----*/
	}
	EEPROM_writeByte(EEPROM_FLAG_ADDR, EEPROM_INIT_FLAG); /*---- Set initialization flag ----*/
     f56:	86 e1       	ldi	r24, 0x16	; 22
     f58:	93 e0       	ldi	r25, 0x03	; 3
     f5a:	65 e5       	ldi	r22, 0x55	; 85
     f5c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <EEPROM_writeByte>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e2       	ldi	r26, 0x20	; 32
     f66:	b1 e4       	ldi	r27, 0x41	; 65
     f68:	8b 87       	std	Y+11, r24	; 0x0b
     f6a:	9c 87       	std	Y+12, r25	; 0x0c
     f6c:	ad 87       	std	Y+13, r26	; 0x0d
     f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f70:	6b 85       	ldd	r22, Y+11	; 0x0b
     f72:	7c 85       	ldd	r23, Y+12	; 0x0c
     f74:	8d 85       	ldd	r24, Y+13	; 0x0d
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4a ef       	ldi	r20, 0xFA	; 250
     f7e:	54 e4       	ldi	r21, 0x44	; 68
     f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	8f 83       	std	Y+7, r24	; 0x07
     f8a:	98 87       	std	Y+8, r25	; 0x08
     f8c:	a9 87       	std	Y+9, r26	; 0x09
     f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <savePasswordToEEPROM+0x190>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <savePasswordToEEPROM+0x20e>
	else if (__tmp > 65535)
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	78 85       	ldd	r23, Y+8	; 0x08
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	4c f5       	brge	.+82     	; 0x101c <savePasswordToEEPROM+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <savePasswordToEEPROM+0x1f0>
     ff4:	88 ec       	ldi	r24, 0xC8	; 200
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <savePasswordToEEPROM+0x1de>
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f7       	brne	.-38     	; 0xff4 <savePasswordToEEPROM+0x1d2>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <savePasswordToEEPROM+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <savePasswordToEEPROM+0x21a>
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1044:	6f 96       	adiw	r28, 0x1f	; 31
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <readPasswordFromEEPROM>:

/*---- Read Password from EEPROM ----*/
void readPasswordFromEEPROM(uint8* password) {
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	61 97       	sbiw	r28, 0x11	; 17
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	99 8b       	std	Y+17, r25	; 0x11
    106c:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    106e:	1f 86       	std	Y+15, r1	; 0x0f
    1070:	86 c0       	rjmp	.+268    	; 0x117e <readPasswordFromEEPROM+0x128>
		EEPROM_readByte(EEPROM_BASE_ADDRESS + i, &password[i]);
    1072:	8f 85       	ldd	r24, Y+15	; 0x0f
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	8f 5e       	subi	r24, 0xEF	; 239
    107a:	9c 4f       	sbci	r25, 0xFC	; 252
    107c:	ac 01       	movw	r20, r24
    107e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	88 89       	ldd	r24, Y+16	; 0x10
    1086:	99 89       	ldd	r25, Y+17	; 0x11
    1088:	28 0f       	add	r18, r24
    108a:	39 1f       	adc	r19, r25
    108c:	ca 01       	movw	r24, r20
    108e:	b9 01       	movw	r22, r18
    1090:	0e 94 aa 0a 	call	0x1554	; 0x1554 <EEPROM_readByte>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e2       	ldi	r26, 0x20	; 32
    109a:	b1 e4       	ldi	r27, 0x41	; 65
    109c:	8b 87       	std	Y+11, r24	; 0x0b
    109e:	9c 87       	std	Y+12, r25	; 0x0c
    10a0:	ad 87       	std	Y+13, r26	; 0x0d
    10a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a ef       	ldi	r20, 0xFA	; 250
    10b2:	54 e4       	ldi	r21, 0x44	; 68
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	98 87       	std	Y+8, r25	; 0x08
    10c0:	a9 87       	std	Y+9, r26	; 0x09
    10c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c4:	6f 81       	ldd	r22, Y+7	; 0x07
    10c6:	78 85       	ldd	r23, Y+8	; 0x08
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d8:	88 23       	and	r24, r24
    10da:	2c f4       	brge	.+10     	; 0x10e6 <readPasswordFromEEPROM+0x90>
		__ticks = 1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	9e 83       	std	Y+6, r25	; 0x06
    10e2:	8d 83       	std	Y+5, r24	; 0x05
    10e4:	3f c0       	rjmp	.+126    	; 0x1164 <readPasswordFromEEPROM+0x10e>
	else if (__tmp > 65535)
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	57 e4       	ldi	r21, 0x47	; 71
    10f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fa:	18 16       	cp	r1, r24
    10fc:	4c f5       	brge	.+82     	; 0x1150 <readPasswordFromEEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1100:	7c 85       	ldd	r23, Y+12	; 0x0c
    1102:	8d 85       	ldd	r24, Y+13	; 0x0d
    1104:	9e 85       	ldd	r25, Y+14	; 0x0e
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e2       	ldi	r20, 0x20	; 32
    110c:	51 e4       	ldi	r21, 0x41	; 65
    110e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	bc 01       	movw	r22, r24
    1118:	cd 01       	movw	r24, r26
    111a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	0f c0       	rjmp	.+30     	; 0x1146 <readPasswordFromEEPROM+0xf0>
    1128:	88 ec       	ldi	r24, 0xC8	; 200
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <readPasswordFromEEPROM+0xde>
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	69 f7       	brne	.-38     	; 0x1128 <readPasswordFromEEPROM+0xd2>
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <readPasswordFromEEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1150:	6f 81       	ldd	r22, Y+7	; 0x07
    1152:	78 85       	ldd	r23, Y+8	; 0x08
    1154:	89 85       	ldd	r24, Y+9	; 0x09
    1156:	9a 85       	ldd	r25, Y+10	; 0x0a
    1158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <readPasswordFromEEPROM+0x11a>
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}

/*---- Read Password from EEPROM ----*/
void readPasswordFromEEPROM(uint8* password) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1178:	8f 85       	ldd	r24, Y+15	; 0x0f
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	8f 87       	std	Y+15, r24	; 0x0f
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1180:	85 30       	cpi	r24, 0x05	; 5
    1182:	08 f4       	brcc	.+2      	; 0x1186 <readPasswordFromEEPROM+0x130>
    1184:	76 cf       	rjmp	.-276    	; 0x1072 <readPasswordFromEEPROM+0x1c>
		EEPROM_readByte(EEPROM_BASE_ADDRESS + i, &password[i]);
		_delay_ms(10); /*---- EEPROM read delay ----*/
	}
}
    1186:	61 96       	adiw	r28, 0x11	; 17
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <Door_Control_Sequence>:

/*---- Door Control Sequence ----*/
void Door_Control_Sequence(void) {
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	/*---- Phase 1: Unlocking ----*/
	Motor_rotate(MOTOR_CW, 100); /*---- Rotate motor clockwise ----*/
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	64 e6       	ldi	r22, 0x64	; 100
    11a4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Motor_rotate>
	Control_delaySeconds(LOCKING_TIME);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Control_delaySeconds>
	Motor_rotate(MOTOR_STOP, 0);
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Motor_rotate>

	/*---- Check for motion detection ----*/
	if(PIR_getState() == LOGIC_HIGH) {
    11b6:	0e 94 42 0a 	call	0x1484	; 0x1484 <PIR_getState>
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	39 f4       	brne	.+14     	; 0x11cc <Door_Control_Sequence+0x34>
		UART_sendByte(RESPONSE_PIR_DETECTED);
    11be:	85 e5       	ldi	r24, 0x55	; 85
    11c0:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
		while (PIR_getState() == LOGIC_HIGH){} /*---- Wait while motion detected ----*/
    11c4:	0e 94 42 0a 	call	0x1484	; 0x1484 <PIR_getState>
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	e1 f3       	breq	.-8      	; 0x11c4 <Door_Control_Sequence+0x2c>
	}
	UART_sendByte(RESPONSE_PIR_NOT_DETECTED);
    11cc:	86 e6       	ldi	r24, 0x66	; 102
    11ce:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>

	/*---- Phase 2: Locking ----*/
	Motor_rotate(MOTOR_ACW, 100); /*---- Rotate motor counter-clockwise ----*/
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	64 e6       	ldi	r22, 0x64	; 100
    11d6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Motor_rotate>
	Control_delaySeconds(LOCKING_TIME);
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Control_delaySeconds>

	/*---- Final Phase: Stop Motor ----*/
	Motor_rotate(MOTOR_STOP, 0);
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Motor_rotate>
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <main>:
/*---- Global Variables ----*/
uint8 failedAttempts = 0; /*---- Track failed password attempts ----*/
uint8 command; /*---- Current UART command ----*/

/*---- Main Application Entry Point ----*/
int main() {
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	61 97       	sbiw	r28, 0x11	; 17
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
	/*---- Initialize Peripherals ----*/
	UART_init(&uart_config);
    1202:	8d e6       	ldi	r24, 0x6D	; 109
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <UART_init>
	Motor_init();
    120a:	0e 94 cb 09 	call	0x1396	; 0x1396 <Motor_init>
	Buzzer_init();
    120e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	PIR_init();
    1212:	0e 94 36 0a 	call	0x146c	; 0x146c <PIR_init>
	TWI_init(&twi_config);
    1216:	88 e6       	ldi	r24, 0x68	; 104
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <TWI_init>
	Enable_Global_Interrupt();
    121e:	af e5       	ldi	r26, 0x5F	; 95
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e5       	ldi	r30, 0x5F	; 95
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 68       	ori	r24, 0x80	; 128
    122a:	8c 93       	st	X, r24
	/*---- Password Storage Variables ----*/
	uint8 storedPassword[PASSWORD_LENGTH], receivedPassword[PASSWORD_LENGTH], EEPROMPassword[PASSWORD_LENGTH];

	/*---- Main Command Processing Loop ----*/
	while (1) {
		command = UART_recieveByte();
    122c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    1230:	80 93 8a 00 	sts	0x008A, r24

		switch (command) {
    1234:	80 91 8a 00 	lds	r24, 0x008A
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	39 8b       	std	Y+17, r19	; 0x11
    123e:	28 8b       	std	Y+16, r18	; 0x10
    1240:	88 89       	ldd	r24, Y+16	; 0x10
    1242:	99 89       	ldd	r25, Y+17	; 0x11
    1244:	84 30       	cpi	r24, 0x04	; 4
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <main+0x5e>
    124a:	69 c0       	rjmp	.+210    	; 0x131e <main+0x130>
    124c:	28 89       	ldd	r18, Y+16	; 0x10
    124e:	39 89       	ldd	r19, Y+17	; 0x11
    1250:	25 30       	cpi	r18, 0x05	; 5
    1252:	31 05       	cpc	r19, r1
    1254:	5c f4       	brge	.+22     	; 0x126c <main+0x7e>
    1256:	88 89       	ldd	r24, Y+16	; 0x10
    1258:	99 89       	ldd	r25, Y+17	; 0x11
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	b1 f0       	breq	.+44     	; 0x128c <main+0x9e>
    1260:	28 89       	ldd	r18, Y+16	; 0x10
    1262:	39 89       	ldd	r19, Y+17	; 0x11
    1264:	23 30       	cpi	r18, 0x03	; 3
    1266:	31 05       	cpc	r19, r1
    1268:	79 f1       	breq	.+94     	; 0x12c8 <main+0xda>
    126a:	e0 cf       	rjmp	.-64     	; 0x122c <main+0x3e>
    126c:	88 89       	ldd	r24, Y+16	; 0x10
    126e:	99 89       	ldd	r25, Y+17	; 0x11
    1270:	86 30       	cpi	r24, 0x06	; 6
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <main+0x8a>
    1276:	49 c0       	rjmp	.+146    	; 0x130a <main+0x11c>
    1278:	28 89       	ldd	r18, Y+16	; 0x10
    127a:	39 89       	ldd	r19, Y+17	; 0x11
    127c:	27 30       	cpi	r18, 0x07	; 7
    127e:	31 05       	cpc	r19, r1
    1280:	a9 f6       	brne	.-86     	; 0x122c <main+0x3e>
		/*---- Check Initialization Status ----*/
		case CMD_CHECK_INIT:
			UART_sendByte(IsPasswordStored());
    1282:	0e 94 1f 06 	call	0xc3e	; 0xc3e <IsPasswordStored>
    1286:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
    128a:	d0 cf       	rjmp	.-96     	; 0x122c <main+0x3e>
			break;

			/*---- Password Creation Command ----*/
		case CMD_CREATE_PASSWORD:
			receivePassword(receivedPassword);
    128c:	ce 01       	movw	r24, r28
    128e:	06 96       	adiw	r24, 0x06	; 6
    1290:	0e 94 b3 06 	call	0xd66	; 0xd66 <receivePassword>
			receivePassword(storedPassword); /*---- Reuse buffer for confirmation ----*/
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	0e 94 b3 06 	call	0xd66	; 0xd66 <receivePassword>

			if (comparePasswords(receivedPassword, storedPassword)) {
    129c:	ce 01       	movw	r24, r28
    129e:	06 96       	adiw	r24, 0x06	; 6
    12a0:	9e 01       	movw	r18, r28
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	b9 01       	movw	r22, r18
    12a8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <comparePasswords>
    12ac:	88 23       	and	r24, r24
    12ae:	41 f0       	breq	.+16     	; 0x12c0 <main+0xd2>
				savePasswordToEEPROM(receivedPassword);
    12b0:	ce 01       	movw	r24, r28
    12b2:	06 96       	adiw	r24, 0x06	; 6
    12b4:	0e 94 11 07 	call	0xe22	; 0xe22 <savePasswordToEEPROM>
				UART_sendByte(RESPONSE_OK);
    12b8:	8a ea       	ldi	r24, 0xAA	; 170
    12ba:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
    12be:	b6 cf       	rjmp	.-148    	; 0x122c <main+0x3e>
			} else {
				UART_sendByte(RESPONSE_ERROR);
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
    12c6:	b2 cf       	rjmp	.-156    	; 0x122c <main+0x3e>
			}
			break;

			/*---- Door Unlock Command ----*/
		case CMD_OPEN_DOOR:
			receivePassword(receivedPassword);
    12c8:	ce 01       	movw	r24, r28
    12ca:	06 96       	adiw	r24, 0x06	; 6
    12cc:	0e 94 b3 06 	call	0xd66	; 0xd66 <receivePassword>
			readPasswordFromEEPROM(EEPROMPassword);
    12d0:	ce 01       	movw	r24, r28
    12d2:	0b 96       	adiw	r24, 0x0b	; 11
    12d4:	0e 94 2b 08 	call	0x1056	; 0x1056 <readPasswordFromEEPROM>

			if (comparePasswords(receivedPassword, EEPROMPassword)) {
    12d8:	ce 01       	movw	r24, r28
    12da:	06 96       	adiw	r24, 0x06	; 6
    12dc:	9e 01       	movw	r18, r28
    12de:	25 5f       	subi	r18, 0xF5	; 245
    12e0:	3f 4f       	sbci	r19, 0xFF	; 255
    12e2:	b9 01       	movw	r22, r18
    12e4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <comparePasswords>
    12e8:	88 23       	and	r24, r24
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <main+0x10a>
				UART_sendByte(RESPONSE_OK);
    12ec:	8a ea       	ldi	r24, 0xAA	; 170
    12ee:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
				Door_Control_Sequence();
    12f2:	0e 94 cc 08 	call	0x1198	; 0x1198 <Door_Control_Sequence>
    12f6:	9a cf       	rjmp	.-204    	; 0x122c <main+0x3e>
			} else {
				UART_sendByte(RESPONSE_ERROR);
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
				failedAttempts++;
    12fe:	80 91 7d 00 	lds	r24, 0x007D
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	80 93 7d 00 	sts	0x007D, r24
    1308:	91 cf       	rjmp	.-222    	; 0x122c <main+0x3e>
			}
			break;

			/*---- System Lockout Command ----*/
		case CMD_LOCK_SYSTEM:
			Buzzer_on();
    130a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
			Control_delaySeconds(LOCKOUT_TIME);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Control_delaySeconds>
			Buzzer_off();
    1314:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
			failedAttempts = 0; /*---- Reset attempt counter ----*/
    1318:	10 92 7d 00 	sts	0x007D, r1
    131c:	87 cf       	rjmp	.-242    	; 0x122c <main+0x3e>
			break;

			/*---- Password Change Command ----*/
		case CMD_CHANGE_PASSWORD:
			receivePassword(receivedPassword);
    131e:	ce 01       	movw	r24, r28
    1320:	06 96       	adiw	r24, 0x06	; 6
    1322:	0e 94 b3 06 	call	0xd66	; 0xd66 <receivePassword>
			readPasswordFromEEPROM(EEPROMPassword);
    1326:	ce 01       	movw	r24, r28
    1328:	0b 96       	adiw	r24, 0x0b	; 11
    132a:	0e 94 2b 08 	call	0x1056	; 0x1056 <readPasswordFromEEPROM>

			if (comparePasswords(receivedPassword, EEPROMPassword)) {
    132e:	ce 01       	movw	r24, r28
    1330:	06 96       	adiw	r24, 0x06	; 6
    1332:	9e 01       	movw	r18, r28
    1334:	25 5f       	subi	r18, 0xF5	; 245
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	b9 01       	movw	r22, r18
    133a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <comparePasswords>
    133e:	88 23       	and	r24, r24
    1340:	09 f1       	breq	.+66     	; 0x1384 <main+0x196>
				UART_sendByte(RESPONSE_OK);
    1342:	8a ea       	ldi	r24, 0xAA	; 170
    1344:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
				receivePassword(receivedPassword);
    1348:	ce 01       	movw	r24, r28
    134a:	06 96       	adiw	r24, 0x06	; 6
    134c:	0e 94 b3 06 	call	0xd66	; 0xd66 <receivePassword>
				receivePassword(storedPassword);
    1350:	ce 01       	movw	r24, r28
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	0e 94 b3 06 	call	0xd66	; 0xd66 <receivePassword>

				if (comparePasswords(receivedPassword, storedPassword)) {
    1358:	ce 01       	movw	r24, r28
    135a:	06 96       	adiw	r24, 0x06	; 6
    135c:	9e 01       	movw	r18, r28
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	b9 01       	movw	r22, r18
    1364:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <comparePasswords>
    1368:	88 23       	and	r24, r24
    136a:	41 f0       	breq	.+16     	; 0x137c <main+0x18e>
					savePasswordToEEPROM(receivedPassword);
    136c:	ce 01       	movw	r24, r28
    136e:	06 96       	adiw	r24, 0x06	; 6
    1370:	0e 94 11 07 	call	0xe22	; 0xe22 <savePasswordToEEPROM>
					UART_sendByte(RESPONSE_OK);
    1374:	8a ea       	ldi	r24, 0xAA	; 170
    1376:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
    137a:	58 cf       	rjmp	.-336    	; 0x122c <main+0x3e>
				} else {
					UART_sendByte(RESPONSE_ERROR);
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
    1382:	54 cf       	rjmp	.-344    	; 0x122c <main+0x3e>
				}
			} else {
				UART_sendByte(RESPONSE_ERROR);
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
				failedAttempts++;
    138a:	80 91 7d 00 	lds	r24, 0x007D
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	80 93 7d 00 	sts	0x007D, r24
    1394:	4b cf       	rjmp	.-362    	; 0x122c <main+0x3e>

00001396 <Motor_init>:
#include "Motor.h"
#include "gpio.h"
#include "PWM.h"
#include "std_types.h"

void Motor_init(void) {
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    /* Set motor control pins as output */
    GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	66 e0       	ldi	r22, 0x06	; 6
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	67 e0       	ldi	r22, 0x07	; 7
    13ac:	41 e0       	ldi	r20, 0x01	; 1
    13ae:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_setupPinDirection>

    /* Stop the motor initially */
    GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID,LOGIC_LOW);
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	66 e0       	ldi	r22, 0x06	; 6
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	67 e0       	ldi	r22, 0x07	; 7
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
}
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <Motor_rotate>:

void Motor_rotate(DcMotor_State state, uint8 speed) {
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <Motor_rotate+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <Motor_rotate+0x8>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	6a 83       	std	Y+2, r22	; 0x02
    /* Adjust motor direction */
    switch (state) {
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3c 83       	std	Y+4, r19	; 0x04
    13e4:	2b 83       	std	Y+3, r18	; 0x03
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	a1 f0       	breq	.+40     	; 0x1418 <Motor_rotate+0x4c>
    13f0:	2b 81       	ldd	r18, Y+3	; 0x03
    13f2:	3c 81       	ldd	r19, Y+4	; 0x04
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	d1 f0       	breq	.+52     	; 0x142e <Motor_rotate+0x62>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	09 f5       	brne	.+66     	; 0x1444 <Motor_rotate+0x78>
        case MOTOR_CW:
            GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1402:	83 e0       	ldi	r24, 0x03	; 3
    1404:	66 e0       	ldi	r22, 0x06	; 6
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
            GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	67 e0       	ldi	r22, 0x07	; 7
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    1416:	20 c0       	rjmp	.+64     	; 0x1458 <Motor_rotate+0x8c>
            break;
        case MOTOR_ACW:
            GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	66 e0       	ldi	r22, 0x06	; 6
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
            GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	67 e0       	ldi	r22, 0x07	; 7
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    142c:	15 c0       	rjmp	.+42     	; 0x1458 <Motor_rotate+0x8c>
            break;
        case MOTOR_STOP:
            GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	66 e0       	ldi	r22, 0x06	; 6
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
            GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	67 e0       	ldi	r22, 0x07	; 7
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    1442:	0a c0       	rjmp	.+20     	; 0x1458 <Motor_rotate+0x8c>
            break;
        default:
            /* Handle unexpected state - Stop the motor as a safe fallback */
            GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	66 e0       	ldi	r22, 0x06	; 6
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
            GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	67 e0       	ldi	r22, 0x07	; 7
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
            break;
    }

    /* Set motor speed using PWM (0 to 100%) */
    PWM_Timer0_Start(speed);
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	0e 94 4d 0a 	call	0x149a	; 0x149a <PWM_Timer0_Start>
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <PIR_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PIR_init(void) {
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    /* Configure PIR pin as input (no pull-up needed for most PIR sensors) */
    GPIO_setupPinDirection(PIR_PORT_ID, PIR_PIN_ID, PIN_INPUT);
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_setupPinDirection>
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <PIR_getState>:

uint8 PIR_getState(void) {
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the PIR's digital output */
    return GPIO_readPin(PIR_PORT_ID, PIR_PIN_ID);
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	62 e0       	ldi	r22, 0x02	; 2
    1490:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_readPin>
}
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <PWM_Timer0_Start>:
#include "PWM.h"
#include "common_macros.h"
#include "std_types.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TIMER_INITIAL_VALUE; /* Set Timer Initial Value to 0*/
    14a6:	e2 e5       	ldi	r30, 0x52	; 82
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	10 82       	st	Z, r1

	OCR0  = duty_cycle; /* Set Compare Value*/
    14ac:	ec e5       	ldi	r30, 0x5C	; 92
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	80 83       	st	Z, r24

	SET_BIT(DDRB,PB3); /* Configure PB3/OC0 as output pin*/
    14b4:	a7 e3       	ldi	r26, 0x37	; 55
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e7 e3       	ldi	r30, 0x37	; 55
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 60       	ori	r24, 0x08	; 8
    14c0:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    14c2:	e3 e5       	ldi	r30, 0x53	; 83
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a e6       	ldi	r24, 0x6A	; 106
    14c8:	80 83       	st	Z, r24
}
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <EEPROM_writeByte+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <EEPROM_writeByte+0x8>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14e4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14e8:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <EEPROM_writeByte+0x22>
        return ERROR;
    14f0:	1c 82       	std	Y+4, r1	; 0x04
    14f2:	28 c0       	rjmp	.+80     	; 0x1544 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	80 70       	andi	r24, 0x00	; 0
    14fa:	97 70       	andi	r25, 0x07	; 7
    14fc:	88 0f       	add	r24, r24
    14fe:	89 2f       	mov	r24, r25
    1500:	88 1f       	adc	r24, r24
    1502:	99 0b       	sbc	r25, r25
    1504:	91 95       	neg	r25
    1506:	80 6a       	ori	r24, 0xA0	; 160
    1508:	0e 94 d6 16 	call	0x2dac	; 0x2dac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    150c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    1510:	88 31       	cpi	r24, 0x18	; 24
    1512:	11 f0       	breq	.+4      	; 0x1518 <EEPROM_writeByte+0x46>
        return ERROR; 
    1514:	1c 82       	std	Y+4, r1	; 0x04
    1516:	16 c0       	rjmp	.+44     	; 0x1544 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	0e 94 d6 16 	call	0x2dac	; 0x2dac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    151e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    1522:	88 32       	cpi	r24, 0x28	; 40
    1524:	11 f0       	breq	.+4      	; 0x152a <EEPROM_writeByte+0x58>
        return ERROR;
    1526:	1c 82       	std	Y+4, r1	; 0x04
    1528:	0d c0       	rjmp	.+26     	; 0x1544 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	0e 94 d6 16 	call	0x2dac	; 0x2dac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1530:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    1534:	88 32       	cpi	r24, 0x28	; 40
    1536:	11 f0       	breq	.+4      	; 0x153c <EEPROM_writeByte+0x6a>
        return ERROR;
    1538:	1c 82       	std	Y+4, r1	; 0x04
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    153c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <TWI_stop>
	
    return SUCCESS;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	8c 83       	std	Y+4, r24	; 0x04
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <EEPROM_readByte+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <EEPROM_readByte+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	7c 83       	std	Y+4, r23	; 0x04
    1568:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    156a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    156e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    1572:	88 30       	cpi	r24, 0x08	; 8
    1574:	11 f0       	breq	.+4      	; 0x157a <EEPROM_readByte+0x26>
        return ERROR;
    1576:	1d 82       	std	Y+5, r1	; 0x05
    1578:	44 c0       	rjmp	.+136    	; 0x1602 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	80 70       	andi	r24, 0x00	; 0
    1580:	97 70       	andi	r25, 0x07	; 7
    1582:	88 0f       	add	r24, r24
    1584:	89 2f       	mov	r24, r25
    1586:	88 1f       	adc	r24, r24
    1588:	99 0b       	sbc	r25, r25
    158a:	91 95       	neg	r25
    158c:	80 6a       	ori	r24, 0xA0	; 160
    158e:	0e 94 d6 16 	call	0x2dac	; 0x2dac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1592:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    1596:	88 31       	cpi	r24, 0x18	; 24
    1598:	11 f0       	breq	.+4      	; 0x159e <EEPROM_readByte+0x4a>
        return ERROR;
    159a:	1d 82       	std	Y+5, r1	; 0x05
    159c:	32 c0       	rjmp	.+100    	; 0x1602 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	0e 94 d6 16 	call	0x2dac	; 0x2dac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15a4:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    15a8:	88 32       	cpi	r24, 0x28	; 40
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <EEPROM_readByte+0x5c>
        return ERROR;
    15ac:	1d 82       	std	Y+5, r1	; 0x05
    15ae:	29 c0       	rjmp	.+82     	; 0x1602 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15b0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15b4:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    15b8:	80 31       	cpi	r24, 0x10	; 16
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <EEPROM_readByte+0x6c>
        return ERROR;
    15bc:	1d 82       	std	Y+5, r1	; 0x05
    15be:	21 c0       	rjmp	.+66     	; 0x1602 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	80 70       	andi	r24, 0x00	; 0
    15c6:	97 70       	andi	r25, 0x07	; 7
    15c8:	88 0f       	add	r24, r24
    15ca:	89 2f       	mov	r24, r25
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 0b       	sbc	r25, r25
    15d0:	91 95       	neg	r25
    15d2:	81 6a       	ori	r24, 0xA1	; 161
    15d4:	0e 94 d6 16 	call	0x2dac	; 0x2dac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15d8:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    15dc:	80 34       	cpi	r24, 0x40	; 64
    15de:	11 f0       	breq	.+4      	; 0x15e4 <EEPROM_readByte+0x90>
        return ERROR;
    15e0:	1d 82       	std	Y+5, r1	; 0x05
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    15e4:	0e 94 00 17 	call	0x2e00	; 0x2e00 <TWI_readByteWithNACK>
    15e8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ea:	fc 81       	ldd	r31, Y+4	; 0x04
    15ec:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    15ee:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TWI_getStatus>
    15f2:	88 35       	cpi	r24, 0x58	; 88
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_readByte+0xa6>
        return ERROR;
    15f6:	1d 82       	std	Y+5, r1	; 0x05
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    15fa:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <TWI_stop>

    return SUCCESS;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <GPIO_setupPinDirection+0x6>
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_setupPinDirection+0x8>
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02
    1626:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	08 f0       	brcs	.+2      	; 0x1630 <GPIO_setupPinDirection+0x1c>
    162e:	d5 c0       	rjmp	.+426    	; 0x17da <GPIO_setupPinDirection+0x1c6>
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	08 f0       	brcs	.+2      	; 0x1638 <GPIO_setupPinDirection+0x24>
    1636:	d1 c0       	rjmp	.+418    	; 0x17da <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3d 83       	std	Y+5, r19	; 0x05
    1640:	2c 83       	std	Y+4, r18	; 0x04
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	09 f4       	brne	.+2      	; 0x164e <GPIO_setupPinDirection+0x3a>
    164c:	43 c0       	rjmp	.+134    	; 0x16d4 <GPIO_setupPinDirection+0xc0>
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	3d 81       	ldd	r19, Y+5	; 0x05
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	2c f4       	brge	.+10     	; 0x1662 <GPIO_setupPinDirection+0x4e>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	71 f0       	breq	.+28     	; 0x167c <GPIO_setupPinDirection+0x68>
    1660:	bc c0       	rjmp	.+376    	; 0x17da <GPIO_setupPinDirection+0x1c6>
    1662:	2c 81       	ldd	r18, Y+4	; 0x04
    1664:	3d 81       	ldd	r19, Y+5	; 0x05
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <GPIO_setupPinDirection+0x5a>
    166c:	5f c0       	rjmp	.+190    	; 0x172c <GPIO_setupPinDirection+0x118>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	09 f4       	brne	.+2      	; 0x167a <GPIO_setupPinDirection+0x66>
    1678:	85 c0       	rjmp	.+266    	; 0x1784 <GPIO_setupPinDirection+0x170>
    167a:	af c0       	rjmp	.+350    	; 0x17da <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	a1 f4       	brne	.+40     	; 0x16aa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1682:	aa e3       	ldi	r26, 0x3A	; 58
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	ea e3       	ldi	r30, 0x3A	; 58
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_setupPinDirection+0x8c>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_setupPinDirection+0x88>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	98 c0       	rjmp	.+304    	; 0x17da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16aa:	aa e3       	ldi	r26, 0x3A	; 58
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ea e3       	ldi	r30, 0x3A	; 58
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_setupPinDirection+0xb4>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_setupPinDirection+0xb0>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	83 c0       	rjmp	.+262    	; 0x17da <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	a1 f4       	brne	.+40     	; 0x1702 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16da:	a7 e3       	ldi	r26, 0x37	; 55
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e7 e3       	ldi	r30, 0x37	; 55
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_setupPinDirection+0xe4>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_setupPinDirection+0xe0>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	6c c0       	rjmp	.+216    	; 0x17da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1702:	a7 e3       	ldi	r26, 0x37	; 55
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e3       	ldi	r30, 0x37	; 55
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_setupPinDirection+0x10c>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_setupPinDirection+0x108>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	57 c0       	rjmp	.+174    	; 0x17da <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	a1 f4       	brne	.+40     	; 0x175a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1732:	a4 e3       	ldi	r26, 0x34	; 52
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e4 e3       	ldi	r30, 0x34	; 52
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_setupPinDirection+0x13c>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_setupPinDirection+0x138>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	40 c0       	rjmp	.+128    	; 0x17da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    175a:	a4 e3       	ldi	r26, 0x34	; 52
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e4 e3       	ldi	r30, 0x34	; 52
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_setupPinDirection+0x164>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_setupPinDirection+0x160>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	2b c0       	rjmp	.+86     	; 0x17da <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	a1 f4       	brne	.+40     	; 0x17b2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    178a:	a1 e3       	ldi	r26, 0x31	; 49
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e1 e3       	ldi	r30, 0x31	; 49
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_setupPinDirection+0x194>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_setupPinDirection+0x190>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17b2:	a1 e3       	ldi	r26, 0x31	; 49
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <GPIO_setupPinDirection+0x1bc>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <GPIO_setupPinDirection+0x1b8>
    17d4:	80 95       	com	r24
    17d6:	84 23       	and	r24, r20
    17d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <GPIO_writePin+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <GPIO_writePin+0x8>
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	6a 83       	std	Y+2, r22	; 0x02
    17fc:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	88 30       	cpi	r24, 0x08	; 8
    1802:	08 f0       	brcs	.+2      	; 0x1806 <GPIO_writePin+0x1c>
    1804:	d5 c0       	rjmp	.+426    	; 0x19b0 <GPIO_writePin+0x1c6>
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	08 f0       	brcs	.+2      	; 0x180e <GPIO_writePin+0x24>
    180c:	d1 c0       	rjmp	.+418    	; 0x19b0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3d 83       	std	Y+5, r19	; 0x05
    1816:	2c 83       	std	Y+4, r18	; 0x04
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	9d 81       	ldd	r25, Y+5	; 0x05
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 05       	cpc	r25, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <GPIO_writePin+0x3a>
    1822:	43 c0       	rjmp	.+134    	; 0x18aa <GPIO_writePin+0xc0>
    1824:	2c 81       	ldd	r18, Y+4	; 0x04
    1826:	3d 81       	ldd	r19, Y+5	; 0x05
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	2c f4       	brge	.+10     	; 0x1838 <GPIO_writePin+0x4e>
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	71 f0       	breq	.+28     	; 0x1852 <GPIO_writePin+0x68>
    1836:	bc c0       	rjmp	.+376    	; 0x19b0 <GPIO_writePin+0x1c6>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <GPIO_writePin+0x5a>
    1842:	5f c0       	rjmp	.+190    	; 0x1902 <GPIO_writePin+0x118>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <GPIO_writePin+0x66>
    184e:	85 c0       	rjmp	.+266    	; 0x195a <GPIO_writePin+0x170>
    1850:	af c0       	rjmp	.+350    	; 0x19b0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value)
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	88 23       	and	r24, r24
    1856:	a1 f0       	breq	.+40     	; 0x1880 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1858:	ab e3       	ldi	r26, 0x3B	; 59
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	eb e3       	ldi	r30, 0x3B	; 59
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <GPIO_writePin+0x8c>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <GPIO_writePin+0x88>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	98 c0       	rjmp	.+304    	; 0x19b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1880:	aa e3       	ldi	r26, 0x3A	; 58
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	ea e3       	ldi	r30, 0x3A	; 58
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_writePin+0xb4>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_writePin+0xb0>
    18a2:	80 95       	com	r24
    18a4:	84 23       	and	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	83 c0       	rjmp	.+262    	; 0x19b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value)
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 23       	and	r24, r24
    18ae:	a1 f0       	breq	.+40     	; 0x18d8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18b0:	a8 e3       	ldi	r26, 0x38	; 56
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e8 e3       	ldi	r30, 0x38	; 56
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <GPIO_writePin+0xe4>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <GPIO_writePin+0xe0>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	6c c0       	rjmp	.+216    	; 0x19b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18d8:	a8 e3       	ldi	r26, 0x38	; 56
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e8 e3       	ldi	r30, 0x38	; 56
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_writePin+0x10c>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_writePin+0x108>
    18fa:	80 95       	com	r24
    18fc:	84 23       	and	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	57 c0       	rjmp	.+174    	; 0x19b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value)
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 23       	and	r24, r24
    1906:	a1 f0       	breq	.+40     	; 0x1930 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1908:	a5 e3       	ldi	r26, 0x35	; 53
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e3       	ldi	r30, 0x35	; 53
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <GPIO_writePin+0x13c>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <GPIO_writePin+0x138>
    192a:	84 2b       	or	r24, r20
    192c:	8c 93       	st	X, r24
    192e:	40 c0       	rjmp	.+128    	; 0x19b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1930:	a5 e3       	ldi	r26, 0x35	; 53
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e5 e3       	ldi	r30, 0x35	; 53
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_writePin+0x164>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_writePin+0x160>
    1952:	80 95       	com	r24
    1954:	84 23       	and	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	2b c0       	rjmp	.+86     	; 0x19b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value)
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	88 23       	and	r24, r24
    195e:	a1 f0       	breq	.+40     	; 0x1988 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1960:	a2 e3       	ldi	r26, 0x32	; 50
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e2 e3       	ldi	r30, 0x32	; 50
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <GPIO_writePin+0x194>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <GPIO_writePin+0x190>
    1982:	84 2b       	or	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1988:	a2 e3       	ldi	r26, 0x32	; 50
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e2 e3       	ldi	r30, 0x32	; 50
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <GPIO_writePin+0x1bc>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <GPIO_writePin+0x1b8>
    19aa:	80 95       	com	r24
    19ac:	84 23       	and	r24, r20
    19ae:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <GPIO_readPin+0x6>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <GPIO_readPin+0x8>
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <GPIO_readPin+0xa>
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	8a 83       	std	Y+2, r24	; 0x02
    19d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	88 30       	cpi	r24, 0x08	; 8
    19d6:	18 f4       	brcc	.+6      	; 0x19de <GPIO_readPin+0x1e>
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	10 f0       	brcs	.+4      	; 0x19e2 <GPIO_readPin+0x22>
	{
		return 0;
    19de:	1e 82       	std	Y+6, r1	; 0x06
    19e0:	82 c0       	rjmp	.+260    	; 0x1ae6 <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3d 83       	std	Y+5, r19	; 0x05
    19ea:	2c 83       	std	Y+4, r18	; 0x04
    19ec:	4c 81       	ldd	r20, Y+4	; 0x04
    19ee:	5d 81       	ldd	r21, Y+5	; 0x05
    19f0:	41 30       	cpi	r20, 0x01	; 1
    19f2:	51 05       	cpc	r21, r1
    19f4:	79 f1       	breq	.+94     	; 0x1a54 <GPIO_readPin+0x94>
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	82 30       	cpi	r24, 0x02	; 2
    19fc:	91 05       	cpc	r25, r1
    19fe:	34 f4       	brge	.+12     	; 0x1a0c <GPIO_readPin+0x4c>
    1a00:	2c 81       	ldd	r18, Y+4	; 0x04
    1a02:	3d 81       	ldd	r19, Y+5	; 0x05
    1a04:	21 15       	cp	r18, r1
    1a06:	31 05       	cpc	r19, r1
    1a08:	69 f0       	breq	.+26     	; 0x1a24 <GPIO_readPin+0x64>
    1a0a:	6b c0       	rjmp	.+214    	; 0x1ae2 <GPIO_readPin+0x122>
    1a0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a10:	42 30       	cpi	r20, 0x02	; 2
    1a12:	51 05       	cpc	r21, r1
    1a14:	b9 f1       	breq	.+110    	; 0x1a84 <GPIO_readPin+0xc4>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	83 30       	cpi	r24, 0x03	; 3
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <GPIO_readPin+0x62>
    1a20:	49 c0       	rjmp	.+146    	; 0x1ab4 <GPIO_readPin+0xf4>
    1a22:	5f c0       	rjmp	.+190    	; 0x1ae2 <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a24:	e9 e3       	ldi	r30, 0x39	; 57
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a9 01       	movw	r20, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <GPIO_readPin+0x7c>
    1a38:	55 95       	asr	r21
    1a3a:	47 95       	ror	r20
    1a3c:	8a 95       	dec	r24
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <GPIO_readPin+0x78>
    1a40:	ca 01       	movw	r24, r20
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	88 23       	and	r24, r24
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <GPIO_readPin+0x90>
			{
				value = LOGIC_HIGH;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	49 c0       	rjmp	.+146    	; 0x1ae2 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1a50:	19 82       	std	Y+1, r1	; 0x01
    1a52:	47 c0       	rjmp	.+142    	; 0x1ae2 <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a54:	e6 e3       	ldi	r30, 0x36	; 54
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a9 01       	movw	r20, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <GPIO_readPin+0xac>
    1a68:	55 95       	asr	r21
    1a6a:	47 95       	ror	r20
    1a6c:	8a 95       	dec	r24
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <GPIO_readPin+0xa8>
    1a70:	ca 01       	movw	r24, r20
    1a72:	81 70       	andi	r24, 0x01	; 1
    1a74:	90 70       	andi	r25, 0x00	; 0
    1a76:	88 23       	and	r24, r24
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <GPIO_readPin+0xc0>
			{
				value = LOGIC_HIGH;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	31 c0       	rjmp	.+98     	; 0x1ae2 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1a80:	19 82       	std	Y+1, r1	; 0x01
    1a82:	2f c0       	rjmp	.+94     	; 0x1ae2 <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a84:	e3 e3       	ldi	r30, 0x33	; 51
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a9 01       	movw	r20, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <GPIO_readPin+0xdc>
    1a98:	55 95       	asr	r21
    1a9a:	47 95       	ror	r20
    1a9c:	8a 95       	dec	r24
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <GPIO_readPin+0xd8>
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	81 70       	andi	r24, 0x01	; 1
    1aa4:	90 70       	andi	r25, 0x00	; 0
    1aa6:	88 23       	and	r24, r24
    1aa8:	19 f0       	breq	.+6      	; 0x1ab0 <GPIO_readPin+0xf0>
			{
				value = LOGIC_HIGH;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	19 c0       	rjmp	.+50     	; 0x1ae2 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
    1ab2:	17 c0       	rjmp	.+46     	; 0x1ae2 <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ab4:	e0 e3       	ldi	r30, 0x30	; 48
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_readPin+0x10c>
    1ac8:	55 95       	asr	r21
    1aca:	47 95       	ror	r20
    1acc:	8a 95       	dec	r24
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_readPin+0x108>
    1ad0:	ca 01       	movw	r24, r20
    1ad2:	81 70       	andi	r24, 0x01	; 1
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	88 23       	and	r24, r24
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <GPIO_readPin+0x120>
			{
				value = LOGIC_HIGH;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1ae2:	59 81       	ldd	r21, Y+1	; 0x01
    1ae4:	5e 83       	std	Y+6, r21	; 0x06
    1ae6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1ae8:	26 96       	adiw	r28, 0x06	; 6
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <GPIO_setupPortDirection+0x6>
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <GPIO_setupPortDirection+0x8>
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	90 f5       	brcc	.+100    	; 0x1b74 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3c 83       	std	Y+4, r19	; 0x04
    1b18:	2b 83       	std	Y+3, r18	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	91 05       	cpc	r25, r1
    1b22:	d1 f0       	breq	.+52     	; 0x1b58 <GPIO_setupPortDirection+0x5e>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <GPIO_setupPortDirection+0x3e>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <GPIO_setupPortDirection+0x54>
    1b36:	1e c0       	rjmp	.+60     	; 0x1b74 <GPIO_setupPortDirection+0x7a>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <GPIO_setupPortDirection+0x68>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	81 f0       	breq	.+32     	; 0x1b6c <GPIO_setupPortDirection+0x72>
    1b4c:	13 c0       	rjmp	.+38     	; 0x1b74 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b4e:	ea e3       	ldi	r30, 0x3A	; 58
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	80 83       	st	Z, r24
    1b56:	0e c0       	rjmp	.+28     	; 0x1b74 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b58:	e7 e3       	ldi	r30, 0x37	; 55
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	80 83       	st	Z, r24
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b62:	e4 e3       	ldi	r30, 0x34	; 52
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	80 83       	st	Z, r24
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b6c:	e1 e3       	ldi	r30, 0x31	; 49
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <GPIO_writePort+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <GPIO_writePort+0x8>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	90 f5       	brcc	.+100    	; 0x1bfc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	3c 83       	std	Y+4, r19	; 0x04
    1ba0:	2b 83       	std	Y+3, r18	; 0x03
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	91 05       	cpc	r25, r1
    1baa:	d1 f0       	breq	.+52     	; 0x1be0 <GPIO_writePort+0x5e>
    1bac:	2b 81       	ldd	r18, Y+3	; 0x03
    1bae:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <GPIO_writePort+0x3e>
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	61 f0       	breq	.+24     	; 0x1bd6 <GPIO_writePort+0x54>
    1bbe:	1e c0       	rjmp	.+60     	; 0x1bfc <GPIO_writePort+0x7a>
    1bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	81 f0       	breq	.+32     	; 0x1bea <GPIO_writePort+0x68>
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	83 30       	cpi	r24, 0x03	; 3
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	81 f0       	breq	.+32     	; 0x1bf4 <GPIO_writePort+0x72>
    1bd4:	13 c0       	rjmp	.+38     	; 0x1bfc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bd6:	eb e3       	ldi	r30, 0x3B	; 59
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	80 83       	st	Z, r24
    1bde:	0e c0       	rjmp	.+28     	; 0x1bfc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1be0:	e8 e3       	ldi	r30, 0x38	; 56
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	80 83       	st	Z, r24
    1be8:	09 c0       	rjmp	.+18     	; 0x1bfc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1bea:	e5 e3       	ldi	r30, 0x35	; 53
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	80 83       	st	Z, r24
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bf4:	e2 e3       	ldi	r30, 0x32	; 50
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <GPIO_readPort+0x6>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <GPIO_readPort+0x8>
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= NUM_OF_PORTS)
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	84 30       	cpi	r24, 0x04	; 4
    1c1e:	10 f0       	brcs	.+4      	; 0x1c24 <GPIO_readPort+0x1a>
	{
		return 0;
    1c20:	1d 82       	std	Y+5, r1	; 0x05
    1c22:	34 c0       	rjmp	.+104    	; 0x1c8c <GPIO_readPort+0x82>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3c 83       	std	Y+4, r19	; 0x04
    1c2c:	2b 83       	std	Y+3, r18	; 0x03
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	91 05       	cpc	r25, r1
    1c36:	d1 f0       	breq	.+52     	; 0x1c6c <GPIO_readPort+0x62>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <GPIO_readPort+0x42>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	61 f0       	breq	.+24     	; 0x1c62 <GPIO_readPort+0x58>
    1c4a:	1e c0       	rjmp	.+60     	; 0x1c88 <GPIO_readPort+0x7e>
    1c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	81 f0       	breq	.+32     	; 0x1c76 <GPIO_readPort+0x6c>
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	81 f0       	breq	.+32     	; 0x1c80 <GPIO_readPort+0x76>
    1c60:	13 c0       	rjmp	.+38     	; 0x1c88 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			value = PINA;
    1c62:	e9 e3       	ldi	r30, 0x39	; 57
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	0e c0       	rjmp	.+28     	; 0x1c88 <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			value = PINB;
    1c6c:	e6 e3       	ldi	r30, 0x36	; 54
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			value = PINC;
    1c76:	e3 e3       	ldi	r30, 0x33	; 51
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			value = PIND;
    1c80:	e0 e3       	ldi	r30, 0x30	; 48
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1c88:	99 81       	ldd	r25, Y+1	; 0x01
    1c8a:	9d 83       	std	Y+5, r25	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_setupPinDirection>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 ea       	ldi	r26, 0xA0	; 160
    1ccc:	b1 e4       	ldi	r27, 0x41	; 65
    1cce:	8b 87       	std	Y+11, r24	; 0x0b
    1cd0:	9c 87       	std	Y+12, r25	; 0x0c
    1cd2:	ad 87       	std	Y+13, r26	; 0x0d
    1cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a ef       	ldi	r20, 0xFA	; 250
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	98 87       	std	Y+8, r25	; 0x08
    1cf2:	a9 87       	std	Y+9, r26	; 0x09
    1cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_init+0x7a>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LCD_init+0xda>
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_init+0xc8>
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LCD_init+0xbc>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_init+0x104>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	6f ef       	ldi	r22, 0xFF	; 255
    1dae:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1db2:	88 e3       	ldi	r24, 0x38	; 56
    1db4:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1db8:	8c e0       	ldi	r24, 0x0C	; 12
    1dba:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <LCD_sendCommand>
}
    1dc4:	2e 96       	adiw	r28, 0x0e	; 14
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	e9 97       	sbiw	r28, 0x39	; 57
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e8       	ldi	r26, 0x80	; 128
    1dfc:	bf e3       	ldi	r27, 0x3F	; 63
    1dfe:	8d ab       	std	Y+53, r24	; 0x35
    1e00:	9e ab       	std	Y+54, r25	; 0x36
    1e02:	af ab       	std	Y+55, r26	; 0x37
    1e04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	6d a9       	ldd	r22, Y+53	; 0x35
    1e08:	7e a9       	ldd	r23, Y+54	; 0x36
    1e0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a ef       	ldi	r20, 0xFA	; 250
    1e14:	54 e4       	ldi	r21, 0x44	; 68
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	89 ab       	std	Y+49, r24	; 0x31
    1e20:	9a ab       	std	Y+50, r25	; 0x32
    1e22:	ab ab       	std	Y+51, r26	; 0x33
    1e24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e26:	69 a9       	ldd	r22, Y+49	; 0x31
    1e28:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <LCD_sendCommand+0x72>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	98 ab       	std	Y+48, r25	; 0x30
    1e44:	8f a7       	std	Y+47, r24	; 0x2f
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e48:	69 a9       	ldd	r22, Y+49	; 0x31
    1e4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	4c f5       	brge	.+82     	; 0x1eb2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	6d a9       	ldd	r22, Y+53	; 0x35
    1e62:	7e a9       	ldd	r23, Y+54	; 0x36
    1e64:	8f a9       	ldd	r24, Y+55	; 0x37
    1e66:	98 ad       	ldd	r25, Y+56	; 0x38
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	98 ab       	std	Y+48, r25	; 0x30
    1e86:	8f a7       	std	Y+47, r24	; 0x2f
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <LCD_sendCommand+0xd2>
    1e8a:	88 ec       	ldi	r24, 0xC8	; 200
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9e a7       	std	Y+46, r25	; 0x2e
    1e90:	8d a7       	std	Y+45, r24	; 0x2d
    1e92:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e94:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_sendCommand+0xc0>
    1e9a:	9e a7       	std	Y+46, r25	; 0x2e
    1e9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	98 ab       	std	Y+48, r25	; 0x30
    1ea6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f7       	brne	.-38     	; 0x1e8a <LCD_sendCommand+0xb4>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	98 ab       	std	Y+48, r25	; 0x30
    1ec4:	8f a7       	std	Y+47, r24	; 0x2f
    1ec6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eca:	9c a7       	std	Y+44, r25	; 0x2c
    1ecc:	8b a7       	std	Y+43, r24	; 0x2b
    1ece:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <LCD_sendCommand+0xfc>
    1ed6:	9c a7       	std	Y+44, r25	; 0x2c
    1ed8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e8       	ldi	r26, 0x80	; 128
    1eea:	bf e3       	ldi	r27, 0x3F	; 63
    1eec:	8f a3       	std	Y+39, r24	; 0x27
    1eee:	98 a7       	std	Y+40, r25	; 0x28
    1ef0:	a9 a7       	std	Y+41, r26	; 0x29
    1ef2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef8:	89 a5       	ldd	r24, Y+41	; 0x29
    1efa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a ef       	ldi	r20, 0xFA	; 250
    1f02:	54 e4       	ldi	r21, 0x44	; 68
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8b a3       	std	Y+35, r24	; 0x23
    1f0e:	9c a3       	std	Y+36, r25	; 0x24
    1f10:	ad a3       	std	Y+37, r26	; 0x25
    1f12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f14:	6b a1       	ldd	r22, Y+35	; 0x23
    1f16:	7c a1       	ldd	r23, Y+36	; 0x24
    1f18:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <LCD_sendCommand+0x160>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9a a3       	std	Y+34, r25	; 0x22
    1f32:	89 a3       	std	Y+33, r24	; 0x21
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f36:	6b a1       	ldd	r22, Y+35	; 0x23
    1f38:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f50:	78 a5       	ldd	r23, Y+40	; 0x28
    1f52:	89 a5       	ldd	r24, Y+41	; 0x29
    1f54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9a a3       	std	Y+34, r25	; 0x22
    1f74:	89 a3       	std	Y+33, r24	; 0x21
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <LCD_sendCommand+0x1c0>
    1f78:	88 ec       	ldi	r24, 0xC8	; 200
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	98 a3       	std	Y+32, r25	; 0x20
    1f7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f82:	98 a1       	ldd	r25, Y+32	; 0x20
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_sendCommand+0x1ae>
    1f88:	98 a3       	std	Y+32, r25	; 0x20
    1f8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9a a3       	std	Y+34, r25	; 0x22
    1f94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	89 a1       	ldd	r24, Y+33	; 0x21
    1f98:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <LCD_sendCommand+0x1a2>
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9a a3       	std	Y+34, r25	; 0x22
    1fb2:	89 a3       	std	Y+33, r24	; 0x21
    1fb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fba:	8d 8f       	std	Y+29, r24	; 0x1d
    1fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_sendCommand+0x1ea>
    1fc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	69 ad       	ldd	r22, Y+57	; 0x39
    1fcc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <GPIO_writePort>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a0 e8       	ldi	r26, 0x80	; 128
    1fd6:	bf e3       	ldi	r27, 0x3F	; 63
    1fd8:	89 8f       	std	Y+25, r24	; 0x19
    1fda:	9a 8f       	std	Y+26, r25	; 0x1a
    1fdc:	ab 8f       	std	Y+27, r26	; 0x1b
    1fde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a ef       	ldi	r20, 0xFA	; 250
    1fee:	54 e4       	ldi	r21, 0x44	; 68
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8d 8b       	std	Y+21, r24	; 0x15
    1ffa:	9e 8b       	std	Y+22, r25	; 0x16
    1ffc:	af 8b       	std	Y+23, r26	; 0x17
    1ffe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2022:	6d 89       	ldd	r22, Y+21	; 0x15
    2024:	7e 89       	ldd	r23, Y+22	; 0x16
    2026:	8f 89       	ldd	r24, Y+23	; 0x17
    2028:	98 8d       	ldd	r25, Y+24	; 0x18
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	4c f5       	brge	.+82     	; 0x208c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	69 8d       	ldd	r22, Y+25	; 0x19
    203c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e2       	ldi	r20, 0x20	; 32
    2048:	51 e4       	ldi	r21, 0x41	; 65
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <LCD_sendCommand+0x2ac>
    2064:	88 ec       	ldi	r24, 0xC8	; 200
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9a 8b       	std	Y+18, r25	; 0x12
    206a:	89 8b       	std	Y+17, r24	; 0x11
    206c:	89 89       	ldd	r24, Y+17	; 0x11
    206e:	9a 89       	ldd	r25, Y+18	; 0x12
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_sendCommand+0x29a>
    2074:	9a 8b       	std	Y+18, r25	; 0x12
    2076:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	69 f7       	brne	.-38     	; 0x2064 <LCD_sendCommand+0x28e>
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208c:	6d 89       	ldd	r22, Y+21	; 0x15
    208e:	7e 89       	ldd	r23, Y+22	; 0x16
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
    20a0:	8b 89       	ldd	r24, Y+19	; 0x13
    20a2:	9c 89       	ldd	r25, Y+20	; 0x14
    20a4:	98 8b       	std	Y+16, r25	; 0x10
    20a6:	8f 87       	std	Y+15, r24	; 0x0f
    20a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20aa:	98 89       	ldd	r25, Y+16	; 0x10
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_sendCommand+0x2d6>
    20b0:	98 8b       	std	Y+16, r25	; 0x10
    20b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	8b 87       	std	Y+11, r24	; 0x0b
    20c8:	9c 87       	std	Y+12, r25	; 0x0c
    20ca:	ad 87       	std	Y+13, r26	; 0x0d
    20cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a ef       	ldi	r20, 0xFA	; 250
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	a9 87       	std	Y+9, r26	; 0x09
    20ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_sendCommand+0x39a>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_sendCommand+0x388>
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_sendCommand+0x37c>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_sendCommand+0x3c4>
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21a2:	e9 96       	adiw	r28, 0x39	; 57
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	e9 97       	sbiw	r28, 0x39	; 57
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e8       	ldi	r26, 0x80	; 128
    21da:	bf e3       	ldi	r27, 0x3F	; 63
    21dc:	8d ab       	std	Y+53, r24	; 0x35
    21de:	9e ab       	std	Y+54, r25	; 0x36
    21e0:	af ab       	std	Y+55, r26	; 0x37
    21e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6d a9       	ldd	r22, Y+53	; 0x35
    21e6:	7e a9       	ldd	r23, Y+54	; 0x36
    21e8:	8f a9       	ldd	r24, Y+55	; 0x37
    21ea:	98 ad       	ldd	r25, Y+56	; 0x38
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a ef       	ldi	r20, 0xFA	; 250
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	89 ab       	std	Y+49, r24	; 0x31
    21fe:	9a ab       	std	Y+50, r25	; 0x32
    2200:	ab ab       	std	Y+51, r26	; 0x33
    2202:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2204:	69 a9       	ldd	r22, Y+49	; 0x31
    2206:	7a a9       	ldd	r23, Y+50	; 0x32
    2208:	8b a9       	ldd	r24, Y+51	; 0x33
    220a:	9c a9       	ldd	r25, Y+52	; 0x34
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_displayCharacter+0x72>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	98 ab       	std	Y+48, r25	; 0x30
    2222:	8f a7       	std	Y+47, r24	; 0x2f
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2226:	69 a9       	ldd	r22, Y+49	; 0x31
    2228:	7a a9       	ldd	r23, Y+50	; 0x32
    222a:	8b a9       	ldd	r24, Y+51	; 0x33
    222c:	9c a9       	ldd	r25, Y+52	; 0x34
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6d a9       	ldd	r22, Y+53	; 0x35
    2240:	7e a9       	ldd	r23, Y+54	; 0x36
    2242:	8f a9       	ldd	r24, Y+55	; 0x37
    2244:	98 ad       	ldd	r25, Y+56	; 0x38
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	98 ab       	std	Y+48, r25	; 0x30
    2264:	8f a7       	std	Y+47, r24	; 0x2f
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_displayCharacter+0xd2>
    2268:	88 ec       	ldi	r24, 0xC8	; 200
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9e a7       	std	Y+46, r25	; 0x2e
    226e:	8d a7       	std	Y+45, r24	; 0x2d
    2270:	8d a5       	ldd	r24, Y+45	; 0x2d
    2272:	9e a5       	ldd	r25, Y+46	; 0x2e
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_displayCharacter+0xc0>
    2278:	9e a7       	std	Y+46, r25	; 0x2e
    227a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	8f a5       	ldd	r24, Y+47	; 0x2f
    227e:	98 a9       	ldd	r25, Y+48	; 0x30
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	98 ab       	std	Y+48, r25	; 0x30
    2284:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	8f a5       	ldd	r24, Y+47	; 0x2f
    2288:	98 a9       	ldd	r25, Y+48	; 0x30
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <LCD_displayCharacter+0xb4>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	69 a9       	ldd	r22, Y+49	; 0x31
    2292:	7a a9       	ldd	r23, Y+50	; 0x32
    2294:	8b a9       	ldd	r24, Y+51	; 0x33
    2296:	9c a9       	ldd	r25, Y+52	; 0x34
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	98 ab       	std	Y+48, r25	; 0x30
    22a2:	8f a7       	std	Y+47, r24	; 0x2f
    22a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a6:	98 a9       	ldd	r25, Y+48	; 0x30
    22a8:	9c a7       	std	Y+44, r25	; 0x2c
    22aa:	8b a7       	std	Y+43, r24	; 0x2b
    22ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_displayCharacter+0xfc>
    22b4:	9c a7       	std	Y+44, r25	; 0x2c
    22b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e8       	ldi	r26, 0x80	; 128
    22c8:	bf e3       	ldi	r27, 0x3F	; 63
    22ca:	8f a3       	std	Y+39, r24	; 0x27
    22cc:	98 a7       	std	Y+40, r25	; 0x28
    22ce:	a9 a7       	std	Y+41, r26	; 0x29
    22d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	6f a1       	ldd	r22, Y+39	; 0x27
    22d4:	78 a5       	ldd	r23, Y+40	; 0x28
    22d6:	89 a5       	ldd	r24, Y+41	; 0x29
    22d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8b a3       	std	Y+35, r24	; 0x23
    22ec:	9c a3       	std	Y+36, r25	; 0x24
    22ee:	ad a3       	std	Y+37, r26	; 0x25
    22f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22f2:	6b a1       	ldd	r22, Y+35	; 0x23
    22f4:	7c a1       	ldd	r23, Y+36	; 0x24
    22f6:	8d a1       	ldd	r24, Y+37	; 0x25
    22f8:	9e a1       	ldd	r25, Y+38	; 0x26
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <LCD_displayCharacter+0x160>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9a a3       	std	Y+34, r25	; 0x22
    2310:	89 a3       	std	Y+33, r24	; 0x21
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2314:	6b a1       	ldd	r22, Y+35	; 0x23
    2316:	7c a1       	ldd	r23, Y+36	; 0x24
    2318:	8d a1       	ldd	r24, Y+37	; 0x25
    231a:	9e a1       	ldd	r25, Y+38	; 0x26
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	6f a1       	ldd	r22, Y+39	; 0x27
    232e:	78 a5       	ldd	r23, Y+40	; 0x28
    2330:	89 a5       	ldd	r24, Y+41	; 0x29
    2332:	9a a5       	ldd	r25, Y+42	; 0x2a
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9a a3       	std	Y+34, r25	; 0x22
    2352:	89 a3       	std	Y+33, r24	; 0x21
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_displayCharacter+0x1c0>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	98 a3       	std	Y+32, r25	; 0x20
    235c:	8f 8f       	std	Y+31, r24	; 0x1f
    235e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2360:	98 a1       	ldd	r25, Y+32	; 0x20
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_displayCharacter+0x1ae>
    2366:	98 a3       	std	Y+32, r25	; 0x20
    2368:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	89 a1       	ldd	r24, Y+33	; 0x21
    236c:	9a a1       	ldd	r25, Y+34	; 0x22
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9a a3       	std	Y+34, r25	; 0x22
    2372:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	89 a1       	ldd	r24, Y+33	; 0x21
    2376:	9a a1       	ldd	r25, Y+34	; 0x22
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <LCD_displayCharacter+0x1a2>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6b a1       	ldd	r22, Y+35	; 0x23
    2380:	7c a1       	ldd	r23, Y+36	; 0x24
    2382:	8d a1       	ldd	r24, Y+37	; 0x25
    2384:	9e a1       	ldd	r25, Y+38	; 0x26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9a a3       	std	Y+34, r25	; 0x22
    2390:	89 a3       	std	Y+33, r24	; 0x21
    2392:	89 a1       	ldd	r24, Y+33	; 0x21
    2394:	9a a1       	ldd	r25, Y+34	; 0x22
    2396:	9e 8f       	std	Y+30, r25	; 0x1e
    2398:	8d 8f       	std	Y+29, r24	; 0x1d
    239a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_displayCharacter+0x1ea>
    23a2:	9e 8f       	std	Y+30, r25	; 0x1e
    23a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	69 ad       	ldd	r22, Y+57	; 0x39
    23aa:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <GPIO_writePort>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e8       	ldi	r26, 0x80	; 128
    23b4:	bf e3       	ldi	r27, 0x3F	; 63
    23b6:	89 8f       	std	Y+25, r24	; 0x19
    23b8:	9a 8f       	std	Y+26, r25	; 0x1a
    23ba:	ab 8f       	std	Y+27, r26	; 0x1b
    23bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	69 8d       	ldd	r22, Y+25	; 0x19
    23c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a ef       	ldi	r20, 0xFA	; 250
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8d 8b       	std	Y+21, r24	; 0x15
    23d8:	9e 8b       	std	Y+22, r25	; 0x16
    23da:	af 8b       	std	Y+23, r26	; 0x17
    23dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23de:	6d 89       	ldd	r22, Y+21	; 0x15
    23e0:	7e 89       	ldd	r23, Y+22	; 0x16
    23e2:	8f 89       	ldd	r24, Y+23	; 0x17
    23e4:	98 8d       	ldd	r25, Y+24	; 0x18
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2400:	6d 89       	ldd	r22, Y+21	; 0x15
    2402:	7e 89       	ldd	r23, Y+22	; 0x16
    2404:	8f 89       	ldd	r24, Y+23	; 0x17
    2406:	98 8d       	ldd	r25, Y+24	; 0x18
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	69 8d       	ldd	r22, Y+25	; 0x19
    241a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <LCD_displayCharacter+0x2ac>
    2442:	88 ec       	ldi	r24, 0xC8	; 200
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9a 8b       	std	Y+18, r25	; 0x12
    2448:	89 8b       	std	Y+17, r24	; 0x11
    244a:	89 89       	ldd	r24, Y+17	; 0x11
    244c:	9a 89       	ldd	r25, Y+18	; 0x12
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_displayCharacter+0x29a>
    2452:	9a 8b       	std	Y+18, r25	; 0x12
    2454:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8b 89       	ldd	r24, Y+19	; 0x13
    2458:	9c 89       	ldd	r25, Y+20	; 0x14
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <LCD_displayCharacter+0x28e>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9c 8b       	std	Y+20, r25	; 0x14
    247c:	8b 8b       	std	Y+19, r24	; 0x13
    247e:	8b 89       	ldd	r24, Y+19	; 0x13
    2480:	9c 89       	ldd	r25, Y+20	; 0x14
    2482:	98 8b       	std	Y+16, r25	; 0x10
    2484:	8f 87       	std	Y+15, r24	; 0x0f
    2486:	8f 85       	ldd	r24, Y+15	; 0x0f
    2488:	98 89       	ldd	r25, Y+16	; 0x10
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD_displayCharacter+0x2d6>
    248e:	98 8b       	std	Y+16, r25	; 0x10
    2490:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_writePin>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e8       	ldi	r26, 0x80	; 128
    24a2:	bf e3       	ldi	r27, 0x3F	; 63
    24a4:	8b 87       	std	Y+11, r24	; 0x0b
    24a6:	9c 87       	std	Y+12, r25	; 0x0c
    24a8:	ad 87       	std	Y+13, r26	; 0x0d
    24aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a ef       	ldi	r20, 0xFA	; 250
    24ba:	54 e4       	ldi	r21, 0x44	; 68
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8f 83       	std	Y+7, r24	; 0x07
    24c6:	98 87       	std	Y+8, r25	; 0x08
    24c8:	a9 87       	std	Y+9, r26	; 0x09
    24ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	2c f4       	brge	.+10     	; 0x24ee <LCD_displayCharacter+0x33a>
		__ticks = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	3f c0       	rjmp	.+126    	; 0x256c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	4c f5       	brge	.+82     	; 0x2558 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e2       	ldi	r20, 0x20	; 32
    2514:	51 e4       	ldi	r21, 0x41	; 65
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	0f c0       	rjmp	.+30     	; 0x254e <LCD_displayCharacter+0x39a>
    2530:	88 ec       	ldi	r24, 0xC8	; 200
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_displayCharacter+0x388>
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	69 f7       	brne	.-38     	; 0x2530 <LCD_displayCharacter+0x37c>
    2556:	14 c0       	rjmp	.+40     	; 0x2580 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_displayCharacter+0x3c4>
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2580:	e9 96       	adiw	r28, 0x39	; 57
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <LCD_displayString+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25a2:	19 82       	std	Y+1, r1	; 0x01
    25a4:	0e c0       	rjmp	.+28     	; 0x25c2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	fc 01       	movw	r30, r24
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	80 81       	ld	r24, Z
    25b8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LCD_displayCharacter>
		i++;
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	8f 5f       	subi	r24, 0xFF	; 255
    25c0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	fc 01       	movw	r30, r24
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	80 81       	ld	r24, Z
    25d4:	88 23       	and	r24, r24
    25d6:	39 f7       	brne	.-50     	; 0x25a6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <LCD_moveCursor+0x6>
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <LCD_moveCursor+0x8>
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	8a 83       	std	Y+2, r24	; 0x02
    25f4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	3d 83       	std	Y+5, r19	; 0x05
    25fe:	2c 83       	std	Y+4, r18	; 0x04
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	9d 81       	ldd	r25, Y+5	; 0x05
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	91 05       	cpc	r25, r1
    2608:	c1 f0       	breq	.+48     	; 0x263a <LCD_moveCursor+0x56>
    260a:	2c 81       	ldd	r18, Y+4	; 0x04
    260c:	3d 81       	ldd	r19, Y+5	; 0x05
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	2c f4       	brge	.+10     	; 0x261e <LCD_moveCursor+0x3a>
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	61 f0       	breq	.+24     	; 0x2634 <LCD_moveCursor+0x50>
    261c:	19 c0       	rjmp	.+50     	; 0x2650 <LCD_moveCursor+0x6c>
    261e:	2c 81       	ldd	r18, Y+4	; 0x04
    2620:	3d 81       	ldd	r19, Y+5	; 0x05
    2622:	22 30       	cpi	r18, 0x02	; 2
    2624:	31 05       	cpc	r19, r1
    2626:	69 f0       	breq	.+26     	; 0x2642 <LCD_moveCursor+0x5e>
    2628:	8c 81       	ldd	r24, Y+4	; 0x04
    262a:	9d 81       	ldd	r25, Y+5	; 0x05
    262c:	83 30       	cpi	r24, 0x03	; 3
    262e:	91 05       	cpc	r25, r1
    2630:	61 f0       	breq	.+24     	; 0x264a <LCD_moveCursor+0x66>
    2632:	0e c0       	rjmp	.+28     	; 0x2650 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	0b c0       	rjmp	.+22     	; 0x2650 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	80 5c       	subi	r24, 0xC0	; 192
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	07 c0       	rjmp	.+14     	; 0x2650 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	80 5f       	subi	r24, 0xF0	; 240
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	80 5b       	subi	r24, 0xB0	; 176
    264e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	80 68       	ori	r24, 0x80	; 128
    2654:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <LCD_sendCommand>
}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <LCD_displayStringRowColumn+0x6>
    266e:	00 d0       	rcall	.+0      	; 0x2670 <LCD_displayStringRowColumn+0x8>
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	6a 83       	std	Y+2, r22	; 0x02
    2678:	5c 83       	std	Y+4, r21	; 0x04
    267a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	6a 81       	ldd	r22, Y+2	; 0x02
    2680:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	9c 81       	ldd	r25, Y+4	; 0x04
    2688:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_displayString>
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	62 97       	sbiw	r28, 0x12	; 18
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26b2:	89 89       	ldd	r24, Y+17	; 0x11
    26b4:	9a 89       	ldd	r25, Y+18	; 0x12
    26b6:	9e 01       	movw	r18, r28
    26b8:	2f 5f       	subi	r18, 0xFF	; 255
    26ba:	3f 4f       	sbci	r19, 0xFF	; 255
    26bc:	b9 01       	movw	r22, r18
    26be:	4a e0       	ldi	r20, 0x0A	; 10
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	0e 94 70 18 	call	0x30e0	; 0x30e0 <itoa>
   LCD_displayString(buff); /* Display the string */
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_displayString>
}
    26ce:	62 96       	adiw	r28, 0x12	; 18
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <LCD_sendCommand>
}
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <Timer_setPrescaler>:
static void (*Timer1_Callback_OVF)(void) = NULL_PTR;
static void (*Timer2_Callback_CTC)(void) = NULL_PTR;
static void (*Timer2_Callback_OVF)(void) = NULL_PTR;

/*---- Internal function to set timer prescaler ----*/
static void Timer_setPrescaler(Timer_ID_Type timer_id, Timer_PrescalerType prescaler) {
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <Timer_setPrescaler+0x6>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <Timer_setPrescaler+0x8>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	6a 83       	std	Y+2, r22	; 0x02
    switch (timer_id) {
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	3c 83       	std	Y+4, r19	; 0x04
    270c:	2b 83       	std	Y+3, r18	; 0x03
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	9c 81       	ldd	r25, Y+4	; 0x04
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	91 05       	cpc	r25, r1
    2716:	c9 f0       	breq	.+50     	; 0x274a <Timer_setPrescaler+0x56>
    2718:	2b 81       	ldd	r18, Y+3	; 0x03
    271a:	3c 81       	ldd	r19, Y+4	; 0x04
    271c:	22 30       	cpi	r18, 0x02	; 2
    271e:	31 05       	cpc	r19, r1
    2720:	21 f1       	breq	.+72     	; 0x276a <Timer_setPrescaler+0x76>
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	79 f5       	brne	.+94     	; 0x2788 <Timer_setPrescaler+0x94>
        case TIMER0_ID:
            /*---- Clear and set Timer0 prescaler bits ----*/
            TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
    272a:	a3 e5       	ldi	r26, 0x53	; 83
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e3 e5       	ldi	r30, 0x53	; 83
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	88 7f       	andi	r24, 0xF8	; 248
    2736:	8c 93       	st	X, r24
            TCCR0 |= prescaler;
    2738:	a3 e5       	ldi	r26, 0x53	; 83
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e3 e5       	ldi	r30, 0x53	; 83
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	90 81       	ld	r25, Z
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	89 2b       	or	r24, r25
    2746:	8c 93       	st	X, r24
    2748:	1f c0       	rjmp	.+62     	; 0x2788 <Timer_setPrescaler+0x94>
            break;
        case TIMER1_ID:
            /*---- Clear and set Timer1 prescaler bits ----*/
            TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
    274a:	ae e4       	ldi	r26, 0x4E	; 78
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ee e4       	ldi	r30, 0x4E	; 78
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	88 7f       	andi	r24, 0xF8	; 248
    2756:	8c 93       	st	X, r24
            TCCR1B |= prescaler;
    2758:	ae e4       	ldi	r26, 0x4E	; 78
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	90 81       	ld	r25, Z
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	89 2b       	or	r24, r25
    2766:	8c 93       	st	X, r24
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <Timer_setPrescaler+0x94>
            break;
        case TIMER2_ID:
            /*---- Clear and set Timer2 prescaler bits ----*/
            TCCR2 &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
    276a:	a5 e4       	ldi	r26, 0x45	; 69
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e5 e4       	ldi	r30, 0x45	; 69
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	88 7f       	andi	r24, 0xF8	; 248
    2776:	8c 93       	st	X, r24
            TCCR2 |= prescaler;
    2778:	a5 e4       	ldi	r26, 0x45	; 69
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e5 e4       	ldi	r30, 0x45	; 69
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	90 81       	ld	r25, Z
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	89 2b       	or	r24, r25
    2786:	8c 93       	st	X, r24
            break;
    }
}
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <Timer_init>:

/*---- Initialize timer with specified configuration ----*/
void Timer_init(const Timer_ConfigType *config) {
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <Timer_init+0x6>
    279c:	00 d0       	rcall	.+0      	; 0x279e <Timer_init+0x8>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
    switch (config->timer_id) {
    27a6:	e9 81       	ldd	r30, Y+1	; 0x01
    27a8:	fa 81       	ldd	r31, Y+2	; 0x02
    27aa:	84 81       	ldd	r24, Z+4	; 0x04
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	3c 83       	std	Y+4, r19	; 0x04
    27b2:	2b 83       	std	Y+3, r18	; 0x03
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	91 05       	cpc	r25, r1
    27bc:	c9 f1       	breq	.+114    	; 0x2830 <Timer_init+0x9a>
    27be:	2b 81       	ldd	r18, Y+3	; 0x03
    27c0:	3c 81       	ldd	r19, Y+4	; 0x04
    27c2:	22 30       	cpi	r18, 0x02	; 2
    27c4:	31 05       	cpc	r19, r1
    27c6:	09 f4       	brne	.+2      	; 0x27ca <Timer_init+0x34>
    27c8:	61 c0       	rjmp	.+194    	; 0x288c <Timer_init+0xf6>
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	09 f0       	breq	.+2      	; 0x27d4 <Timer_init+0x3e>
    27d2:	89 c0       	rjmp	.+274    	; 0x28e6 <Timer_init+0x150>
        case TIMER0_ID:
            /*---- Timer0 initialization ----*/
            TCNT0 = (uint8)config->initial_value;
    27d4:	a2 e5       	ldi	r26, 0x52	; 82
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e9 81       	ldd	r30, Y+1	; 0x01
    27da:	fa 81       	ldd	r31, Y+2	; 0x02
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	8c 93       	st	X, r24
            TCCR0 = (1 << FOC0); /*---- Force Output Compare ----*/
    27e2:	e3 e5       	ldi	r30, 0x53	; 83
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 e8       	ldi	r24, 0x80	; 128
    27e8:	80 83       	st	Z, r24
            if (config->mode == TIMER_MODE_CTC) {
    27ea:	e9 81       	ldd	r30, Y+1	; 0x01
    27ec:	fa 81       	ldd	r31, Y+2	; 0x02
    27ee:	85 81       	ldd	r24, Z+5	; 0x05
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	b1 f4       	brne	.+44     	; 0x2820 <Timer_init+0x8a>
                /*---- Configure Timer0 CTC mode ----*/
                TCCR0 |= (1 << WGM01);
    27f4:	a3 e5       	ldi	r26, 0x53	; 83
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e3 e5       	ldi	r30, 0x53	; 83
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	88 60       	ori	r24, 0x08	; 8
    2800:	8c 93       	st	X, r24
                OCR0 = (uint8)config->compare_value;
    2802:	ac e5       	ldi	r26, 0x5C	; 92
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e9 81       	ldd	r30, Y+1	; 0x01
    2808:	fa 81       	ldd	r31, Y+2	; 0x02
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); /*---- Enable CTC interrupt ----*/
    2810:	a9 e5       	ldi	r26, 0x59	; 89
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e9 e5       	ldi	r30, 0x59	; 89
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	82 60       	ori	r24, 0x02	; 2
    281c:	8c 93       	st	X, r24
    281e:	63 c0       	rjmp	.+198    	; 0x28e6 <Timer_init+0x150>
            } else {
                TIMSK |= (1 << TOIE0); /*---- Enable overflow interrupt ----*/
    2820:	a9 e5       	ldi	r26, 0x59	; 89
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e9 e5       	ldi	r30, 0x59	; 89
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	81 60       	ori	r24, 0x01	; 1
    282c:	8c 93       	st	X, r24
    282e:	5b c0       	rjmp	.+182    	; 0x28e6 <Timer_init+0x150>
            }
            break;

        case TIMER1_ID:
            /*---- Timer1 initialization ----*/
            TCNT1 = config->initial_value;
    2830:	ac e4       	ldi	r26, 0x4C	; 76
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e9 81       	ldd	r30, Y+1	; 0x01
    2836:	fa 81       	ldd	r31, Y+2	; 0x02
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	11 96       	adiw	r26, 0x01	; 1
    283e:	9c 93       	st	X, r25
    2840:	8e 93       	st	-X, r24
            TCCR1A = 0; /*---- Normal port operation ----*/
    2842:	ef e4       	ldi	r30, 0x4F	; 79
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	10 82       	st	Z, r1
            if (config->mode == TIMER_MODE_CTC) {
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	fa 81       	ldd	r31, Y+2	; 0x02
    284c:	85 81       	ldd	r24, Z+5	; 0x05
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	a9 f4       	brne	.+42     	; 0x287c <Timer_init+0xe6>
                /*---- Configure Timer1 CTC mode ----*/
                TCCR1B = (1 << WGM12);
    2852:	ee e4       	ldi	r30, 0x4E	; 78
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	88 e0       	ldi	r24, 0x08	; 8
    2858:	80 83       	st	Z, r24
                OCR1A = config->compare_value;
    285a:	aa e4       	ldi	r26, 0x4A	; 74
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e9 81       	ldd	r30, Y+1	; 0x01
    2860:	fa 81       	ldd	r31, Y+2	; 0x02
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	11 96       	adiw	r26, 0x01	; 1
    2868:	9c 93       	st	X, r25
    286a:	8e 93       	st	-X, r24
                TIMSK |= (1 << OCIE1A); /*---- Enable CTC interrupt ----*/
    286c:	a9 e5       	ldi	r26, 0x59	; 89
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e9 e5       	ldi	r30, 0x59	; 89
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	80 61       	ori	r24, 0x10	; 16
    2878:	8c 93       	st	X, r24
    287a:	35 c0       	rjmp	.+106    	; 0x28e6 <Timer_init+0x150>
            } else {
                TIMSK |= (1 << TOIE1); /*---- Enable overflow interrupt ----*/
    287c:	a9 e5       	ldi	r26, 0x59	; 89
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e9 e5       	ldi	r30, 0x59	; 89
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	84 60       	ori	r24, 0x04	; 4
    2888:	8c 93       	st	X, r24
    288a:	2d c0       	rjmp	.+90     	; 0x28e6 <Timer_init+0x150>
            }
            break;

        case TIMER2_ID:
            /*---- Timer2 initialization ----*/
            TCNT2 = (uint8)config->initial_value;
    288c:	a4 e4       	ldi	r26, 0x44	; 68
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e9 81       	ldd	r30, Y+1	; 0x01
    2892:	fa 81       	ldd	r31, Y+2	; 0x02
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	8c 93       	st	X, r24
            TCCR2 = (1 << FOC2); /*---- Force Output Compare ----*/
    289a:	e5 e4       	ldi	r30, 0x45	; 69
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 e8       	ldi	r24, 0x80	; 128
    28a0:	80 83       	st	Z, r24
            if (config->mode == TIMER_MODE_CTC) {
    28a2:	e9 81       	ldd	r30, Y+1	; 0x01
    28a4:	fa 81       	ldd	r31, Y+2	; 0x02
    28a6:	85 81       	ldd	r24, Z+5	; 0x05
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	b1 f4       	brne	.+44     	; 0x28d8 <Timer_init+0x142>
                /*---- Configure Timer2 CTC mode ----*/
                TCCR2 |= (1 << WGM21);
    28ac:	a5 e4       	ldi	r26, 0x45	; 69
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e5 e4       	ldi	r30, 0x45	; 69
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	88 60       	ori	r24, 0x08	; 8
    28b8:	8c 93       	st	X, r24
                OCR2 = (uint8)config->compare_value;
    28ba:	a3 e4       	ldi	r26, 0x43	; 67
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e9 81       	ldd	r30, Y+1	; 0x01
    28c0:	fa 81       	ldd	r31, Y+2	; 0x02
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); /*---- Enable CTC interrupt ----*/
    28c8:	a9 e5       	ldi	r26, 0x59	; 89
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	e9 e5       	ldi	r30, 0x59	; 89
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	80 68       	ori	r24, 0x80	; 128
    28d4:	8c 93       	st	X, r24
    28d6:	07 c0       	rjmp	.+14     	; 0x28e6 <Timer_init+0x150>
            } else {
                TIMSK |= (1 << TOIE2); /*---- Enable overflow interrupt ----*/
    28d8:	a9 e5       	ldi	r26, 0x59	; 89
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e9 e5       	ldi	r30, 0x59	; 89
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	80 64       	ori	r24, 0x40	; 64
    28e4:	8c 93       	st	X, r24
            }
            break;
    }

    /*---- Set the configured prescaler ----*/
    Timer_setPrescaler(config->timer_id, config->prescaler);
    28e6:	e9 81       	ldd	r30, Y+1	; 0x01
    28e8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ea:	84 81       	ldd	r24, Z+4	; 0x04
    28ec:	e9 81       	ldd	r30, Y+1	; 0x01
    28ee:	fa 81       	ldd	r31, Y+2	; 0x02
    28f0:	96 81       	ldd	r25, Z+6	; 0x06
    28f2:	69 2f       	mov	r22, r25
    28f4:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <Timer_setPrescaler>
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <Timer_deInit>:

/*---- Deinitialize timer and disable interrupts ----*/
void Timer_deInit(Timer_ID_Type timer_id) {
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <Timer_deInit+0x6>
    290c:	0f 92       	push	r0
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_id) {
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	3b 83       	std	Y+3, r19	; 0x03
    291c:	2a 83       	std	Y+2, r18	; 0x02
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	91 05       	cpc	r25, r1
    2926:	e1 f0       	breq	.+56     	; 0x2960 <Timer_deInit+0x5a>
    2928:	2a 81       	ldd	r18, Y+2	; 0x02
    292a:	3b 81       	ldd	r19, Y+3	; 0x03
    292c:	22 30       	cpi	r18, 0x02	; 2
    292e:	31 05       	cpc	r19, r1
    2930:	69 f1       	breq	.+90     	; 0x298c <Timer_deInit+0x86>
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	d9 f5       	brne	.+118    	; 0x29b0 <Timer_deInit+0xaa>
        case TIMER0_ID:
            /*---- Disable Timer0 and clear callbacks ----*/
            TCCR0 = 0;
    293a:	e3 e5       	ldi	r30, 0x53	; 83
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE0) | (1 << TOIE0));
    2940:	a9 e5       	ldi	r26, 0x59	; 89
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e9 e5       	ldi	r30, 0x59	; 89
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	8c 7f       	andi	r24, 0xFC	; 252
    294c:	8c 93       	st	X, r24
            Timer0_Callback_CTC = NULL_PTR;
    294e:	10 92 7f 00 	sts	0x007F, r1
    2952:	10 92 7e 00 	sts	0x007E, r1
            Timer0_Callback_OVF = NULL_PTR;
    2956:	10 92 81 00 	sts	0x0081, r1
    295a:	10 92 80 00 	sts	0x0080, r1
    295e:	28 c0       	rjmp	.+80     	; 0x29b0 <Timer_deInit+0xaa>
            break;
        case TIMER1_ID:
            /*---- Disable Timer1 and clear callbacks ----*/
            TCCR1A = 0;
    2960:	ef e4       	ldi	r30, 0x4F	; 79
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	10 82       	st	Z, r1
            TCCR1B = 0;
    2966:	ee e4       	ldi	r30, 0x4E	; 78
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE1A) | (1 << TOIE1));
    296c:	a9 e5       	ldi	r26, 0x59	; 89
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e9 e5       	ldi	r30, 0x59	; 89
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	8b 7e       	andi	r24, 0xEB	; 235
    2978:	8c 93       	st	X, r24
            Timer1_Callback_CTC = NULL_PTR;
    297a:	10 92 83 00 	sts	0x0083, r1
    297e:	10 92 82 00 	sts	0x0082, r1
            Timer1_Callback_OVF = NULL_PTR;
    2982:	10 92 85 00 	sts	0x0085, r1
    2986:	10 92 84 00 	sts	0x0084, r1
    298a:	12 c0       	rjmp	.+36     	; 0x29b0 <Timer_deInit+0xaa>
            break;
        case TIMER2_ID:
            /*---- Disable Timer2 and clear callbacks ----*/
            TCCR2 = 0;
    298c:	e5 e4       	ldi	r30, 0x45	; 69
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE2) | (1 << TOIE2));
    2992:	a9 e5       	ldi	r26, 0x59	; 89
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e9 e5       	ldi	r30, 0x59	; 89
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	8f 73       	andi	r24, 0x3F	; 63
    299e:	8c 93       	st	X, r24
            Timer2_Callback_CTC = NULL_PTR;
    29a0:	10 92 87 00 	sts	0x0087, r1
    29a4:	10 92 86 00 	sts	0x0086, r1
            Timer2_Callback_OVF = NULL_PTR;
    29a8:	10 92 89 00 	sts	0x0089, r1
    29ac:	10 92 88 00 	sts	0x0088, r1
            break;
    }
}
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <Timer_setCallBack_CTC>:

/*---- Set callback function for CTC interrupt ----*/
void Timer_setCallBack_CTC(void (*callback)(void), Timer_ID_Type timer_id) {
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <Timer_setCallBack_CTC+0x6>
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <Timer_setCallBack_CTC+0x8>
    29c4:	0f 92       	push	r0
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	6b 83       	std	Y+3, r22	; 0x03
    switch (timer_id) {
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	3d 83       	std	Y+5, r19	; 0x05
    29d8:	2c 83       	std	Y+4, r18	; 0x04
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	9d 81       	ldd	r25, Y+5	; 0x05
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	91 05       	cpc	r25, r1
    29e2:	81 f0       	breq	.+32     	; 0x2a04 <Timer_setCallBack_CTC+0x48>
    29e4:	2c 81       	ldd	r18, Y+4	; 0x04
    29e6:	3d 81       	ldd	r19, Y+5	; 0x05
    29e8:	22 30       	cpi	r18, 0x02	; 2
    29ea:	31 05       	cpc	r19, r1
    29ec:	91 f0       	breq	.+36     	; 0x2a12 <Timer_setCallBack_CTC+0x56>
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	9d 81       	ldd	r25, Y+5	; 0x05
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	a1 f4       	brne	.+40     	; 0x2a1e <Timer_setCallBack_CTC+0x62>
        case TIMER0_ID: Timer0_Callback_CTC = callback; break;
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	90 93 7f 00 	sts	0x007F, r25
    29fe:	80 93 7e 00 	sts	0x007E, r24
    2a02:	0d c0       	rjmp	.+26     	; 0x2a1e <Timer_setCallBack_CTC+0x62>
        case TIMER1_ID: Timer1_Callback_CTC = callback; break;
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	90 93 83 00 	sts	0x0083, r25
    2a0c:	80 93 82 00 	sts	0x0082, r24
    2a10:	06 c0       	rjmp	.+12     	; 0x2a1e <Timer_setCallBack_CTC+0x62>
        case TIMER2_ID: Timer2_Callback_CTC = callback; break;
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	9a 81       	ldd	r25, Y+2	; 0x02
    2a16:	90 93 87 00 	sts	0x0087, r25
    2a1a:	80 93 86 00 	sts	0x0086, r24
    }
}
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <Timer_setCallBack_OVF>:

/*---- Set callback function for overflow interrupt ----*/
void Timer_setCallBack_OVF(void (*callback)(void), Timer_ID_Type timer_id) {
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <Timer_setCallBack_OVF+0x6>
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <Timer_setCallBack_OVF+0x8>
    2a36:	0f 92       	push	r0
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	6b 83       	std	Y+3, r22	; 0x03
    switch (timer_id) {
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	3d 83       	std	Y+5, r19	; 0x05
    2a4a:	2c 83       	std	Y+4, r18	; 0x04
    2a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	91 05       	cpc	r25, r1
    2a54:	81 f0       	breq	.+32     	; 0x2a76 <Timer_setCallBack_OVF+0x48>
    2a56:	2c 81       	ldd	r18, Y+4	; 0x04
    2a58:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5a:	22 30       	cpi	r18, 0x02	; 2
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	91 f0       	breq	.+36     	; 0x2a84 <Timer_setCallBack_OVF+0x56>
    2a60:	8c 81       	ldd	r24, Y+4	; 0x04
    2a62:	9d 81       	ldd	r25, Y+5	; 0x05
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	a1 f4       	brne	.+40     	; 0x2a90 <Timer_setCallBack_OVF+0x62>
        case TIMER0_ID: Timer0_Callback_OVF = callback; break;
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	90 93 81 00 	sts	0x0081, r25
    2a70:	80 93 80 00 	sts	0x0080, r24
    2a74:	0d c0       	rjmp	.+26     	; 0x2a90 <Timer_setCallBack_OVF+0x62>
        case TIMER1_ID: Timer1_Callback_OVF = callback; break;
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	90 93 85 00 	sts	0x0085, r25
    2a7e:	80 93 84 00 	sts	0x0084, r24
    2a82:	06 c0       	rjmp	.+12     	; 0x2a90 <Timer_setCallBack_OVF+0x62>
        case TIMER2_ID: Timer2_Callback_OVF = callback; break;
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	90 93 89 00 	sts	0x0089, r25
    2a8c:	80 93 88 00 	sts	0x0088, r24
    }
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <__vector_10>:
/*******************************************************************************
 *                      Interrupt Service Routines                            *
 *******************************************************************************/

/*---- Timer0 Compare Match Interrupt ----*/
ISR(TIMER0_COMP_vect) {
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	2f 93       	push	r18
    2aac:	3f 93       	push	r19
    2aae:	4f 93       	push	r20
    2ab0:	5f 93       	push	r21
    2ab2:	6f 93       	push	r22
    2ab4:	7f 93       	push	r23
    2ab6:	8f 93       	push	r24
    2ab8:	9f 93       	push	r25
    2aba:	af 93       	push	r26
    2abc:	bf 93       	push	r27
    2abe:	ef 93       	push	r30
    2ac0:	ff 93       	push	r31
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    if (Timer0_Callback_CTC != NULL_PTR) Timer0_Callback_CTC();
    2aca:	80 91 7e 00 	lds	r24, 0x007E
    2ace:	90 91 7f 00 	lds	r25, 0x007F
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	29 f0       	breq	.+10     	; 0x2ae0 <__vector_10+0x40>
    2ad6:	e0 91 7e 00 	lds	r30, 0x007E
    2ada:	f0 91 7f 00 	lds	r31, 0x007F
    2ade:	09 95       	icall
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	ff 91       	pop	r31
    2ae6:	ef 91       	pop	r30
    2ae8:	bf 91       	pop	r27
    2aea:	af 91       	pop	r26
    2aec:	9f 91       	pop	r25
    2aee:	8f 91       	pop	r24
    2af0:	7f 91       	pop	r23
    2af2:	6f 91       	pop	r22
    2af4:	5f 91       	pop	r21
    2af6:	4f 91       	pop	r20
    2af8:	3f 91       	pop	r19
    2afa:	2f 91       	pop	r18
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	0f 90       	pop	r0
    2b02:	1f 90       	pop	r1
    2b04:	18 95       	reti

00002b06 <__vector_11>:

/*---- Timer0 Overflow Interrupt ----*/
ISR(TIMER0_OVF_vect)  {
    2b06:	1f 92       	push	r1
    2b08:	0f 92       	push	r0
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	0f 92       	push	r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	2f 93       	push	r18
    2b12:	3f 93       	push	r19
    2b14:	4f 93       	push	r20
    2b16:	5f 93       	push	r21
    2b18:	6f 93       	push	r22
    2b1a:	7f 93       	push	r23
    2b1c:	8f 93       	push	r24
    2b1e:	9f 93       	push	r25
    2b20:	af 93       	push	r26
    2b22:	bf 93       	push	r27
    2b24:	ef 93       	push	r30
    2b26:	ff 93       	push	r31
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    if (Timer0_Callback_OVF != NULL_PTR) Timer0_Callback_OVF();
    2b30:	80 91 80 00 	lds	r24, 0x0080
    2b34:	90 91 81 00 	lds	r25, 0x0081
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	29 f0       	breq	.+10     	; 0x2b46 <__vector_11+0x40>
    2b3c:	e0 91 80 00 	lds	r30, 0x0080
    2b40:	f0 91 81 00 	lds	r31, 0x0081
    2b44:	09 95       	icall
}
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	ff 91       	pop	r31
    2b4c:	ef 91       	pop	r30
    2b4e:	bf 91       	pop	r27
    2b50:	af 91       	pop	r26
    2b52:	9f 91       	pop	r25
    2b54:	8f 91       	pop	r24
    2b56:	7f 91       	pop	r23
    2b58:	6f 91       	pop	r22
    2b5a:	5f 91       	pop	r21
    2b5c:	4f 91       	pop	r20
    2b5e:	3f 91       	pop	r19
    2b60:	2f 91       	pop	r18
    2b62:	0f 90       	pop	r0
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	0f 90       	pop	r0
    2b68:	1f 90       	pop	r1
    2b6a:	18 95       	reti

00002b6c <__vector_7>:

/*---- Timer1 Compare Match A Interrupt ----*/
ISR(TIMER1_COMPA_vect) {
    2b6c:	1f 92       	push	r1
    2b6e:	0f 92       	push	r0
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	0f 92       	push	r0
    2b74:	11 24       	eor	r1, r1
    2b76:	2f 93       	push	r18
    2b78:	3f 93       	push	r19
    2b7a:	4f 93       	push	r20
    2b7c:	5f 93       	push	r21
    2b7e:	6f 93       	push	r22
    2b80:	7f 93       	push	r23
    2b82:	8f 93       	push	r24
    2b84:	9f 93       	push	r25
    2b86:	af 93       	push	r26
    2b88:	bf 93       	push	r27
    2b8a:	ef 93       	push	r30
    2b8c:	ff 93       	push	r31
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    if (Timer1_Callback_CTC != NULL_PTR) Timer1_Callback_CTC();
    2b96:	80 91 82 00 	lds	r24, 0x0082
    2b9a:	90 91 83 00 	lds	r25, 0x0083
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	29 f0       	breq	.+10     	; 0x2bac <__vector_7+0x40>
    2ba2:	e0 91 82 00 	lds	r30, 0x0082
    2ba6:	f0 91 83 00 	lds	r31, 0x0083
    2baa:	09 95       	icall
}
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	ff 91       	pop	r31
    2bb2:	ef 91       	pop	r30
    2bb4:	bf 91       	pop	r27
    2bb6:	af 91       	pop	r26
    2bb8:	9f 91       	pop	r25
    2bba:	8f 91       	pop	r24
    2bbc:	7f 91       	pop	r23
    2bbe:	6f 91       	pop	r22
    2bc0:	5f 91       	pop	r21
    2bc2:	4f 91       	pop	r20
    2bc4:	3f 91       	pop	r19
    2bc6:	2f 91       	pop	r18
    2bc8:	0f 90       	pop	r0
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	0f 90       	pop	r0
    2bce:	1f 90       	pop	r1
    2bd0:	18 95       	reti

00002bd2 <__vector_9>:

/*---- Timer1 Overflow Interrupt ----*/
ISR(TIMER1_OVF_vect)   {
    2bd2:	1f 92       	push	r1
    2bd4:	0f 92       	push	r0
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	0f 92       	push	r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	2f 93       	push	r18
    2bde:	3f 93       	push	r19
    2be0:	4f 93       	push	r20
    2be2:	5f 93       	push	r21
    2be4:	6f 93       	push	r22
    2be6:	7f 93       	push	r23
    2be8:	8f 93       	push	r24
    2bea:	9f 93       	push	r25
    2bec:	af 93       	push	r26
    2bee:	bf 93       	push	r27
    2bf0:	ef 93       	push	r30
    2bf2:	ff 93       	push	r31
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    if (Timer1_Callback_OVF != NULL_PTR) Timer1_Callback_OVF();
    2bfc:	80 91 84 00 	lds	r24, 0x0084
    2c00:	90 91 85 00 	lds	r25, 0x0085
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	29 f0       	breq	.+10     	; 0x2c12 <__vector_9+0x40>
    2c08:	e0 91 84 00 	lds	r30, 0x0084
    2c0c:	f0 91 85 00 	lds	r31, 0x0085
    2c10:	09 95       	icall
}
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	ff 91       	pop	r31
    2c18:	ef 91       	pop	r30
    2c1a:	bf 91       	pop	r27
    2c1c:	af 91       	pop	r26
    2c1e:	9f 91       	pop	r25
    2c20:	8f 91       	pop	r24
    2c22:	7f 91       	pop	r23
    2c24:	6f 91       	pop	r22
    2c26:	5f 91       	pop	r21
    2c28:	4f 91       	pop	r20
    2c2a:	3f 91       	pop	r19
    2c2c:	2f 91       	pop	r18
    2c2e:	0f 90       	pop	r0
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	0f 90       	pop	r0
    2c34:	1f 90       	pop	r1
    2c36:	18 95       	reti

00002c38 <__vector_4>:

/*---- Timer2 Compare Match Interrupt ----*/
ISR(TIMER2_COMP_vect) {
    2c38:	1f 92       	push	r1
    2c3a:	0f 92       	push	r0
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	0f 92       	push	r0
    2c40:	11 24       	eor	r1, r1
    2c42:	2f 93       	push	r18
    2c44:	3f 93       	push	r19
    2c46:	4f 93       	push	r20
    2c48:	5f 93       	push	r21
    2c4a:	6f 93       	push	r22
    2c4c:	7f 93       	push	r23
    2c4e:	8f 93       	push	r24
    2c50:	9f 93       	push	r25
    2c52:	af 93       	push	r26
    2c54:	bf 93       	push	r27
    2c56:	ef 93       	push	r30
    2c58:	ff 93       	push	r31
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    if (Timer2_Callback_CTC != NULL_PTR) Timer2_Callback_CTC();
    2c62:	80 91 86 00 	lds	r24, 0x0086
    2c66:	90 91 87 00 	lds	r25, 0x0087
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	29 f0       	breq	.+10     	; 0x2c78 <__vector_4+0x40>
    2c6e:	e0 91 86 00 	lds	r30, 0x0086
    2c72:	f0 91 87 00 	lds	r31, 0x0087
    2c76:	09 95       	icall
}
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	ff 91       	pop	r31
    2c7e:	ef 91       	pop	r30
    2c80:	bf 91       	pop	r27
    2c82:	af 91       	pop	r26
    2c84:	9f 91       	pop	r25
    2c86:	8f 91       	pop	r24
    2c88:	7f 91       	pop	r23
    2c8a:	6f 91       	pop	r22
    2c8c:	5f 91       	pop	r21
    2c8e:	4f 91       	pop	r20
    2c90:	3f 91       	pop	r19
    2c92:	2f 91       	pop	r18
    2c94:	0f 90       	pop	r0
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	0f 90       	pop	r0
    2c9a:	1f 90       	pop	r1
    2c9c:	18 95       	reti

00002c9e <__vector_5>:

/*---- Timer2 Overflow Interrupt ----*/
ISR(TIMER2_OVF_vect)  {
    2c9e:	1f 92       	push	r1
    2ca0:	0f 92       	push	r0
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	0f 92       	push	r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	2f 93       	push	r18
    2caa:	3f 93       	push	r19
    2cac:	4f 93       	push	r20
    2cae:	5f 93       	push	r21
    2cb0:	6f 93       	push	r22
    2cb2:	7f 93       	push	r23
    2cb4:	8f 93       	push	r24
    2cb6:	9f 93       	push	r25
    2cb8:	af 93       	push	r26
    2cba:	bf 93       	push	r27
    2cbc:	ef 93       	push	r30
    2cbe:	ff 93       	push	r31
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    if (Timer2_Callback_OVF != NULL_PTR) Timer2_Callback_OVF();
    2cc8:	80 91 88 00 	lds	r24, 0x0088
    2ccc:	90 91 89 00 	lds	r25, 0x0089
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	29 f0       	breq	.+10     	; 0x2cde <__vector_5+0x40>
    2cd4:	e0 91 88 00 	lds	r30, 0x0088
    2cd8:	f0 91 89 00 	lds	r31, 0x0089
    2cdc:	09 95       	icall
}
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	ff 91       	pop	r31
    2ce4:	ef 91       	pop	r30
    2ce6:	bf 91       	pop	r27
    2ce8:	af 91       	pop	r26
    2cea:	9f 91       	pop	r25
    2cec:	8f 91       	pop	r24
    2cee:	7f 91       	pop	r23
    2cf0:	6f 91       	pop	r22
    2cf2:	5f 91       	pop	r21
    2cf4:	4f 91       	pop	r20
    2cf6:	3f 91       	pop	r19
    2cf8:	2f 91       	pop	r18
    2cfa:	0f 90       	pop	r0
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	0f 90       	pop	r0
    2d00:	1f 90       	pop	r1
    2d02:	18 95       	reti

00002d04 <TWI_init>:
 
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr) {
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <TWI_init+0xa>
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
    /* Set bit rate register (TWBR) */
	TWBR =  (uint8)(((F_CPU / (Config_Ptr->bit_rate)) - 16)/2);
    2d16:	00 e2       	ldi	r16, 0x20	; 32
    2d18:	10 e0       	ldi	r17, 0x00	; 0
    2d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d1e:	21 81       	ldd	r18, Z+1	; 0x01
    2d20:	32 81       	ldd	r19, Z+2	; 0x02
    2d22:	43 81       	ldd	r20, Z+3	; 0x03
    2d24:	54 81       	ldd	r21, Z+4	; 0x04
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	92 e1       	ldi	r25, 0x12	; 18
    2d2a:	aa e7       	ldi	r26, 0x7A	; 122
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    2d36:	da 01       	movw	r26, r20
    2d38:	c9 01       	movw	r24, r18
    2d3a:	40 97       	sbiw	r24, 0x10	; 16
    2d3c:	a1 09       	sbc	r26, r1
    2d3e:	b1 09       	sbc	r27, r1
    2d40:	b6 95       	lsr	r27
    2d42:	a7 95       	ror	r26
    2d44:	97 95       	ror	r25
    2d46:	87 95       	ror	r24
    2d48:	f8 01       	movw	r30, r16
    2d4a:	80 83       	st	Z, r24

    /* Clear prescaler bits (TWPS = 00 for prescaler = 1) */
    TWSR = 0x00;
    2d4c:	e1 e2       	ldi	r30, 0x21	; 33
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	10 82       	st	Z, r1

    /* Set device address (shifted left by 1, LSB = GC bit disabled) */
    TWAR = (Config_Ptr->address << 1);
    2d52:	a2 e2       	ldi	r26, 0x22	; 34
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e9 81       	ldd	r30, Y+1	; 0x01
    2d58:	fa 81       	ldd	r31, Y+2	; 0x02
    2d5a:	80 81       	ld	r24, Z
    2d5c:	88 0f       	add	r24, r24
    2d5e:	8c 93       	st	X, r24

    /* Enable TWI module */
    TWCR = (1 << TWEN);
    2d60:	e6 e5       	ldi	r30, 0x56	; 86
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	84 e0       	ldi	r24, 0x04	; 4
    2d66:	80 83       	st	Z, r24
}
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	08 95       	ret

00002d76 <TWI_start>:

void TWI_start(void) {
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    /* Clear TWINT, send START condition, enable TWI */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2d7e:	e6 e5       	ldi	r30, 0x56	; 86
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	84 ea       	ldi	r24, 0xA4	; 164
    2d84:	80 83       	st	Z, r24
    /* Wait for TWINT flag (start condition transmitted) */
    while (BIT_IS_CLEAR(TWCR, TWINT));
    2d86:	e6 e5       	ldi	r30, 0x56	; 86
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	88 23       	and	r24, r24
    2d8e:	dc f7       	brge	.-10     	; 0x2d86 <TWI_start+0x10>
}
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <TWI_stop>:

void TWI_stop(void) {
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    /* Clear TWINT, send STOP condition, enable TWI */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2d9e:	e6 e5       	ldi	r30, 0x56	; 86
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	84 e9       	ldi	r24, 0x94	; 148
    2da4:	80 83       	st	Z, r24
}
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <TWI_writeByte>:

void TWI_writeByte(uint8 data) {
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	0f 92       	push	r0
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
    2db6:	89 83       	std	Y+1, r24	; 0x01
    /* Load data into TWDR */
    TWDR = data;
    2db8:	e3 e2       	ldi	r30, 0x23	; 35
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	80 83       	st	Z, r24
    /* Clear TWINT, enable TWI */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2dc0:	e6 e5       	ldi	r30, 0x56	; 86
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	84 e8       	ldi	r24, 0x84	; 132
    2dc6:	80 83       	st	Z, r24
    /* Wait for TWINT flag (data transmitted) */
    while (BIT_IS_CLEAR(TWCR, TWINT));
    2dc8:	e6 e5       	ldi	r30, 0x56	; 86
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	88 23       	and	r24, r24
    2dd0:	dc f7       	brge	.-10     	; 0x2dc8 <TWI_writeByte+0x1c>
}
    2dd2:	0f 90       	pop	r0
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	08 95       	ret

00002dda <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void) {
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    /* Clear TWINT, enable ACK, enable TWI */
    TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
    2de2:	e6 e5       	ldi	r30, 0x56	; 86
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	84 ec       	ldi	r24, 0xC4	; 196
    2de8:	80 83       	st	Z, r24
    /* Wait for TWINT flag (data received) */
    while (BIT_IS_CLEAR(TWCR, TWINT));
    2dea:	e6 e5       	ldi	r30, 0x56	; 86
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	88 23       	and	r24, r24
    2df2:	dc f7       	brge	.-10     	; 0x2dea <TWI_readByteWithACK+0x10>
    return TWDR;
    2df4:	e3 e2       	ldi	r30, 0x23	; 35
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
}
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void) {
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    /* Clear TWINT, enable TWI (no ACK) */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2e08:	e6 e5       	ldi	r30, 0x56	; 86
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	84 e8       	ldi	r24, 0x84	; 132
    2e0e:	80 83       	st	Z, r24
    /* Wait for TWINT flag (data received) */
    while (BIT_IS_CLEAR(TWCR, TWINT));
    2e10:	e6 e5       	ldi	r30, 0x56	; 86
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	88 23       	and	r24, r24
    2e18:	dc f7       	brge	.-10     	; 0x2e10 <TWI_readByteWithNACK+0x10>
    return TWDR;
    2e1a:	e3 e2       	ldi	r30, 0x23	; 35
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <TWI_getStatus>:

uint8 TWI_getStatus(void) {
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    /* Read status register (mask upper 3 bits) */
    return (TWSR & 0xF8);
    2e2e:	e1 e2       	ldi	r30, 0x21	; 33
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	88 7f       	andi	r24, 0xF8	; 248
}
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <UART_init+0x6>
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <UART_init+0x8>
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	9c 83       	std	Y+4, r25	; 0x04
    2e4a:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = (uint16)(((F_CPU / (8UL * Config_Ptr->baud_rate))) - 1);
    2e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e50:	83 81       	ldd	r24, Z+3	; 0x03
    2e52:	94 81       	ldd	r25, Z+4	; 0x04
    2e54:	a5 81       	ldd	r26, Z+5	; 0x05
    2e56:	b6 81       	ldd	r27, Z+6	; 0x06
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	aa 1f       	adc	r26, r26
    2e5e:	bb 1f       	adc	r27, r27
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	aa 1f       	adc	r26, r26
    2e66:	bb 1f       	adc	r27, r27
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	aa 1f       	adc	r26, r26
    2e6e:	bb 1f       	adc	r27, r27
    2e70:	9c 01       	movw	r18, r24
    2e72:	ad 01       	movw	r20, r26
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	92 e1       	ldi	r25, 0x12	; 18
    2e78:	aa e7       	ldi	r26, 0x7A	; 122
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    2e84:	da 01       	movw	r26, r20
    2e86:	c9 01       	movw	r24, r18
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01

    /* Double speed mode */
    UCSRA = (1 << U2X);
    2e8e:	eb e2       	ldi	r30, 0x2B	; 43
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	80 83       	st	Z, r24

    /* Enable TX/RX */
    UCSRB = (1 << RXEN) | (1 << TXEN);
    2e96:	ea e2       	ldi	r30, 0x2A	; 42
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	88 e1       	ldi	r24, 0x18	; 24
    2e9c:	80 83       	st	Z, r24
    /* Configure frame format:
     * - Bit data (5-8 bits)
     * - Parity
     * - Stop bits
     */
    UCSRC = (1 << URSEL) |
    2e9e:	a0 e4       	ldi	r26, 0x40	; 64
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea6:	80 81       	ld	r24, Z
    2ea8:	88 2f       	mov	r24, r24
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	88 0f       	add	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	20 68       	ori	r18, 0x80	; 128
    2eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb8:	81 81       	ldd	r24, Z+1	; 0x01
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	82 95       	swap	r24
    2ec0:	92 95       	swap	r25
    2ec2:	90 7f       	andi	r25, 0xF0	; 240
    2ec4:	98 27       	eor	r25, r24
    2ec6:	80 7f       	andi	r24, 0xF0	; 240
    2ec8:	98 27       	eor	r25, r24
    2eca:	28 2b       	or	r18, r24
    2ecc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ece:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	88 2f       	mov	r24, r24
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	82 2b       	or	r24, r18
    2ee4:	8c 93       	st	X, r24
           (Config_Ptr->bit_data << UCSZ0) |
           (Config_Ptr->parity << UPM0) |
           (Config_Ptr->stop_bit << USBS);

    /* Set baud rate */
    UBRRH = (ubrr_value >> 8);
    2ee6:	e0 e4       	ldi	r30, 0x40	; 64
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	89 2f       	mov	r24, r25
    2ef0:	99 27       	eor	r25, r25
    2ef2:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    2ef4:	e9 e2       	ldi	r30, 0x29	; 41
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	80 83       	st	Z, r24
}
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	0f 92       	push	r0
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f16:	eb e2       	ldi	r30, 0x2B	; 43
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	80 72       	andi	r24, 0x20	; 32
    2f22:	90 70       	andi	r25, 0x00	; 0
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	b9 f3       	breq	.-18     	; 0x2f16 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f28:	ec e2       	ldi	r30, 0x2C	; 44
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	80 83       	st	Z, r24
}
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f40:	eb e2       	ldi	r30, 0x2B	; 43
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	88 23       	and	r24, r24
    2f48:	dc f7       	brge	.-10     	; 0x2f40 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2f4a:	ec e2       	ldi	r30, 0x2C	; 44
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <UART_sendString+0x6>
    2f5c:	0f 92       	push	r0
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	9b 83       	std	Y+3, r25	; 0x03
    2f64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f66:	19 82       	std	Y+1, r1	; 0x01
    2f68:	0e c0       	rjmp	.+28     	; 0x2f86 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	fc 01       	movw	r30, r24
    2f76:	e2 0f       	add	r30, r18
    2f78:	f3 1f       	adc	r31, r19
    2f7a:	80 81       	ld	r24, Z
    2f7c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
		i++;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	fc 01       	movw	r30, r24
    2f92:	e2 0f       	add	r30, r18
    2f94:	f3 1f       	adc	r31, r19
    2f96:	80 81       	ld	r24, Z
    2f98:	88 23       	and	r24, r24
    2f9a:	39 f7       	brne	.-50     	; 0x2f6a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <UART_receiveString+0xa>
    2fb2:	0f 92       	push	r0
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	9b 83       	std	Y+3, r25	; 0x03
    2fba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fbc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	8c 01       	movw	r16, r24
    2fca:	02 0f       	add	r16, r18
    2fcc:	13 1f       	adc	r17, r19
    2fce:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	80 83       	st	Z, r24
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	8f 5f       	subi	r24, 0xFF	; 255
    2fdc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe8:	8c 01       	movw	r16, r24
    2fea:	02 0f       	add	r16, r18
    2fec:	13 1f       	adc	r17, r19
    2fee:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    3000:	fc 01       	movw	r30, r24
    3002:	e2 0f       	add	r30, r18
    3004:	f3 1f       	adc	r31, r19
    3006:	80 81       	ld	r24, Z
    3008:	83 32       	cpi	r24, 0x23	; 35
    300a:	31 f7       	brne	.-52     	; 0x2fd8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	fc 01       	movw	r30, r24
    3018:	e2 0f       	add	r30, r18
    301a:	f3 1f       	adc	r31, r19
    301c:	10 82       	st	Z, r1
}
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	08 95       	ret

0000302e <__udivmodsi4>:
    302e:	a1 e2       	ldi	r26, 0x21	; 33
    3030:	1a 2e       	mov	r1, r26
    3032:	aa 1b       	sub	r26, r26
    3034:	bb 1b       	sub	r27, r27
    3036:	fd 01       	movw	r30, r26
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <__udivmodsi4_ep>

0000303a <__udivmodsi4_loop>:
    303a:	aa 1f       	adc	r26, r26
    303c:	bb 1f       	adc	r27, r27
    303e:	ee 1f       	adc	r30, r30
    3040:	ff 1f       	adc	r31, r31
    3042:	a2 17       	cp	r26, r18
    3044:	b3 07       	cpc	r27, r19
    3046:	e4 07       	cpc	r30, r20
    3048:	f5 07       	cpc	r31, r21
    304a:	20 f0       	brcs	.+8      	; 0x3054 <__udivmodsi4_ep>
    304c:	a2 1b       	sub	r26, r18
    304e:	b3 0b       	sbc	r27, r19
    3050:	e4 0b       	sbc	r30, r20
    3052:	f5 0b       	sbc	r31, r21

00003054 <__udivmodsi4_ep>:
    3054:	66 1f       	adc	r22, r22
    3056:	77 1f       	adc	r23, r23
    3058:	88 1f       	adc	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	1a 94       	dec	r1
    305e:	69 f7       	brne	.-38     	; 0x303a <__udivmodsi4_loop>
    3060:	60 95       	com	r22
    3062:	70 95       	com	r23
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	9b 01       	movw	r18, r22
    306a:	ac 01       	movw	r20, r24
    306c:	bd 01       	movw	r22, r26
    306e:	cf 01       	movw	r24, r30
    3070:	08 95       	ret

00003072 <__prologue_saves__>:
    3072:	2f 92       	push	r2
    3074:	3f 92       	push	r3
    3076:	4f 92       	push	r4
    3078:	5f 92       	push	r5
    307a:	6f 92       	push	r6
    307c:	7f 92       	push	r7
    307e:	8f 92       	push	r8
    3080:	9f 92       	push	r9
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	ca 1b       	sub	r28, r26
    309c:	db 0b       	sbc	r29, r27
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	09 94       	ijmp

000030aa <__epilogue_restores__>:
    30aa:	2a 88       	ldd	r2, Y+18	; 0x12
    30ac:	39 88       	ldd	r3, Y+17	; 0x11
    30ae:	48 88       	ldd	r4, Y+16	; 0x10
    30b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    30bc:	b9 84       	ldd	r11, Y+9	; 0x09
    30be:	c8 84       	ldd	r12, Y+8	; 0x08
    30c0:	df 80       	ldd	r13, Y+7	; 0x07
    30c2:	ee 80       	ldd	r14, Y+6	; 0x06
    30c4:	fd 80       	ldd	r15, Y+5	; 0x05
    30c6:	0c 81       	ldd	r16, Y+4	; 0x04
    30c8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ca:	aa 81       	ldd	r26, Y+2	; 0x02
    30cc:	b9 81       	ldd	r27, Y+1	; 0x01
    30ce:	ce 0f       	add	r28, r30
    30d0:	d1 1d       	adc	r29, r1
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	ed 01       	movw	r28, r26
    30de:	08 95       	ret

000030e0 <itoa>:
    30e0:	fb 01       	movw	r30, r22
    30e2:	9f 01       	movw	r18, r30
    30e4:	e8 94       	clt
    30e6:	42 30       	cpi	r20, 0x02	; 2
    30e8:	c4 f0       	brlt	.+48     	; 0x311a <itoa+0x3a>
    30ea:	45 32       	cpi	r20, 0x25	; 37
    30ec:	b4 f4       	brge	.+44     	; 0x311a <itoa+0x3a>
    30ee:	4a 30       	cpi	r20, 0x0A	; 10
    30f0:	29 f4       	brne	.+10     	; 0x30fc <itoa+0x1c>
    30f2:	97 fb       	bst	r25, 7
    30f4:	1e f4       	brtc	.+6      	; 0x30fc <itoa+0x1c>
    30f6:	90 95       	com	r25
    30f8:	81 95       	neg	r24
    30fa:	9f 4f       	sbci	r25, 0xFF	; 255
    30fc:	64 2f       	mov	r22, r20
    30fe:	77 27       	eor	r23, r23
    3100:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
    3104:	80 5d       	subi	r24, 0xD0	; 208
    3106:	8a 33       	cpi	r24, 0x3A	; 58
    3108:	0c f0       	brlt	.+2      	; 0x310c <itoa+0x2c>
    310a:	89 5d       	subi	r24, 0xD9	; 217
    310c:	81 93       	st	Z+, r24
    310e:	cb 01       	movw	r24, r22
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	a1 f7       	brne	.-24     	; 0x30fc <itoa+0x1c>
    3114:	16 f4       	brtc	.+4      	; 0x311a <itoa+0x3a>
    3116:	5d e2       	ldi	r21, 0x2D	; 45
    3118:	51 93       	st	Z+, r21
    311a:	10 82       	st	Z, r1
    311c:	c9 01       	movw	r24, r18
    311e:	0c 94 91 18 	jmp	0x3122	; 0x3122 <strrev>

00003122 <strrev>:
    3122:	dc 01       	movw	r26, r24
    3124:	fc 01       	movw	r30, r24
    3126:	67 2f       	mov	r22, r23
    3128:	71 91       	ld	r23, Z+
    312a:	77 23       	and	r23, r23
    312c:	e1 f7       	brne	.-8      	; 0x3126 <strrev+0x4>
    312e:	32 97       	sbiw	r30, 0x02	; 2
    3130:	04 c0       	rjmp	.+8      	; 0x313a <strrev+0x18>
    3132:	7c 91       	ld	r23, X
    3134:	6d 93       	st	X+, r22
    3136:	70 83       	st	Z, r23
    3138:	62 91       	ld	r22, -Z
    313a:	ae 17       	cp	r26, r30
    313c:	bf 07       	cpc	r27, r31
    313e:	c8 f3       	brcs	.-14     	; 0x3132 <strrev+0x10>
    3140:	08 95       	ret

00003142 <__udivmodhi4>:
    3142:	aa 1b       	sub	r26, r26
    3144:	bb 1b       	sub	r27, r27
    3146:	51 e1       	ldi	r21, 0x11	; 17
    3148:	07 c0       	rjmp	.+14     	; 0x3158 <__udivmodhi4_ep>

0000314a <__udivmodhi4_loop>:
    314a:	aa 1f       	adc	r26, r26
    314c:	bb 1f       	adc	r27, r27
    314e:	a6 17       	cp	r26, r22
    3150:	b7 07       	cpc	r27, r23
    3152:	10 f0       	brcs	.+4      	; 0x3158 <__udivmodhi4_ep>
    3154:	a6 1b       	sub	r26, r22
    3156:	b7 0b       	sbc	r27, r23

00003158 <__udivmodhi4_ep>:
    3158:	88 1f       	adc	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	5a 95       	dec	r21
    315e:	a9 f7       	brne	.-22     	; 0x314a <__udivmodhi4_loop>
    3160:	80 95       	com	r24
    3162:	90 95       	com	r25
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	08 95       	ret

0000316a <_exit>:
    316a:	f8 94       	cli

0000316c <__stop_program>:
    316c:	ff cf       	rjmp	.-2      	; 0x316c <__stop_program>
